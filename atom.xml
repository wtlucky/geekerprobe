<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeekerProbe]]></title>
  <link href="http://blog.wtlucky.com/atom.xml" rel="self"/>
  <link href="http://blog.wtlucky.com/"/>
  <updated>2016-10-11T18:29:00+08:00</updated>
  <id>http://blog.wtlucky.com/</id>
  <author>
    <name><![CDATA[wtlucky ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[懒人福利：用脚本来修改Xcode工程]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/10/10/use-script-to-modify-xcode-project/"/>
    <updated>2016-10-10T17:59:55+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/10/10/use-script-to-modify-xcode-project</id>
    <content type="html"><![CDATA[<p>懒，基本上是每个程序员同学公有的特性。也就是因为懒才造就了现在众多先进的发明，才让我们的生活省时省力起来。写这篇文章，也是因为自己犯懒，不想总是重复性的干一些固定的工作，所以通过脚本来完成。文章主要介绍了<a href="http://rubygems.org/gems/xcodeproj">Xcodeproj</a>这个<code>Ruby</code>的工具包，为了使用这个工具包我还现学现卖了<code>Ruby</code>这门语言，算是个入门级选手了吧，其实真的没有想象中的那么复杂。
如果已经是能够熟练使用<code>Xcodeproj</code>的选手，就可以不用继续往下看了。^_^</p>

<!-- More -->


<p>先介绍下背景，我们的项目<code>Model</code>层使用了自己的ORM框架，同时也使用了<code>Protocol Buffer</code>，这也就导致了每个版本之间有新增接口，或者接口文档有变化的时候，都需要重新生成对应的<code>Model</code>文件。而这些文件每次都要手动替换<code>Xcode</code>中的现有文件，这其实是一件很枯燥很麻烦的时间，而且非常容易出错，漏掉一个文件或者少替换一个文件都是很棘手的问题。虽然我现在编写了一部分<code>Shell</code>脚本，可以直接将新生成的文件替换到<code>Xcode</code>工程所对应的物理目录中。但是即使如此，还需要对<code>Xcode</code>的工程文件作出处理，增加新文件的引用，如果不增加引用，只是把文件丢到物理目录上的话，<code>Xcode</code>工程并不会索引这个文件。同时像PB那些文件还需要添加<code>-fno-objc-arc</code>这个编译指示符，而这些文件往往有几十个之多，简直要爆炸！(不过还好有搜索批量添加的功能，暂时忍了。。)</p>

<p>后来就想，物理文件通过<code>Shell</code>脚本搞定了，那剩下的这个能不能也通过工具给搞定？有两个思路。</p>

<h2>1. Xcode Extension</h2>

<p>最近比较流行的就是<code>Xcode Extension</code>了，它真的是无所不能，各种各样的插件都已经存在了，我就觉得这个一定行。所以开始着手干，后来发现这个需求其实是太复杂了点儿。</p>

<p>首先<code>Xcode</code>插件的开发需要监测所有Xcode发出的<code>Notifications</code>，然后摘取出自己需要的，并弄清楚各个参数的类型及关系，同时还需要一定的逆向功底，找到对应Xcode控件的实现方法及如何使用，我自己尝试了下，虽然找到了几个关键的notification，但是Xcode文件管理那里各个元素分别对应何种类，着实让我头大了一把。后来随着Xcode8的发布，苹果禁掉了第三方的插件，所以这一条路自然也就走不下去了。</p>

<h2>2. pbxproj文件</h2>

<p>做过多人协作开发的同学都会遇到代码冲突的情况，而所有与工程相关的冲突都会体现在pbxproj这个文件上，这个文件就处在.xcodeproj这个目录中，这个文件其实就是整个Xcode工程的配置文件，所有的文件引用，group关系，build设置都在这里面能够找到。仔细去看他就是一个plist文件也就是一个特殊的xml文件。它的编写有着一定的规律。</p>

<p>所以通过对这个文件的编写也能够达到同样的目的，所以尝试着手搓一下。然而当我真正分析这个文件的时候就发现，随随便便一个工程这个文件就有着动辄上千行文字，而且内部不同数据之间的格式也都不近相同，然后每个数据之前都有一个24位的16进制数字。这个数字的生成还是一个迷之存在，感觉应该是个UUID。</p>

<p>截取部分文件的内容如图所示：
<img src="https://oac67o3cg.qnssl.com/1476154768.png" alt="" /></p>

<p>最终经过尝试，这个文件处理啊起来也不是十分的容易，不过我在写这篇文章的时候看到一篇研究
pbxproj文件的文章，讲的十分深入透彻。<a href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/">Let&rsquo;s Talk About project.pbxproj</a>，对这个文件感兴趣的同学推荐去阅读。</p>

<h3>先人的轮子</h3>

<p>正在上面两种策略发愁的时候，出现了柳暗花明又一村的事情，最近在阅读一篇博客的时候发现了这么一篇文章<a href="http://draveness.me/bei-xcodeproj-keng-de-zhe-ji-tian/">使用代码为 Xcode 工程添加文件</a>，介绍的就是这个一个需求，才知道了又<code>Xcodeproj</code>这样一个前人已经造好的轮子了。后来一想也确实是，CocoaPods能够通过脚本完成项目工程的修改，他们一定已经做好这件事情了。</p>

<p>在发现这个新大陆之后，立马就开始着手准备编写适合自己需求的脚本文件。我在比之前那个作者写起来方便多了，因为现在这个工具有了完善的<a href="http://www.rubydoc.info/gems/xcodeproj">文档支持</a>。这为开发提供了很大的便捷性。</p>

<p>我自己的需求整体上看其实就需要干两件事，因为所有文件事先已经全部移动到物理目录了，所以首先要把Xcode工程中，对应group下的所有文件删掉，然后在创建相应的group，并将文件添加到对应的group中。最后再根据需要添加编译指示的文件，添加编译指示，就完了。</p>

<p>那么首先就是打开工程，找到Target，一般的项目，target的第一个就是我们所需要的主target了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;xcodeproj&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;functions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">project_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../iphone/Zhidao.xcodeproj&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">project</span> <span class="o">=</span> <span class="no">Xcodeproj</span><span class="o">::</span><span class="no">Project</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">project_path</span><span class="p">)</span>
</span><span class='line'><span class="n">target</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="n">targets</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿到target之后，就要找到们所存放相应目录的group，group在<code>Xcodeproj</code>中对应这个类<code>PBXGroup</code>，通过查看文档可以找到他提供了一个<code>find_subpath</code>的方法，会从它自身这个节点根据提供的path依次向下寻找，最后一个参数为如果没有找到，是否创建这个group。拿到这个group之后，根据我自身项目的需要，因为我的group和文件的物理目录是一一对应的，还需要设置一下它的<code>source_tree</code>和<code>path</code>，对应的就是<code>Xcode</code>中的这个内容。</p>

<p><img src="https://oac67o3cg.qnssl.com/1476179089.png" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mapiGroup</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="n">main_group</span><span class="o">.</span><span class="n">find_subpath</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;Frameworks&#39;</span><span class="p">,</span> <span class="s1">&#39;Libraries&#39;</span><span class="p">,</span> <span class="s1">&#39;ZDNetManager&#39;</span><span class="p">,</span> <span class="s1">&#39;MAPI&#39;</span><span class="p">),</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">mapiGroup</span><span class="o">.</span><span class="n">set_source_tree</span><span class="p">(</span><span class="s1">&#39;&lt;group&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">mapiGroup</span><span class="o">.</span><span class="n">set_path</span><span class="p">(</span><span class="s1">&#39;MAPI&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取到了根group之后，就可以拿到他的children，然后就可以递归找到每一个文件，调用<code>remove_form_project</code>了，但是我在实际编写的过程中，发现一旦对一个文件调用了<code>remove_form_project</code>之后，那这个循环就break了，也就只执行了一次，尝试了各种方法也没找到解决方案，在Github上还找到了有人提过这个<a href="https://github.com/CocoaPods/Xcodeproj/issues/132">issue</a>，但是好像也没有解决。最后通过再次翻查文档，发现还有<code>clear</code>这样一个方法，它会直接清空整个group下的所有元素，非常适合我的需求，不需要我自己去遍历了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">mapiGroup</span><span class="o">.</span><span class="n">empty?</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">mapiGroup</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是使用过之后，还存在问题这仅仅是在<code>Xcode</code>中左侧的<code>Project Navigator</code>中把文件引用删除了，但是对于<code>.m</code>或者资源文件这种需要加入到target中的文件，并不会直接删掉，如此一来在<code>Xcode</code>的<code>Build Phase</code>中就会看到这样的情况。文件丢失。</p>

<p><img src="https://oac67o3cg.qnssl.com/1476179895.png" alt="" /></p>

<p>所以针对这种情况，就需要在clear之前，对这些文件特殊处理，在target中将文件引用删掉。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">removeBuildPhaseFilesRecursively</span><span class="p">(</span><span class="n">aTarget</span><span class="p">,</span> <span class="n">aGroup</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aGroup</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">real_path</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s2">&quot;.m&quot;</span><span class="p">,</span> <span class="s2">&quot;.mm&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>          <span class="n">aTarget</span><span class="o">.</span><span class="n">source_build_phase</span><span class="o">.</span><span class="n">remove_file_reference</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">file</span><span class="o">.</span><span class="n">real_path</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s2">&quot;.plist&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>          <span class="n">aTarget</span><span class="o">.</span><span class="n">resources_build_phase</span><span class="o">.</span><span class="n">remove_file_reference</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">aGroup</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">group</span><span class="o">|</span>
</span><span class='line'>      <span class="n">removeBuildPhaseFilesRecursively</span><span class="p">(</span><span class="n">aTarget</span><span class="p">,</span> <span class="n">group</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是添加新的文件，首先通过<code>find_subpath</code>将所有的group创建出来，然后在将每个group下对应的文件给引用进去就可以了。这里对<code>.m</code>和资源文件还是需要单独处理，因为不光工程要引用他们，target也需要引用他们。所以先向工程添加之后拿到返回的<code>PBXFileReference</code>，在向target对应的<code>build_phase</code>添加即可。虽然target提供了增加一组文件的方法<code>add_file_references</code>，但是这样的添加方式并不能设定编译指示，一个Target的<code>Build rule</code>对应着<code>PBXBuildRule</code>，从文档中没有找到丝毫设置的方法。后来倒是发现再向target的<code>build_phase</code>中添加单个文件的时候可以设置<code>compiler flags</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">addFilesToGroup</span><span class="p">(</span><span class="n">aTarget</span><span class="p">,</span> <span class="n">aGroup</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="n">aGroup</span><span class="o">.</span><span class="n">real_path</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span>
</span><span class='line'>      <span class="n">filePath</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">aGroup</span><span class="o">.</span><span class="n">real_path</span><span class="p">,</span> <span class="n">entry</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># 过滤目录和.DS_Store文件</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">!</span><span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">filePath</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">entry</span> <span class="o">!=</span> <span class="s2">&quot;.DS_Store&quot;</span> <span class="k">then</span>
</span><span class='line'>          <span class="c1"># 向group中增加文件引用</span>
</span><span class='line'>          <span class="n">fileReference</span> <span class="o">=</span> <span class="n">aGroup</span><span class="o">.</span><span class="n">new_reference</span><span class="p">(</span><span class="n">filePath</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># 如果不是头文件则继续增加到Build Phase中，PB文件需要加编译标志</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">filePath</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s2">&quot;pbobjc.m&quot;</span><span class="p">,</span> <span class="s2">&quot;pbobjc.mm&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>              <span class="n">aTarget</span><span class="o">.</span><span class="n">add_file_references</span><span class="p">(</span><span class="o">[</span><span class="n">fileReference</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;-fno-objc-arc&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">elsif</span> <span class="n">filePath</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s2">&quot;.m&quot;</span><span class="p">,</span> <span class="s2">&quot;.mm&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>              <span class="n">aTarget</span><span class="o">.</span><span class="n">source_build_phase</span><span class="o">.</span><span class="n">add_file_reference</span><span class="p">(</span><span class="n">fileReference</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>          <span class="k">elsif</span> <span class="n">filePath</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s2">&quot;.plist&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>              <span class="n">aTarget</span><span class="o">.</span><span class="n">resources_build_phase</span><span class="o">.</span><span class="n">add_file_reference</span><span class="p">(</span><span class="n">fileReference</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后将一切执行完之后，执行一下保存就完事儿了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">project</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>这篇文章没有多高深，主要就是介绍一下<code>Xcodeproj</code>这个轮子，有遇到相同类似需求的同学可以参考下，因为介绍这个轮子的资料确实太少了。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__bridge_retain __bridge_transfer]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/06/04/bridge-retain-bridge-transfer/"/>
    <updated>2016-06-04T16:34:46+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/06/04/bridge-retain-bridge-transfer</id>
    <content type="html"><![CDATA[<h3>CF对象与NS对象互转</h3>

<p>在ARC下，如果我们需要操作一些底层的库，有时会用到Core Foundation的对象，简称CF对象，例如Core Graphic、Core Text。在ARC下，这些CF的对象的内存是不会被自动管理的，而是需要我们在它的生命周期结束的时候调用CFRelease()释放它。</p>

<p>CF对象与NS对象之间如何相互转换呢？系统提供了<strong>bridge,</strong>bridge_retained,__bridge_transfer 三个关键字给我们使用。</p>

<!-- More -->


<h4>__bridge</h4>

<p>__bridge只是单纯的对象类型的转换，并没有涉及到对象所有权的转移，所以需要把握好对象的生命周期，否则会出项野指针的情况。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIActivity</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>  <span class="c1">// 出了作用域，obj被释放。</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">foo</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>  <span class="c1">// 为了切实将释放的内存被占用。</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;class=%@&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">p</span> <span class="k">class</span><span class="p">]);</span>  <span class="c1">// p为野指针，crash</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://oac67o3cg.qnssl.com/1475116928.png" alt="" /></p>

<p>NS对象转为CF对象会出项野指针，逆过来CF转NS对象则有可能会出现内存泄露的问题，具体见下面的<strong>bridge_transfer的介绍。简单来说</strong>bridge就是类型强制转换。</p>

<h4>__bridge_retained</h4>

<p>__bridge_retained用于将NS对象转为CF对象，这其中有所有权的转移，NS对象会被retain一次再交给CF处理，这样即使原始的NS的对象在被ARC自动处理release一次之后，它的retainCount也不会为0，从而不会被销毁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIActivity</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>  <span class="c1">// 出了作用域，obj被释放。p同时也有了所有权’</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">foo</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>  <span class="c1">// 为了切实将释放的内存被占用。</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;class=%@&quot;</span><span class="p">,</span> <span class="p">[(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">p</span> <span class="k">class</span><span class="p">]);</span>  <span class="c1">// 正确打印UIActivity</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下引用计数的变化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">foo</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">foo</span><span class="p">));</span> <span class="c1">// 1152921504606846975</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">rfoo</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">rfoo</span><span class="p">));</span> <span class="c1">// 1152921504606846975</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到引用计数是一个超级大的整数，这是因为在arc下直接创建的Foundation对象的引用计数都被处理过了，无法看到具体的数值。</p>

<p>这一操作系统给我们提供了一个内联函数来干这件事CFBridgingRetain，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NS_INLINE</span> <span class="n">CF_RETURNS_RETAINED</span> <span class="n">CFTypeRef</span> <span class="n">__nullable</span> <span class="nf">CFBridgingRetain</span><span class="p">(</span><span class="kt">id</span> <span class="n">__nullable</span> <span class="n">X</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">X</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>__bridge_transfer</h4>

<p>__bridge_transfer用于将CF对象转为NS对象，同样的这其中也有所有权的转移，CF对象会在转换为NS对象后进行一次release操作，即把所有权完全移交给NS对象来处理，看一下引用计数的变化：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFStringRef</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">CFStringCreateMutable</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge_transfer</span> <span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">ref</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">string</span><span class="p">));</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的对象是由Core Foundation创建的，所以它的引用计数可以被打印出来，可以看到在ARC环境下，string会被声明成strong类型，所以这个对象的retainCount会被加1，但是转换之后仍然为1，即CF对象已经放弃了它的所有权。</p>

<p>如果是__bridge的话</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFStringRef</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">CFStringCreateMutable</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">ref</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">ref</span><span class="p">));</span>  <span class="c1">// 2</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%lu&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">string</span><span class="p">));</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换之后的引用计数是2，即CF和NS对象同时有着持有权，这样在出了当前的作用域后，ARC会自动给NS对象做release，但是CF对象需要手动调用CFRelease()，如果忘记了的话，那就是内存泄露。</p>

<p>同样，这一操作系统给也我们提供了一个内联函数来干这件事CFBridgingRetain，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NS_INLINE</span> <span class="kt">id</span> <span class="n">__nullable</span> <span class="nf">CFBridgingRelease</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">CF_CONSUMED</span> <span class="n">__nullable</span> <span class="n">X</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">X</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>这其中的关系可以用下图来直接说明，记住这张图就可以了：</p>

<p><img src="https://oac67o3cg.qnssl.com/1475116891.png" alt="" /></p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Support for IPv6]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/05/09/support-for-ipv6/"/>
    <updated>2016-05-09T15:41:22+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/05/09/support-for-ipv6</id>
    <content type="html"><![CDATA[<p>苹果于2016年5月4日告知开发者应用需要在6月1日前支持IPv6-only,也就是说在 6 月 1 日后发布的新版本是需要支持 IPv6-only。</p>

<p>原文地址：<a href="https://developer.apple.com/news/?id=05042016a">https://developer.apple.com/news/?id=05042016a</a></p>

<p>首先看下图</p>

<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/art/NetworkingFrameworksAndAPIs_2x.png" alt="image" /></p>

<p>其中蓝色部分的高级API，其实都已经帮我们做好了IPv6的支持，我们使用的大多数第三方网络库也都是基于这些高级API的，所以这里我们不需要做什么改动。
需要注意的是下面的红色部分的底层的socket API需要做出适配支持。</p>

<!-- More -->


<h2>适配支持方案</h2>

<ul>
<li>不要使用硬编码的IPv4的地址，取而代之应该使用域名;</li>
<li>搜一下是否有用到下面的这些API，这些API都是只针对IPv4做处理的，删除掉就可以：

<blockquote><ul>
<li>inet_addr()</li>
<li>inet_aton()</li>
<li>inet_lnaof()</li>
<li>inet_makeaddr()</li>
<li>inet_netof()</li>
<li>inet_network()</li>
<li>inet_ntoa()</li>
<li>inet_ntoa_r()</li>
<li>bindresvport()</li>
<li>getipv4sourcefilter()</li>
<li>setipv4sourcefilter()</li>
</ul>
</blockquote></li>
<li>如果项目中用到了以下的IPv4的类型，那么也要支持相应的IPv6类型</li>
</ul>


<p><img src="https://oac67o3cg.qnssl.com/1475116800.png" alt="" /></p>

<ul>
<li>如果强制需要使用IPv4的地址，苹果官方的适配方法给出了解决方式。<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html">Use System APIs to Synthesize IPv6 Addresses</a></li>
</ul>


<h2>适配支持验证方法</h2>

<p>测试验证方式就是通过Mac的共享网络共享一个IPv6的无线网，跟已往创建方式不同的是进入共享时需要按住<code>Option</code>键，不然<code>Create NAT64 Network</code>的选项不会出现</p>

<p><img src="https://oac67o3cg.qnssl.com/1475116819.png" alt="" /></p>

<p>然后开启无线共享，使iPhone连接上分享出来的热点即可
注：需要将iPhone的蜂窝网络数据关掉，以保证只有通过WiFi在连接网络。</p>

<h2>适配经验</h2>

<p>在自己的项目中检查了一下，需要做出修改的都是集中在网路库的<code>Reachability</code>相关操作中。如<code>AFNetworking</code>的<code>AFNetworkReachabilityManager</code>，它已经支持了IPv6，但是在他的支持中加了个一个条件编译的选项，判断了系统的版本，一直不明白它这么做的原因是什么，因此我也提交了一个<a href="https://github.com/AFNetworking/AFNetworking/issues/3498">issue</a>询问了下，等待大神给出解释。</p>

<blockquote><p><strong>UPDATE：2016年05月11日：</strong></p>

<p>后来发现<code>Reachability</code>在iOS9以下的系统上如果适配了IPv6的话则会导致失效，网络监测状态不准，应该是苹果自身的bug，所以在这些系统上还需要使用IPv4的数据结构，<code>AFNetworking</code>的大神也对我的<a href="https://github.com/AFNetworking/AFNetworking/issues/3498">issue</a>给出了解答，同时在<code>Alamofire</code>中也有对这个bug描述的<a href="https://github.com/Alamofire/Alamofire/issues/1228">issue</a>。</p></blockquote>

<p>除此之外，我们自己也用到了一个<code>Reachability</code>的类似物，这就需要对它单独做出IPv6的支持，具体方法可以参照<code>Apple</code>自己官方提供的<a href="https://developer.apple.com/library/ios/samplecode/Reachability/Listings/Reachability_Reachability_h.html"><code>Reachability</code>Demo</a>，这个Demo中的ReadMe中也介绍了一些很有用的信息。</p>

<blockquote><h5>IPv6 Support</h5>

<p>Reachability fully supports IPv6.  More specifically, each of the APIs handles IPv6 in the following way:</p>

<ul>
<li><p>reachabilityWithHostName and SCNetworkReachabilityCreateWithName:  Internally, this API works be resolving the host name to a set of IP addresses (this can be any combination of IPv4 and IPv6 addresses) and establishing separate monitors on all available addresses.</p></li>
<li><p>reachabilityWithAddress and SCNetworkReachabilityCreateWithAddress:  To monitor an IPv6 address, simply pass in an IPv6 <code>sockaddr_in6 struct</code> instead of the IPv4 <code>sockaddr_in struct</code>.</p></li>
<li><p>reachabilityForInternetConnection:  This monitors the address 0.0.0.0, which reachability treats as a special token that causes it to actually monitor the general routing status of the device, both IPv4 and IPv6.</p></li>
</ul>


<h5>Removal of reachabilityForLocalWiFi</h5>

<p>Older versions of this sample included the method reachabilityForLocalWiFi. As originally designed, this method allowed apps using Bonjour to check the status of &ldquo;local only&rdquo; Wi-Fi (Wi-Fi without a connection to the larger internet) to determine whether or not they should advertise or browse.</p>

<p>However, the additional peer-to-peer APIs that have since been added to iOS and OS X have rendered it largely obsolete.  Because of the narrow use case for this API and the large potential for misuse, reachabilityForLocalWiFi has been removed from Reachability.</p>

<p>Apps that have a specific requirement can use reachabilityWithAddress to monitor IN_LINKLOCALNETNUM (that is, 169.254.0.0).</p>

<p>Note: ONLY apps that have a specific requirement should be monitoring IN_LINKLOCALNETNUM.  For the overwhelming majority of apps, monitoring this address is unnecessary and potentially harmful.</p></blockquote>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[慎用SafeKit类似物]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/04/24/be-careful-with-safekit/"/>
    <updated>2016-04-24T21:06:13+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/04/24/be-careful-with-safekit</id>
    <content type="html"><![CDATA[<p>SafeKit一般指那些被用来防止App crash的类库或者方案，常见的方式有通过<code>method swizzling</code>替换系统方法，或者通过消息转发机制将无法响应的方法都转发给一个可以handle任何消息的对象身上等。通过这些方式都可以将·常见数组越界、<code>unrecognized selector sent to instante 0xXXXXXXXX</code>等crash类型在App内部自身得到消化处理，从而将程序的crash率降到一个可以接受的范围内。</p>

<p>在我刚刚开始写Objective-C代码的时候，觉得这是一种非常好的编程方式，应该大力推崇，能够极大地降低crash率，想怎么写代码就怎么写代码，妈妈再也不担心我的程序会crash了。<strong>但是</strong>，后来渐渐发现这并不是一种很好的解决方案，它其实是一把双刃剑。在给我们带来便利的同时也给我们带来了一些不利的地方。这就是本次讨论的主题<code>慎用或者不用SafeKit类似物</code>。</p>

<!-- More -->


<p>SateKit的实现一般都是借助于Objective-C的runtime特性，但是这样实现起来就会很黑，也就是我们常说的<strong>黑魔法</strong>，<strong>黑魔法</strong>往往能给我们带来意想不到的效果，但是这样一来就将一些本该在程序的编译期就该发现的问题给滞后到了程序的运行时，甚至将本该暴露的问题而隐藏了起来。这种方式其实被我们称为<code>埋车头</code>的方案，发生了错误，没有响应机制，而是将事故车头埋藏起来，对外表现出一切良好。如此看来这种方式是我们万万不可取的，长期下去，只会产出越来越多的不稳定代码，代码中的问题不能及时暴露出来，久而久之成为编码习惯，后果可想而知。</p>

<p>最近工作中还遇到了一件与使用SafeKit相关的事儿，着实是踩了个坑，拿出来分享下。具体情况是这样，有一个宿主程序，他接收各个业务方以SDK的方式提供给它的静态库以供其正常运行。而我负责开发其中的一个SDK，在开发完成之后也通过了宿主程序接入验证，并由QA验证交付给宿主方后。却得到了宿主方QA的反馈说我们页面展示有问题，无数据展示。这怎么可能呢，在我们自己这里好好的，也自己接入宿主程序验证过，没有任何问题。要来宿主方的测试ipa，安装后发现确实有问题，通过抓包发现有数据请求也有正确数据返回，但是就是页面数据无法展示，真是见了鬼。只好同他们的RD要来最新的宿主程序，测试发现在新的宿主程序上确实有问题，但是老的宿主程序就没有问题，同样的是一份代码，问题肯定就出现在宿主程序上。</p>

<p>虽然明确知道问题出在宿主程序上，但是人家是大爷，你是不能让人家去查找修复问题的，只能用宿主程序和自己的SDK代码去Debug了，最后发现在数据解析时，见鬼了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="l">@[</span><span class="p">@</span><span class="err">“</span><span class="n">this</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">is</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">path</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">path</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">capitalizedString</span><span class="p">))];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(@</span><span class="err">“</span><span class="o">%</span><span class="p">@</span><span class="err">”</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span> <span class="c1">// [&lt;NSNull null&gt;, &lt;NSNull null&gt;, &lt;NSNull null&gt;, &lt;NSNull null&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我取首字母转大写的string，最后怎么给我一堆<code>NSNull</code>对象，也正是因为导致我数据解析失败。<code>KVC</code>返回<code>NSNull</code>，难道是我用错了？那我就不用<code>one line of code</code>，使用另外的方式试试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="l">@[</span><span class="p">@</span><span class="err">“</span><span class="n">this</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">is</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">path</span><span class="err">”</span><span class="p">,</span> <span class="p">@</span><span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithCapacity</span><span class="p">:</span><span class="n">path</span><span class="p">.</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">path</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="err"> </span><span class="n">_Nonnull</span> <span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span><span class="err"> </span><span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span> <span class="n">capitalizedString</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">paths</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(@</span><span class="err">“</span><span class="o">%</span><span class="p">@</span><span class="err">”</span><span class="p">,</span> <span class="n">paths</span><span class="p">);</span> <span class="c1">// [@“This”, @“Is”, @“Path”, @“String”]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样是正确ok的，那说明我的<code>KVC</code>没有用错啊，难道是宿主方把<code>KVC</code>禁用掉了，或者是给黑掉了？联系对方RD检查宿主工程，说没有禁用<code>valueForKeyPath:</code>，没有找到相关代码，他们自身也在用（自身也在用都没有发现问题么？我觉得随便在宿主工程里建个VC，写个KVC都是会返回NSNull的）。还是那句话人家是大爷，只能自己SDK方修改，去掉这里的<code>KVC</code>。其实我们的SDK中大量使用了<code>valueForKeyPath: </code>，只修改这一处肯定是不行的，其他地方同样会出问题，果然第二天，他们又发现的其他的问题，经确认还是<code>KVC</code>返回<code>NSNull</code>的问题。</p>

<p>总不能把所有的<code>KVC</code>都给改掉？最后强烈要求对方去排查，自己也通过增加符号断点<code>-[NSObject valueForKeyPath:]</code>追查，并未发现任何异常，看来只能是在runtime里干事儿了。最终宿主方通过逐个排除SDK的方式，发现问题就出在另一个业务方的SDK上。</p>

<p>我猜他们一定是使用了SafeKit类似的东西，将<code>valueForKeyPath: </code>进行了处理，写一段伪码大概就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">fd_valueForKeyPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">keyPath</span> <span class="n">isSafe</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// 一些安全性检查</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="bp">NSNull</span> <span class="n">null</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">fd_valueForKeyPath</span><span class="p">:</span><span class="n">keyPath</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以要么是<code>method swizzling</code>替换了实现，要么是通过<code>category</code>重写覆盖了原始的系统方法。</p>

<p>所以回到主题上来，SafeKit这种东西还是慎用或者别用的好，一方面把本应该暴露出的问题给隐藏了起来，这会导致开发者过于依赖SafeKit，没有了它，代码的质量将急剧下降。另一方面，如果你的代码还会融入到其他的工程中去的话，例如产品自身是一个SDK，那么使用SafeKit或者runtime Hook了系统方法，那么带来的将是毁灭性的灾难。因为这对使用你SDK的宿主方的开发带来极大的不变。因为这是侵染性的处理方式，不仅仅是在你自己的SDK中SafeKit会起作用，同样的在整个宿主App内都会起作用。如此一来不出问题还好，一旦出了问题，那排查起来简直让人崩溃。</p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FDStackView —— Downward Compatible UIStackView (Part 3)]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/02/04/fdstackview-downward-compatible-uistackview-part-3/"/>
    <updated>2016-02-04T15:24:55+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/02/04/fdstackview-downward-compatible-uistackview-part-3</id>
    <content type="html"><![CDATA[<p>上一篇<a href="http://blog.wtlucky.com/blog/2016/01/19/fdstackview-downward-compatible-uistackview-part-2/"><code>Part 2</code></a>只介绍了第一个技术点<strong><code>alignment</code>和<code>distribution</code>的约束如何添加和管理</strong>的<code>alignment</code>这一部分的内容，这一篇继续介绍<code>distribution</code>的约束添加和管理。</p>

<p>同样的在介绍实现之前，我先介绍一下<code>StackView</code>的各种<code>distribution</code>模式都是什么效果的：</p>

<!-- More -->


<ul>
<li><strong>UIStackViewDistributionFill</strong>：这种应该是目前最常用的了，它就是将<code>arrangedSubviews</code>填充满整个<code>StackView</code>，如果设置了spacing，那么这些<code>arrangedSubviews</code>之间的间距就是spacing。如果减去所有的spacing，所有的<code>arrangedSubview</code>的固有尺寸(<code>intrinsicContentSize</code>)不能填满或者超出<code>StackView</code>的尺寸，那就会按照<code>Hugging</code>或者<code>CompressionResistance</code>的优先级来拉伸或压缩一些<code>arrangedSubview</code>。如果出现优先级相同的情况，就按排列顺序来拉伸或压缩。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/distribute_fillroportionally_2x_4a83cd74-be8d-4ef1-adf9-c5252a1bcc65.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewDistributionFillEqually</strong>：这种就是<code>StackView</code>的尺寸减去所有的spacing之后均分给<code>arrangedSubviews</code>，每个<code>arrangedSubview</code>的尺寸是相同的。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/distribute_fillequally_2x_5ccda608-869a-48b9-9515-9b6314d091a9.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewDistributionFillProportionally</strong>：这种跟FillEqually差不多，只不过这个不是讲尺寸均分给<code>arrangedSubviews</code>，而是根据<code>arrangedSubviews</code>的<code>intrinsicContentSize</code>按比例分配。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/distribute_fillroportionally_2x_4a83cd74-be8d-4ef1-adf9-c5252a1bcc65.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewDistributionEqualSpacing</strong>：这种是使<code>arrangedSubview</code>之间的spacing相等，但是这个spacing是有可能大于<code>StackView</code>所设置的spacing，但是绝对不会小于。这个类型的布局可以这样理解，先按所有的<code>arrangedSubview</code>的<code>intrinsicContentSize</code>布局，然后余下的空间均分为spacing，如果大约<code>StackView</code>设置的spacing那这样就OK了，如果小于就按照<code>StackView</code>设置的spacing，然后按照<code>CompressionResistance</code>的优先级来压缩一个<code>arrangedSubview</code>。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/distribute_equalspacing_2x_6668568b-a445-402c-94ae-f5e85b0b10bd.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewDistributionEqualCentering</strong>：这种是使<code>arrangedSubview</code>的中心点之间的距离相等，这样没两个<code>arrangedSubview</code>之间的spacing就有可能不是相等的，但是这个spacing仍然是大于等于<code>StackView</code>设置的spacing的，不会是小于。这个类型布局仍然是如果<code>StackView</code>有多余的空间会均分给<code>arrangedSubviews</code>之间的spacing，如果空间不够那就按照<code>CompressionResistance</code>的优先级压缩<code>arrangedSubview</code>。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/distribute_equalcentering_2x_7089d0d3-f161-452b-ab3e-9885c7b6101e.png" alt="image" /></p>

<p>在介绍<code>distribution</code>的约束创建和管理的过程中也涉及到了第二个知识点<strong><code>spacing</code>和<code>distribution</code>的关系及约束的创建</strong>的内容，所以这两部都在这里介绍了。</p>

<p><code>distribution</code>方向同样也包括4种约束，这4种约束也都是添加到<code>canvas</code>上的，除此之外它还包括一组通过<code>NSMapTable</code>维护的<code>FDGapLayoutGuide</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">FDStackViewDistributionLayoutArrangement</span> : <span class="nc">FDStackViewLayoutArrangement</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span><span class="o">&lt;</span><span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">canvasConnectionConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMapTable</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">edgeToEdgeConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMapTable</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">relatedDimensionConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMapTable</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">hiddingDimensionConstraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMapTable</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">,</span> <span class="n">FDGapLayoutGuide</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">spacingOrCenteringGuides</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>canvasConnectionConstraints</strong>：它管路的是<code>arrangedSubviews</code>与<code>canvas</code>之间的约束；</li>
<li><strong>edgeToEdgeConstraints</strong>：它管理的是<code>arrangedSubviews</code>之间一个接一个的约束，这里需要注意这些约束的常量是<code>StackView</code>的spacing，但是关系却不一定是相等。还有就是如果有个<code>arrangedSubview</code>被<code>hidden</code>了那么它仍然参与到<code>edgeToEdge</code>的约束创建及布局中，只不过是把它与后一个<code>arrangedSubview</code>之间的<code>edgeToEdgeConstraint</code>的常量由spacing设置为<code>0</code>。</li>
<li><strong>relatedDimensionConstraints</strong>：它管理的是<code>arrangedSubviews</code>之间<code>distribution</code>各种相等关系的约束，这里面的管理的约束是<code>StackView</code>的<code>distribution</code>布局的精髓所在。如果是<code>UIStackViewDistributionFill</code>模式的话，是没有<code>relatedDimensionConstraint</code>的。<code>UIStackViewDistributionFillEqually</code>与<code>UIStackViewDistributionFillProportionally</code>使用的是一种类型的约束，而<code>UIStackViewDistributionEqualCentering</code>与<code>UIStackViewDistributionEqualSpacing</code>使用的却是另一种类型的约束，后面在详细介绍。</li>
<li><strong>hiddingDimensionConstraints</strong>：它管理的是当<code>arrangedSubviews</code>有<code>hidden</code>的时候，该<code>arrangedSubview</code>的有关<code>dimensionAttribute</code>的约束；</li>
<li><strong>spacingOrCenteringGuides</strong>：这个管理的就不是约束了，它是一组<code>FDGapLayoutGuide</code>，只用在<code>UIStackViewDistributionEqualCentering</code>和<code>UIStackViewDistributionEqualSpacing</code>这两种模式中，<code>FDGapLayoutGuide</code>用来连接左右两个<code>arrangedSubView</code>，作为一个辅助view来约束左右两个view的位置关系。<code>spacingOrCenteringGuides</code>的key是<code>FDGapLayoutGuide</code>连接的左边的<code>arrangedSubview</code>。</li>
</ul>


<p>最后说明的就是<code>FDGapLayoutGuide</code>与<code>arrangedSubView</code>相连接的约束没有被<code>NSMapTable</code>所管理，它们就只是被加到了<code>canvas</code>上。因为当模式改变时，所有的<code>FDGapLayoutGuide</code>会被移除或者重建，所以跟它们相关的约束也会被一并清楚。</p>

<p>那么以上几种约束的创建顺序是怎样的呢？</p>

<ol>
<li>首先是<code>canvasConnectionConstraints</code>；</li>
<li>其次是每一种模式都会涉及到的<code>edgeToEdgeConstraints</code>；</li>
<li>然后再遍历所有<code>arrangedSubviews</code>，如果有<code>arrangedSubview</code>被<code>hidden</code>了，那么就会创建<code>hiddingDimensionConstraints</code>；</li>
<li>最后是<code>relatedDimensionConstraints</code>，这里如果是<code>UIStackViewDistributionEqualCentering</code>和<code>UIStackViewDistributionEqualSpacing</code>这两种模式的话，会先创建出<code>spacingOrCenteringGuides</code>。</li>
</ol>


<p>下面具体来看，首先<code>canvasConnectionConstraints</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetCanvasConnectionsEffect</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">canvasConnectionConstraints</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLayoutAttribute</span> <span class="n">minAttribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">minAttributeForCanvasConnections</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">firstObject</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">canvasConnectionConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">head</span><span class="p">];</span>
</span><span class='line'>    <span class="n">head</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-canvas-connection&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minAttribute</span> <span class="o">+</span> <span class="mi">1</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">lastObject</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minAttribute</span> <span class="o">+</span> <span class="mi">1</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">canvasConnectionConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>    <span class="n">end</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-canvas-connection&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span> <span class="o">=</span> <span class="n">canvasConnectionConstraints</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">canvasConnectionConstraints</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较简单，先判断一下不需要创建的情况，然后就是根据<code>axis</code>选用不同的<code>NSLayoutAttribute</code>，将第一个和最后一个<code>arrangedSubview</code>分别与<code>StackView</code>创建相等的约束。这样一来再加上<code>FDStackViewAlignmentLayoutArrangement</code>中创建的两个<code>canvasConnectionConstraints</code>，整个<code>canvas</code>的上下左右四个方向的约束就都有了，满足了<code>canvas</code>布局的基本条件。</p>

<p>接下来是<code>edgeToEdgeConstraints</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetFillEffect</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// spacing - edge to edge</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">edgeToEdgeConstraints</span><span class="p">.</span><span class="n">fd_allObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">edgeToEdgeConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span><span class="p">.</span><span class="n">fd_allObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">offset</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">car</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">last</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">lastObject</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">cdr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">attribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">minAttributeForGapConstraint</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLayoutRelation</span> <span class="n">relation</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">edgeToEdgeRelation</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">spacing</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">view</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">relation</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">offset</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="o">+</span> <span class="mi">1</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spacing</span><span class="p">];</span>
</span><span class='line'>        <span class="n">spacing</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-spacing&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">spacing</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">edgeToEdgeConstraints</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">spacing</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">offset</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">offset</span><span class="p">.</span><span class="n">hidden</span> <span class="o">||</span> <span class="p">(</span><span class="n">view</span> <span class="o">==</span> <span class="n">last</span> <span class="o">&amp;&amp;</span> <span class="n">view</span><span class="p">.</span><span class="n">hidden</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">spacing</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// hidding dimensions</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">hidden</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLayoutAttribute</span> <span class="n">dimensionAttribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">dimensionAttributeForCurrentAxis</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">dimensionConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">view</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">dimensionAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeNotAnAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">dimensionConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-hiding&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">dimensionConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">dimensionConstraint</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先移去旧的相关约束，然后将<code>arrangedSubviews</code>依次迭代遍历，根据<code>axis</code>选择正确的<code>NSLayoutAttribute</code>创建首尾相接的约束，常量为<code>StackView</code>的spacing，关系则根据<code>distribution</code>的不同而或等于或大于等于。</p>

<p>这里如前面介绍的一样，如果这个<code>arrangedSubview</code>是<code>hidden</code>的那么它仍然参与<code>edgeToEdgeConstraints</code>的创建，只不过它与后一个<code>arrangedSubview</code>的约束常量不再是spacing而是<code>0</code>。还有一个特殊的就是如果是最后一个<code>arrangedSubview</code>被<code>hidden</code>了，那么它与前一个<code>arrangedSubview</code>的约束的常量也同样是<code>0</code>。</p>

<p>最后再遍历所有<code>arrangedSubviews</code>，如果有<code>arrangedSubview</code>被<code>hidden</code>了，那就根据<code>axis</code>给这个<code>arrangedSubview</code>创建一个常量为<code>0</code>的<code>dimensionConstraint</code>。</p>

<p>如果是<code>UIStackViewDistributionFill</code>的话，那么到这里所有<code>distribution</code>的约束就已经创建完了，已经满足需求了。但是其他几种还要有后续的步骤。</p>

<hr />

<p>先来看<code>UIStackViewDistributionFillEqually</code>和<code>UIStackViewDistributionFillProportionally</code>这两种类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetEquallyEffect</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">relatedDimensionConstraints</span><span class="p">.</span><span class="n">fd_allObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">relatedDimensionConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">visiableViews</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">visiableItems</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">offset</span> <span class="o">=</span> <span class="n">visiableViews</span><span class="p">.</span><span class="n">car</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">order</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="k">in</span> <span class="n">visiableViews</span><span class="p">.</span><span class="n">cdr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">attribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">dimensionAttributeForCurrentAxis</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLayoutRelation</span> <span class="n">relation</span> <span class="o">=</span> <span class="n">NSLayoutRelationEqual</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">multiplier</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">distribution</span> <span class="o">==</span> <span class="n">UIStackViewDistributionFillEqually</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="p">({</span>
</span><span class='line'>            <span class="bp">CGSize</span> <span class="n">size1</span> <span class="o">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">intrinsicContentSize</span><span class="p">;</span>
</span><span class='line'>            <span class="bp">CGSize</span> <span class="n">size2</span> <span class="o">=</span> <span class="n">view</span><span class="p">.</span><span class="n">intrinsicContentSize</span><span class="p">;</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">multiplier</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">attribute</span> <span class="o">==</span> <span class="n">NSLayoutAttributeWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">multiplier</span> <span class="o">=</span> <span class="n">size1</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">size2</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">multiplier</span> <span class="o">=</span> <span class="n">size1</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">size2</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">multiplier</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">equally</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">offset</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">relation</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">view</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="n">multiplier</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">equally</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="n">UILayoutPriorityRequired</span> <span class="o">-</span> <span class="p">(</span><span class="o">++</span><span class="n">order</span><span class="p">);</span>
</span><span class='line'>        <span class="n">equally</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">distribution</span> <span class="o">==</span> <span class="n">UIStackViewDistributionFillEqually</span> <span class="o">?</span> <span class="s">@&quot;FDSV-fill-equally&quot;</span> <span class="o">:</span> <span class="s">@&quot;FDSV-fill-proportionally&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">equally</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">relatedDimensionConstraints</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">equally</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">offset</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>仍然是先干掉旧的约束，然后跟前面不同的是要取出所有的<strong>非hidden</strong>的<code>arrangedSubview</code>添加约束，而不是所有<code>arrangedSubview</code>。</p>

<p>这两个<code>distribution</code>类型是将当前<code>axis</code>所对应的<code>dimensionAttribute</code>的约束作用在<code>arrangedSubviews</code>上，如果是<code>UIStackViewDistributionFillEqually</code>，那么约束的比例(<code>multiplier</code>)就是<code>1</code>，如果是<code>UIStackViewDistributionFillProportionally</code>，那<code>multiplier</code>就需要通过计算得出，是通过两个<code>arrangedSubview</code>的<code>intrinsicContentSize</code>做比值，这样就能保证<code>arrangedSubview</code>最终会按照<code>intrinsicContentSize</code>的比例来分配<code>StackView</code>的空间布局。</p>

<p>再来看<code>UIStackViewDistributionEqualCentering</code>和<code>UIStackViewDistributionEqualSpacing</code>这两种类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetSpacingOrCenteringGuides</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spacingOrCenteringGuides</span><span class="p">.</span><span class="n">fd_allObjects</span> <span class="nl">makeObjectsPerformSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">removeFromSuperview</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spacingOrCenteringGuides</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">visiableItems</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">visiableItems</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">visiableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">visiableItems</span> <span class="nl">subarrayWithRange</span><span class="p">:(</span><span class="n">NSRange</span><span class="p">){</span><span class="mi">0</span><span class="p">,</span> <span class="n">visiableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">}]</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">item</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">FDGapLayoutGuide</span> <span class="o">*</span><span class="n">guide</span> <span class="o">=</span> <span class="p">[</span><span class="n">FDGapLayoutGuide</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">guide</span><span class="p">];</span>
</span><span class='line'>        <span class="n">guide</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">UIView</span> <span class="o">*</span><span class="n">relatedToItem</span> <span class="o">=</span> <span class="n">visiableItems</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">minGapAttribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">minAttributeForGapConstraint</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">minContentAttribute</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">maxContentAttribute</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">distribution</span> <span class="o">==</span> <span class="n">UIStackViewDistributionEqualCentering</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">minContentAttribute</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeCenterX</span> <span class="p">:</span> <span class="n">NSLayoutAttributeCenterY</span><span class="p">;</span>
</span><span class='line'>            <span class="n">maxContentAttribute</span> <span class="o">=</span> <span class="n">minContentAttribute</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">minContentAttribute</span> <span class="o">=</span> <span class="n">minGapAttribute</span><span class="p">;</span>
</span><span class='line'>            <span class="n">maxContentAttribute</span> <span class="o">=</span> <span class="n">minGapAttribute</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">beginGap</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">guide</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minGapAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">maxContentAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">beginGap</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-distributing-edge&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">endGap</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">relatedToItem</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minContentAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">guide</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">minGapAttribute</span> <span class="o">+</span> <span class="mi">1</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">endGap</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-distributing-edge&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">beginGap</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">endGap</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spacingOrCenteringGuides</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">guide</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetSpacingOrCenteringGuideRelatedDimensionConstraints</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">relatedDimensionConstraints</span><span class="p">.</span><span class="n">fd_allObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">visiableItems</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">visiableItems</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">visiableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FDGapLayoutGuide</span> <span class="o">*</span><span class="n">firstGapGuide</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spacingOrCenteringGuides</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">visiableItems</span><span class="p">.</span><span class="n">car</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spacingOrCenteringGuides</span><span class="p">.</span><span class="n">fd_allObjects</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">firstGapGuide</span> <span class="o">==</span> <span class="n">obj</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">dimensionAttribute</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">dimensionAttributeForCurrentAxis</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">related</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">firstGapGuide</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">dimensionAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">obj</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">dimensionAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">related</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-fill-equally&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">relatedDimensionConstraints</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">related</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">related</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先创建<code>spacingOrCenteringGuides</code>，开始是干掉旧的<code>spacingOrCenteringGuides</code>。这里使用的仍然是<strong>visiableItems</strong>。
<code>FDGapLayoutGuide</code>用来连接左右相连的两个可见<code>arrangedSubview</code>。</p>

<p>这两个<code>distribution</code>不同的地方就是<code>UIStackViewDistributionEqualSpacing</code>的<code>FDGapLayoutGuide</code>连接的是<code>arrangedSubview</code>的<code>minAttribute</code>和<code>maxAttribute</code>，而<code>UIStackViewDistributionEqualCentering</code>的<code>FDGapLayoutGuide</code>连接的却是<code>arrangedSubview</code>的<code>centerAttribute</code>。</p>

<p>接下来就是创建<code>relatedDimensionConstraints</code>，就是根据<code>axis</code>不同给对应的<code>dimensionAttribute</code>创建相等的约束即可，这些约束是作用在<code>FDGapLayoutGuide</code>上的，而与前面那两种<code>distribution</code>类型不同。这就是一开始说的<code>relatedDimensionConstraints</code>中的两种类型的约束。</p>

<p>到此整个<code>distribution</code>方向的约束也都创建完了。加上<code>alignment</code>方向创建的约束，<code>StackView</code>已经可以使用了。</p>

<hr />

<p>介绍完这些再回过头来看<a href="http://blog.wtlucky.com/blog/2015/10/09/fdstackview-downward-compatible-uistackview-part-1/">本文章<code>Part 1</code></a>中后面提到的<code>UIStackView</code>的第一个bug，当存在spacing的时候<code>UIStackViewDistributionFillProportionally</code>这个类型的<code>StackView</code>是烂掉的。我刚才看了一下，苹果仍然没有修复这个bug。</p>

<p>具体的原因那篇文章中已经解释了，现在说下为什么<code>FDStackView</code>没有这个问题，相信看完前面创建约束的过程，读者朋友应该就能发现我们并没有像<code>UIStackView</code>那样将<code>canvas</code>的<code>dimensionAttribute</code>乘以一个系数作为<code>arrangedSubview</code>的<code>dimensionConstraint</code>。我们的<code>arrangedSubview</code>的<code>dimensionConstraint</code>是与<code>canvas</code>无关的，是<code>arrangedSubviews</code>之间的比例关系，而且spacing在之前的<code>edgeToEdgeConstraints</code>中就已经创建了，这两者是分开创建的，所以算法不同，自然也就不会出现这个bug。</p>

<hr />

<p>下面看其余的知识点：</p>

<h3>子视图的隐藏显示如何处理</h3>

<p>如果一个已经布好局的<code>StackView</code>，在一个<code>arrangedSubview</code>被<code>hidden</code>或者<code>show</code>之后，那么其余的<code>arrangedSubviews</code>也要做出相应变化，来相应这种变化。</p>

<p>在<code>FDStackView</code>这里我们是通过<code>KVO</code>监测每一个<code>arrangedSubview</code>的<code>hidden</code>属性，当任何一个<code>arrangedSubview</code>属性发生变化后，我们就通过<code>rebuild</code>的方式重新创建整个<code>StackView</code>的约束，就是重新布局一遍。这是目前<code>1.0</code>版本的处理方式，这样势必会带来性能的损失，这也是我们后续优化性能的关键。</p>

<h3>子视图的<code>intrinsicContentSize</code>发生变化时如何处理</h3>

<p>什么叫子视图的<code>intrinsicContentSize</code>发生变化呢？举个例子，一个已经布好局的<code>StackView</code>，其中有一个<code>arrangedSubview</code>是一个<code>UILabel</code>，但是这个<code>UILabel</code>被重新<code>setText</code>了，那么它的<code>intrinsicContentSize</code>就会发生变化，自然<code>StackView</code>的布局如果不发生变化的话就是错误的。所以在这种情况下<code>StackView</code>也要做出处理。</p>

<p>这里我们研究了<code>UIStackView</code>的实现方式，一个<code>arrangedSubview</code>的<code>intrinsicContentSize</code>发生变化如何被捕捉到，是我们未知的，<code>UIKit</code>并没有暴露任何方法给我们，我们只能通过下符号断点的方式给dump出来的<code>UIStackView</code>的私有类。</p>

<p>研究发现当一个<code>arrangedSubview</code>的<code>intrinsicContentSize</code>发生变化时，<code>UIStackView</code>总会调用到<code>_intrinsicContentSizeInvalidatedForChildView:</code>这个私有方法，参数为发生变化的<code>arrangedSubview</code>。所以我们就把这一私有方法给替换了，借助<code>UIKit</code>内部的机制来帮我们通知一个<code>arrangedSubview</code>的<code>intrinsicContentSize</code>发生变化的这种情况。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Use non-public API in UIView directly is dangerous, so we inject at runtime.</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="s">@&quot;_intrinsicContentSizeInvalidatedForChildView:&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">intrinsicContentSizeInvalidatedForChildView</span><span class="p">:));</span>
</span><span class='line'>        <span class="n">class_addMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">method</span><span class="p">),</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">method</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接到这种通知之后，我们目前也是通过<code>rebuild</code>的方式来重建<code>StackView</code>的约束的。其实对于这种情况以及上面提到的<code>hidden</code>的情况，我们都能得到具体发生变化的那个<code>arrangedSubview</code>，这也将会是后续优化的突破口。</p>

<hr />

<p>到此整个<code>FDStackView</code>的设计实现过程都介绍完了，当然还有一些零零碎碎的点没有说，都在源码里了。后续版本会增加<code>Layout Margins</code>的支持，以及性能优化。</p>

<p>最后在附一张<code>UIStackView</code>及<code>FDStackView</code>在不同<code>iOS</code>系统上加载运行图：</p>

<p><img src="https://oac67o3cg.qnssl.com/1475116763.png" alt="" /></p>

<p>全文完，转载请注明出处，谢谢阅读。</p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FDStackView —— Downward Compatible UIStackView (Part 2)]]></title>
    <link href="http://blog.wtlucky.com/blog/2016/01/19/fdstackview-downward-compatible-uistackview-part-2/"/>
    <updated>2016-01-19T14:44:53+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2016/01/19/fdstackview-downward-compatible-uistackview-part-2</id>
    <content type="html"><![CDATA[<p>写完了<code>Part 1</code>就被接踵而至的新项目和新版本忙的不可开交，转眼间一个季度就已经过去了，而这篇<code>Part 2</code>却迟迟还没有出现。实在是抱歉没有及时更新。不过有一个好消息就是<code>FDStackView</code>已经被使用在我们自己的项目中，并且我们的项目也已经经过了两个版本的迭代，<code>FDStackView</code>可以说还是相当稳定的，并且可以顺利的通过苹果的审核机制，对这方面有顾虑的小伙伴们可以放心大胆的使用了。同时我们也将它的版本号从<code>1.0-alpha</code>升级到<code>1.0</code>。在此感谢一下各位热心的小伙伴们在<code>Github</code>上提出的<code>issue</code>,以及着重感谢下<a href="http://weibo.com/ljc1986?is_all=1">@里脊串</a>对<code>FDStackView</code>的重度使用及提出的各种隐晦的<code>bug</code>。后续我们将会对性能的优化做出改进，以及对<code>Layout Margins</code>的支持。</p>

<p>回到主题，这篇文章主要介绍<code>StackView</code>的实现，即如何通过现有<code>AutoLayout</code>技术实现<code>StackView</code>这样的一个控件。这里说明一下，当初我们编写<code>FDStackView</code>的时候，<code>UIStackView</code>还没有支持<code>Layout Margins</code>，所以我们也没有添加<code>Layout Margins</code>的支持，不过目前的<code>iOS SDK</code>已经增加了这一部分的支持，所以在打开<code>layoutMarginsRelativeArrangement</code>属性的情况下，<code>StackView</code>创建出的约束会与我后面所介绍的内容有一些出入，不过问题不大，仅仅是部分约束的<code>firstItem</code>由<code>StackView</code>本身变成<code>UILayoutGuide</code>的区别。</p>

<p> 实现<code>StackView</code>主要包括这几个技术点：</p>

<ul>
<li><strong><code>alignment</code>和<code>distribution</code>的约束如何添加和管理；</strong></li>
<li><strong><code>spacing</code>和<code>distribution</code>的关系及约束的创建；</strong></li>
<li><strong>子视图的隐藏显示如何处理；</strong></li>
<li><strong>子视图的<code>intrinsicContentSize</code>发生变化时如何处理。</strong></li>
</ul>


<!-- More -->


<blockquote><p>我们对<code>UIStackView</code>进行了详细的研究，包括<code>dump</code>出所有<code>UIStackView</code>的相关私有类，各个类的方法，实例变量等。还需要添加符号断点来跟踪各个方法的调用顺序及各个实例变量的值得变化情况。同时还需要分析各个状态下<code>UIStackView</code>的约束<code>constraints</code>的情况，包括约束的个数，连接的方式，及约束所添加到的视图等。经过以上的各种分析之后，我们又通过在<code>IB</code>中借助<code>UIView</code>手动连接约束的方式，连出每一个<code>UIStackView</code>所对应的状态。经过这一番调查与研究我们已经大概摸清的<code>UIStackView</code>的工作原理与实现方式。</p></blockquote>

<p>如上篇文章所说，在进行了详尽的研究之后，总结出大概需要攻克的是这几个技术点，以尽可能的与<code>UIStackView</code>的实现保持一致，在难以完成的地方通过自己的方式实现。在这之前先介绍一下我们使用到的几个私有类。</p>

<h5><code>CATransformLayer</code></h5>

<p><code>StackView</code>是一个透明不可见的容器，主要就是因为这个<code>layer</code>，我们继承了它并重载了两个方法，<code>setOpaque:</code>和<code>setOpaque:</code>，用于避免产生警告⚠️。也就是项目中的<code>FDTransformLayer</code>。</p>

<h5><code>_UILayoutSpacer</code></h5>

<p>这是一个私有类，它的主要作用是用了辅助<code>StackView</code>创建<code>alignment</code>方向上的约束，它的父类是<code>UILayoutGuide</code>，并不是一个UIView的子类，所以我们并不能以熟悉的方式对它添加约束。但是在知道了它的作用之后，我们完全可以使用一个<code>UIView</code>来代替它，同时它也是不可见的，所以它的<code>layer</code>自然也是<code>FDTransformLayer</code>。这是项目中的<code>FDLayoutSpacer</code>。</p>

<h5><code>_UIOLAGapGuide</code></h5>

<p>与<code>_UILayoutSpacer</code>相同是<code>UILayoutGuide</code>的子类，用来辅助<code>distribution</code>方向上的约束创建，并且只有<code>UIStackViewDistributionEqualSpacing</code>和<code>UIStackViewDistributionEqualCentering</code>两种模式下它才会出现。在项目中我们通过<code>UIView</code>的子类<code>FDGapLayoutGuide</code>来实现它。</p>

<h5><code>_UILayoutArrangement</code></h5>

<p>同样是一个私有类，用来管理<code>StackView</code>及其子视图的约束的创建。它是一个父类，在<code>FDStackView</code>中我们使用<code>FDStackViewLayoutArrangement</code>来与之对应。</p>

<h5><code>_UIAlignedLayoutArrangement</code></h5>

<p>该类是<code>_UILayoutArrangement</code>的子类，用来控制<code>alignment</code>方向上的约束的创建及管理，它维护了一个<code>_UILayoutSpacer</code>并负责它的生命周期。在<code>FDStackView</code>中我们以更直接的<code>FDStackViewAlignmentLayoutArrangement</code>来对它命名。</p>

<h5><code>_UIOrderedLayoutArrangement</code></h5>

<p>与<code>_UIAlignedLayoutArrangement</code>相对，用来控制<code>distribution</code>方向上的约束创建及管理，它维护了一组<code>_UIOLAGapGuide</code>。在<code>FDStackView</code>中我们以更直接的<code>FDStackViewDistributionLayoutArrangement</code>来对它命名。</p>

<p>先提前解释几个后面会提到的名词：</p>

<ul>
<li><code>canvas</code> ：<code>canvas</code>是什么？翻译过来是画布的意思，其实就是容器也就是<code>StackView</code>本身</li>
<li><code>Ambiguity Suppression</code> ：经常<code>Debug``AutoLayout</code>的同学可能对这个词并木陌生，一般约束产生冲突或者模棱两可的时候，控制台就会输出一组信息，其中就会包含这个词。这里就是抵制模棱两可的约束的意思。<code>StackView</code>中会创建一些低优先级的约束来完成这件事儿，以防止控制台打出<code>AutoLayout</code>异常的<code>log</code>。</li>
<li><code>minAttribute</code> ：是<code>NSLayoutAttribute</code>一个便捷获取方式，针对不同的<code>axis</code>会对应不同的<code>NSLayoutAttribute</code>，可能是<code>NSLayoutAttributeTop</code>也可能是<code>NSLayoutAttributeLeading</code>。</li>
<li><code>centerAttribute</code> :同样针对不同的<code>axis</code>可能是<code>NSLayoutAttributeCenterY</code>或者<code>NSLayoutAttributeCenterX</code>。</li>
<li><code>maxAttribute</code> :同样针对不同的<code>axis</code>可能是<code>NSLayoutAttributeBottom</code>或者<code>NSLayoutAttributeTrailing</code>。</li>
<li><code>dimensionAttribute</code> :同样针对不同的<code>axis</code>可能是<code>NSLayoutAttributeHeight</code>或者<code>NSLayoutAttributeWidth</code>。</li>
</ul>


<figure class='code'><figcaption><span>FDStackViewAlignmentLayoutArrangement </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">minAttributeForCanvasConnections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeTop</span> <span class="p">:</span> <span class="n">NSLayoutAttributeLeading</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">centerAttributeForCanvasConnections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeCenterY</span> <span class="p">:</span> <span class="n">NSLayoutAttributeCenterX</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">maxAttributeForCanvasConnections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeBottom</span> <span class="p">:</span> <span class="n">NSLayoutAttributeTrailing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">dimensionAttributeForCurrentAxis</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeHeight</span> <span class="p">:</span> <span class="n">NSLayoutAttributeWidth</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>FDStackViewAlignmentLayoutArrangement </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">minAttributeForCanvasConnections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeLeading</span> <span class="p">:</span> <span class="n">NSLayoutAttributeTop</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">centerAttributeForCanvasConnections</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeCenterY</span> <span class="p">:</span> <span class="n">NSLayoutAttributeCenterX</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">dimensionAttributeForCurrentAxis</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeWidth</span> <span class="p">:</span> <span class="n">NSLayoutAttributeHeight</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSLayoutAttribute</span><span class="p">)</span><span class="nf">minAttributeForGapConstraint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeLeading</span> <span class="p">:</span> <span class="n">NSLayoutAttributeTop</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外<code>UIStackView</code>的约束的管理方式也十分的奇妙。除了一个例外的<code>Ambiguity Suppression</code>的约束，其余不管约束何种关系的约束都是add在<code>canvas</code>上的。既然约束都加在了<code>canvas</code>上，那这么多的约束如何区分何管理呢？</p>

<p>这里有个小技巧，那就是用<code>weakToWeak</code>的<code>NSMapTable</code>来管理，<code>key</code>是约束的<code>firstItem</code>,<code>value</code>是约束，而且因为<code>NSMapTable</code>是<code>weakToWeak</code>的，所以<code>key</code>和<code>value</code>所对应的<code>object</code>并不会增加引用计数，不会带来内存上的管理困难。若要找一个<code>view</code>所关联约束，直接取<code>view</code>作为<code>key</code>的<code>value</code>就可以了。<code>_UILayoutArrangement</code>维护了多个这样的<code>NSMapTable</code>，分别来管理不同作用的约束。不得不说这样的设计真的是太巧妙了。</p>

<hr />

<h3><code>alignment</code>和<code>distribution</code>的约束如何添加和管理</h3>

<p>先给一张图看一下什么是<code>alignment</code>和<code>distribution</code>以及<code>Spacing</code>:</p>

<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/uistack_hero_2x_04e50947-5aa0-4403-825b-26ba4c1662bd.png" alt="image" /></p>

<p>在介绍实现之前，我先介绍一下<code>StackView</code>的各种<code>alignment</code>模式都是什么效果的：</p>

<ul>
<li><strong>UIStackViewAlignmentFill</strong>：这种就是填充满整个<code>StackView</code>了，用得比较多。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_fill_2x_8d71867d-e6cf-4063-b337-17dbc815c16e.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentLeading</strong>：这种是左对齐。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_leading_2x_bd31ee78-682d-4e36-990e-d655505fdc95.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentTop</strong>：这种是上部对齐。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_top_2x_bfa21a2d-1678-4b11-aa80-0750a4534bfc.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentFirstBaseline</strong>：这种是让<code>arrangedSubviews</code>按照<code>firstBaseline</code>对齐。只能出现在水平的<code>StackView</code>中。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_firstbaseline_2x_8b939a0f-5296-45d2-836c-aa05b4432e12.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentCenter</strong>：这种是居中对齐。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_center_2x_a34c8513-6f32-4cac-8149-4e4c1d206a3a.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentTrailing</strong>：这种是右部对齐。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_leading_2_2x_61cdf9c4-2a5b-4a3e-9c13-b0f1fa6bf348.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentBottom</strong>：这种是底部对齐。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_bottom_2x_2dc738dd-2d3a-4f7b-baee-aa283fe41e9f.png" alt="image" /></p>

<ul>
<li><strong>UIStackViewAlignmentLastBaseline</strong>：这种是让<code>arrangedSubviews</code>按照<code>lastBaseline</code>对齐。同样只能出现在水平的<code>StackView</code>中。</li>
</ul>


<p><img src="https://docs-assets.developer.apple.com/published/82128953f6/align_lastbaseline_2x_82af7014-4e27-450d-9115-b058217de073.png" alt="image" /></p>

<p>下面介绍实现，首先是<code>alignment</code>方向，<code>alignment</code>方向的约束主要包括4种</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">FDStackViewAlignmentLayoutArrangement</span> : <span class="nc">FDStackViewLayoutArrangement</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span><span class="o">&lt;</span><span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">canvasConnectionConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMapTable</span><span class="o">&lt;</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">hiddingDimensionConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableDictionary</span><span class="o">&lt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSMapTable</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">alignmentConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FDLayoutSpacer</span> : <span class="bp">UIView</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSMutableArray</span><span class="o">&lt;</span><span class="bp">NSLayoutConstraint</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">systemConstraints</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>canvasConnectionConstraints</strong>：它管理的是<code>arrangedSubviews</code>与<code>canvas</code>之间的约束；</li>
<li><strong>hiddingDimensionConstraints</strong>：它管理的是当<code>arrangedSubviews</code>有<code>hidden</code>的时候，该<code>arrangedSubview</code>的有关<code>dimensionAttribute</code>的约束；</li>
<li><strong>systemConstraints</strong>：它是由<code>_UILayoutSpacer</code>来管理的，它管理了spacer与<code>arrangedSubviews</code>之间的约束，因为这些约束的<code>firstItem</code>都是spacer自身，所以就不需要使用<code>NSMapTable</code>而直接是<code>NSArray</code>。另外spacer只有在<code>alignment</code>不是<code>UIStackViewAlignmentFill</code>的时候才会被创建，所以当<code>alignment</code>是<code>UIStackViewAlignmentFill</code>时，是没有<code>systemConstraints的</code>；</li>
<li><strong>alignmentConstraints</strong>：它管理的是<code>arrangedSubviews</code>之间的约束，它包括两组<code>NSMapTable</code>，根据<code>alignment</code>的不同具体的约束也不同，具体的<code>NSMapTable</code>的<code>key</code>与<code>alignment</code>及<code>axis</code>的关系如下表：</li>
</ul>


<p><img src="https://oac67o3cg.qnssl.com/1475116676.png" alt="" /></p>

<p>可以看到除了<code>UIStackViewAlignmentFill</code>模式以外，都会有一个<code>Ambiguity Suppression</code>的key，这个key对应的<code>NSMapTable</code>的就管理了前面提到的那些低优先级防止布局时出现模棱两可状态的约束。此外<code>Baseline</code>相关的约束是只有在<code>axis</code>为<code>Horizontal</code>时才会有的，并且<code>UIStackViewAlignmentFirstBaseline</code>和<code>UIStackViewAlignmentTop</code>，<code>UIStackViewAlignmentLastBaseline</code>和<code>UIStackViewAlignmentBottom</code>的key值是相同的。</p>

<p>这个key的名字之所以这么取也是有讲究的，它代表着它所对应的<code>NSMapTable</code>管理的约束关系。举个例子：<code>axis</code>为<code>Horizontal</code>，<code>alignment</code>为<code>UIStackViewAlignmentFill</code>时，key为<code>Top</code>和<code>Bottom</code>，那么<code>Top</code>对应的<code>NSMapTable</code>管理的约束就是<code>arrangedSubviews</code>之间<code>NSLayoutAttributeTop</code>相等的约束。同理<code>Bottom</code>就是<code>NSLayoutAttributeBottom</code>相等的约束。</p>

<p>这样结合<code>alignment</code>的效果来看就很容易理解，<code>UIStackViewAlignmentFill</code>模式需要<code>arrangedSubviews</code>都充满容器，那么自然他们的<code>NSLayoutAttributeTop</code>和<code>NSLayoutAttributeBottom</code>需要都相等，而<code>UIStackViewAlignmentTop</code>模式需要<code>top</code>对齐那么只需要<code>NSLayoutAttributeTop</code>相等就OK了。</p>

<p>这里还有一个点就是<code>arrangedSubviews</code>之间的约束不是迭代添加的，而是都与第一个<code>arrangedSubview</code>创建关系。假设有3个<code>view</code>，那就是<code>view2</code>与<code>view1</code>建立约束，<code>view3</code>同样与<code>view1</code>建立约束而不是与<code>view2</code>迭代建立约束。</p>

<p>这4种约束的创建顺序是：</p>

<ol>
<li><code>FDLayoutSpacer的systemConstraints</code></li>
<li><code>canvasConnectionConstraints</code></li>
<li><code>alignmentConstraints</code></li>
<li><code>hiddingDimensionConstraints</code></li>
</ol>


<p><code>FDLayoutSpacer的systemConstraints</code>在<code>FDStackViewAlignmentLayoutArrangement</code>中被称为<code>spanningLayoutGuideConstraints</code>，创建方法是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateSpanningLayoutGuideConstraintsIfNecessary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">spanningGuideConstraintsNeedUpdate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">systemConstraints</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">systemConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//FDSV-spanning-fit</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">isHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeWidth</span> <span class="p">:</span> <span class="n">NSLayoutAttributeHeight</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeNotAnAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">constraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="mi">51</span><span class="p">;</span>
</span><span class='line'>        <span class="n">constraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-spanning-fit&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">systemConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">constraint</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//FDSV-spanning-boundary</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">item</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">minConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">minAttributeForCanvasConnections</span> <span class="nl">relatedBy</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">layoutRelationForItemConnectionForAttribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">minAttributeForCanvasConnections</span><span class="p">]</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">minAttributeForCanvasConnections</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">minConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-spanning-boundary&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">minConstraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="mf">999.5</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">minConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">systemConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">minConstraint</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">maxConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">maxAttributeForCanvasConnections</span> <span class="nl">relatedBy</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">layoutRelationForItemConnectionForAttribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">maxAttributeForCanvasConnections</span><span class="p">]</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">maxAttributeForCanvasConnections</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">maxConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-spanning-boundary&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">maxConstraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="mf">999.5</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">maxConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">spanningLayoutGuide</span><span class="p">.</span><span class="n">systemConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">maxConstraint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先判断一些不需要创建或者不需要更新这组约束的情况，比如之前提到的<code>alignment</code>为<code>UIStackViewAlignmentFill</code>或者没有<code>arrangedSubview</code>的时候。接下来创建一个宽或高为<code>0</code>的约束给spacer，因为对于后面添加的约束而言，spacer是缺少这样的一个约束以保证它能够正确布局。最后就是把每一个<code>arrangedSubview</code>与spacer分别建立<code>minAttribute</code>和<code>maxAttribute</code>的约束，这些约束的<code>constant</code>都是<code>0</code>，但是关系却不一定都是等于，需要根据<code>alignment</code>的属性不同来动态调整，有可能是大于等于，也有可能是小于等于。这需要查表来得到。</p>

<p>下一步创建<code>canvasConnectionConstraints</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateCanvasConnectionConstraintsIfNecessary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">NSNumber</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">canvasAttributes</span> <span class="o">=</span> <span class="l">@[@(</span><span class="nb">self</span><span class="p">.</span><span class="n">minAttributeForCanvasConnections</span><span class="l">)</span><span class="p">,</span> <span class="l">@(</span><span class="nb">self</span><span class="p">.</span><span class="n">maxAttributeForCanvasConnections</span><span class="l">)]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">alignment</span> <span class="o">==</span> <span class="n">UIStackViewAlignmentCenter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">canvasAttributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">canvasAttributes</span> <span class="nl">arrayByAddingObject</span><span class="p">:</span><span class="l">@(</span><span class="nb">self</span><span class="p">.</span><span class="n">centerAttributeForCanvasConnections</span><span class="l">)</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">isBaselineAlignment</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">canvasFitConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeHeight</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeNotAnAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">canvasFitConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-canvas-fit&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">canvasFitConstraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="mi">49</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">canvasFitConstraint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">canvasFitConstraint</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">canvasAttributes</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">canvasAttribute</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLayoutAttribute</span> <span class="n">attribute</span> <span class="o">=</span> <span class="n">canvasAttribute</span><span class="p">.</span><span class="n">integerValue</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">viewOrGuideForLocationAttribute</span><span class="p">:</span><span class="n">attribute</span><span class="p">]</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="nl">relatedBy</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">layoutRelationForCanvasConnectionForAttribute</span><span class="p">:</span><span class="n">attribute</span><span class="p">]</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">attribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">constraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-canvas-connection&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvasConnectionConstraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">constraint</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这是<code>alignment</code>的<code>canvasConnectionConstraints</code>，所以只需关注它自己的<code>minAttribute</code>和<code>maxAttribute</code>两个方向与<code>canvas</code>的约束即可，其余两个方向会在<code>distributionLayoutArrangement</code>中创建。</p>

<p>特别的是如果<code>alignment</code>是<code>UIStackViewAlignmentCenter</code>的话需要加上一个<code>centerAttribute</code>的约束。如果是<code>alignment</code>是<code>baseline</code>相关的话还要给<code>canvas</code>添加一个高为<code>0</code>的低优先级约束，用来满足某些特殊情况下<code>canvas</code>约束不满足的情况。</p>

<p>具体与<code>canvas</code>建立约束关系的<code>firstItem</code>及<code>relation</code>关系是根据<code>alignment</code>类型以及<code>NSLayoutAttribute</code>的不同而不同的，情况比较多我就不一一列举了，同样是根据查表得到，具体可以看代码去查。</p>

<p>最后是<code>alignmentConstraints</code>和<code>hiddingDimensionConstraints</code>，虽然前面说它们两个的顺序是一前一后创建，但其实并不是，它们可以说是一起创建的，首先取出第一个<code>arrangedSubview</code>作为<code>guardView</code>，然后循环遍历其余<code>arrangedSubview</code>，先添加<code>alignmentConstraint</code>，如果这个<code>arrangedSubview</code>是<code>hidden</code>的那么就会再添加一个<code>hiddingDimensionConstraint</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateAlignmentItemsConstraintsIfNecessary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraints</span> <span class="nl">setObject</span><span class="p">:[</span><span class="bp">NSMapTable</span> <span class="n">weakToWeakObjectsMapTable</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraints</span> <span class="nl">setObject</span><span class="p">:[</span><span class="bp">NSMapTable</span> <span class="n">weakToWeakObjectsMapTable</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsSecondKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">removeConstraints</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span><span class="p">.</span><span class="n">fd_allObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">guardView</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">mutableItems</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">item</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">alignment</span> <span class="o">!=</span> <span class="n">UIStackViewAlignmentFill</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">ambiguitySuppressionConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeNotAnAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">ambiguitySuppressionConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-ambiguity-suppression&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ambiguitySuppressionConstraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">item</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">ambiguitySuppressionConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraints</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstKey</span><span class="p">]</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">ambiguitySuppressionConstraint</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">item</span> <span class="o">!=</span> <span class="n">guardView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">firstConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">guardView</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>                <span class="n">firstConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-alignment&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">firstConstraint</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraints</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsFirstKey</span><span class="p">]</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">firstConstraint</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">item</span> <span class="o">!=</span> <span class="n">guardView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">secondConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">guardView</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsSecondAttribute</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsSecondAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">secondConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-alignment&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">secondConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraints</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">alignmentConstraintsSecondKey</span><span class="p">]</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">secondConstraint</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">hidden</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">hiddenConstraint</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">attribute</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">NSLayoutAttributeHeight</span> <span class="p">:</span> <span class="n">NSLayoutAttributeWidth</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeNotAnAttribute</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mi">1</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">hiddenConstraint</span><span class="p">.</span><span class="n">priority</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="nl">contentCompressionResistancePriorityForAxis</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">==</span> <span class="n">UILayoutConstraintAxisHorizontal</span> <span class="o">?</span> <span class="nl">UILayoutConstraintAxisVertical</span> <span class="p">:</span> <span class="n">UILayoutConstraintAxisHorizontal</span><span class="p">];</span>
</span><span class='line'>            <span class="n">hiddenConstraint</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;FDSV-hiding&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">canvas</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">hiddenConstraint</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">hiddingDimensionConstraints</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">hiddenConstraint</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>alignmentConstraint</code>的创建都是<code>guardView</code>与其余的<code>arrangedSubview</code>创建<code>relation</code>关系为<strong>相等</strong>的约束，而<code>NSLayoutAttribute</code>的选择仍然是查表法，根据<code>axis</code>和<code>alignment</code>的不同而选择不同的<code>NSLayoutAttribute</code>。</p>

<p>如果<code>alignment</code>不是<code>UIStackViewAlignmentFill</code>模式的话，就会给<code>arrangedSubview</code>创建一个<code>dimensionAttribute</code>为<code>0</code>的低优先级约束，称为<code>ambiguitySuppressionConstraint</code>放在上图中<code>key</code>为<code>Ambiguity Suppression</code>的<code>NSMapTable</code>中。</p>

<hr />

<p>现在解释一下<a href="http://blog.wtlucky.com/blog/2015/10/09/fdstackview-downward-compatible-uistackview-part-1/">本文章<code>Part 1</code></a>中最后提到的<code>UIStackView</code>当<code>alignment</code>为<code>UIStackViewAlignmentFill</code>时，最高视图隐藏掉，而其余视图没有变成第二个的视图的高度的<code>bug</code>。原因就是在<code>UIStackView</code>的中实现中<code>AlignmentLayoutArrangement</code>是没有管理<code>hiddingDimensionConstraints</code>的，所以当视图被隐藏了后，那个视图被添加了一个宽为<code>0</code>的约束，视觉上看不到了，但是高方向的约束仍然存在，所以仍然会撑开<code>StackView</code>，所以在<code>FDStackView</code>中我们在<code>alignment</code>方向上同时增加了<code>hiddingDimensionConstraints</code>，视图被<code>hidden</code>后，会在高度方向上也给他加上一个高<code>0</code>为的约束，而且这个优先级也很有讲究需要跟它的<code>contentCompressionResistancePriority</code>设为一样，这样才不会在<code>AutoLayout</code>布局系统中当用户人为添加一个高度约束后产生冲突。</p>

<p>写了这么多，才写完第一个技术点的第一部分，内容确实比较多，我写的也比较乱，时间比较紧所以写作时间是间断的，所以思维也是间断跳跃的，还麻烦各位看官多多包涵。本来打算一篇写完的，但是这么长，还是有必要在分一下的，<code>Part 2</code>就到这吧，其余的内容就在<code>Part 3</code>吧。</p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FDStackView —— Downward Compatible UIStackView (Part 1)]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/10/09/fdstackview-downward-compatible-uistackview-part-1/"/>
    <updated>2015-10-09T21:32:12+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/10/09/fdstackview-downward-compatible-uistackview-part-1</id>
    <content type="html"><![CDATA[<p>加入百度知道团队也有一段时间了，能跟<a href="http://weibo.com/u/1364395395">@我就叫Sunny怎么了</a>、<a href="http://weibo.com/u/5665046845">@sinojerk</a>等小伙伴一起工作生活是一种极赞的体验。在完成日常业务开发之余，我们也会进行一些技术研究项目，并将研究结果以开源的方式公布出来，自然我也成为了<code>forkingdog</code>开源小组的一员。</p>

<p>近期我们的研究项目是<code>FDStackView</code>，现如今已经完成了<code>Alpha</code>版本的开发工作，并将其开源在了<code>Github</code>上，<a href="https://github.com/forkingdog/FDStackView">项目地址</a>。虽然现在已经完成所有的基本功能，但是仍需要在真实的环境中测试试用，欢迎大家将试用之后的问题反馈给我们，提<code>issue</code>给我们，使我们更好的修复和完善<code>FDStackView</code>，以便于更好的方便开发者们使用。</p>

<!-- More -->


<h2>Introduce</h2>

<p><code>FDStackView</code>究竟是什么呢？在介绍<code>FDStackView</code>之前，首先你需要知道<code>UIStackView</code>是什么？<code>UIStackView</code>是苹果在WWDC上发布<code>iOS9</code>的时候新推出的一个<code>UIKit</code>的视图，现在网上可以搜索到很多关于它的资料，关于介绍，如何使用等。简单来说就是可以使用它来做一些流式布局，开发者只需要将需要的视图丢到<code>UIStackView</code>中，然后设置它的一些属性来展现所需要的布局，因此无需自己再去添加各种约束，所有约束不在由开发者自己去管理，这对于一些还不会使用<code>AutoLayout</code>的开发者来说是一个福音。复杂来说，因为<code>UIStackView</code>是可以嵌套使用的，那么再结合上一些简单的约束，那么就可以完成任何复杂的界面了。想想之前需要各种管理约束，而现在有了它只需要将视图丢给它，改几个属性然后界面就做好了，是不是爽到爆，开发效率又提升一个档次啊。下面提供几个介绍<code>UIStackView</code>的文章，使还不太了解的同学可以了解一下，传送门在此：</p>

<blockquote><p><a href="http://code.tutsplus.com/tutorials/ios-9-getting-started-with-uistackview--cms-24193">iOS 9: Getting Started with UIStackView</a></p>

<p><a href="http://www.cocoachina.com/ios/20150623/12233.html">中文翻译版</a></p>

<p><a href="http://www.appcoda.com/stack-views-intro/">An Introduction to Stack Views in iOS 9 and Xcode 7</a></p>

<p><a href="http://www.cocoachina.com/ios/20150820/13118.html">中文翻译版</a></p></blockquote>

<p>介绍完<code>UIStackView</code>的优势想必大家都已经跃跃欲试了，我自身对于这个控件都是十分的期待，因为在开发中你可以不用去写大段的创建<code>constraints</code>的代码了，如果你使用<code>xib</code>或者<code>storyboard</code>的话，那么在<code>IB</code>中你也不需要去连接各种约束了，这是多么棒的一种体验，而且在<code>Xcode7</code>的<code>IB</code>中右下角往常用来增加约束，修正视图的位置又新增加了一个<code>stack</code>按钮，可以快速的将所选视图加入到<code>UIStackView</code>中，可见苹果也是推荐开发者使用<code>UIStackView</code>的。但是<code>UIStackView</code>是在<code>iOS9</code>才推出的，最低支持的系统也是<code>iOS9</code>，这就蛋疼了，现在能有几个<code>APP</code>是从<code>iOS9</code>开始支持的，如此一来这个控件就成了鸡肋般的存在，再低版本下根本无法使用。自己在业务开发中经常会想这个需求用<code>UIStackView</code>简直就是妙解，而我却还在这里痛苦的连约束……鉴于这个强烈的需求，<code>FDStackView</code>出现了，它就是为了解决<code>UIStackView</code>在低于<code>iOS9</code>的系统下无法使用的问题。在<code>FDStackView</code>之前也已经有了一些类似的开源项目，比如<code>OAStackView</code>和<code>TZStackView</code>，然而他们都不能满足我们的需求，局限性还是比较大的，比如不支持<code>IB</code>，某些功能还没有实现，类名需要使用非<code>UIStackView</code>，在我们看来这些对开发者来说都是不友好的，开发者需要的是一款功能完善，支持<code>IB</code>，使用时完全无感，在<code>Xcode7</code>上直接使用<code>UIStackView</code>即可，接下来的事情交给<code>FDStackView</code>就好，它负责将<code>UIStackView</code>在低于<code>iOS9</code>的系统上运行。需要注意的是如果使用<code>IB</code>的话，那么<code>IB</code>的<code>Builds for</code>属性需要设置为<code>iOS 9.0 and later</code>。如图所示：</p>

<p><img src="https://raw.githubusercontent.com/forkingdog/FDStackView/master/Snapshots/snapshot0.png"></p>

<h2>Research</h2>

<p>这个技术项目有一大部分的时间，我们都是在做调研工作，首先我们需要把<code>UIStackView</code>玩的很熟练，它的各种属性，各种状态以及他们的组合关系分别是什么样的，其次我们需要解决的问题有：</p>

<ol>
<li>使用低系统版本的<code>API</code>和控件创建一个和<code>UIStackView</code>一模一样的控件<code>FDStackView</code>;</li>
<li>在低系统版本运行<code>UIStackView</code>的时候使用我们的<code>FDStackView</code>;</li>
<li>使<code>FDStackView</code>获得<code>Interface Builder</code>的支持。</li>
</ol>


<p>解决了以上三个问题后，那么这个项目基本上也就算是完成了，第一个是工作量最大的工程，它又可以拆分为以下几个技术点：</p>

<ul>
<li><code>alignment</code>和<code>distribution</code>的约束如何添加和管理；</li>
<li><code>spacing</code>和<code>distribution</code>的关系及约束的创建；</li>
<li>子视图的隐藏显示如何处理；</li>
<li>子视图的<code>intrinsicContentSize</code>发生变化时如何处理。</li>
</ul>


<p>首先我们假设在第一个难点已经解决的前提下去攻克其他的难点，毕竟有其他开源方案的存在，说明这个不是不可行的。</p>

<p>至于第二个难点，<code>UIStackView</code>在低系统版本编译时会报找不到符号的<code>error</code>，那么解决的思路就是在低系统版本将<code>UIStackView</code>的符号写进去，然后在<code>runtime</code>将符号与我们的<code>FDStackView</code>做关联，从而使低系统版本也能够运行<code>UIStackView</code>，而实际上在起作用的是我们的<code>FDStackView</code>。这里使用到的<code>黑魔法</code>就是汇编语言，网上已经有大神给出了类似的<a href="https://gist.github.com/OliverLetterer/4643294">解决方案</a>，对其进行优化和修改之后应该就能满足我们的需求。</p>

<p>最后一个难点就是使<code>FDStackView</code>获得<code>Interface Builder</code>的支持，因为我们是<code>IB</code>的重度使用者，一个不能在<code>IB</code>上使用的控件一定不是一个好控件。所以一定要让<code>FDStackView</code>能够在<code>IB</code>上使用，有一个方案就是直接使用<code>UIView</code>然后把他的<code>Class</code>指定为<code>FDStackView</code>，将<code>Axis</code>、<code>Alignmen</code>和<code>Distribution</code>等属性通过<code>IBInspectable</code>使其可以在<code>IB</code>中编辑和设置，但是这样一个是<code>IBInspectable</code>在<code>IB</code>中的显示效果很烂，说实话就是不好用，再一个就是用了<code>UIView</code>没有办法像<code>UIStackView</code>那样在<code>IB</code>中可以直接预览布局效果，这就是很差的一种体验了。最好的方案就是在<code>IB</code>中仍然使用<code>UIStackView</code>，使其在<code>IB</code>中有最佳的体验，然后借助上一难点的解决方案，在低系统版本中使用<code>FDStackView</code>代替<code>UIStackView</code>。这样就会带来两个其他问题：</p>

<ol>
<li><code>IB</code>的构建版本是根据<code>Project</code>的部署版本来的，如果项目不是支持<code>iOS9</code>的话那么会报这样一个<code>error</code>:<code>”UIStackView before iOS 9.0”</code>；</li>
<li>如何使<code>IB</code>构建出来的<code>FDStackView</code>获得在<code>IB</code>中给<code>UIStackView</code>所设置的各种属性。
这两个问题，第一个只需要将<code>IB</code>的构建版本设置为<code>iOS9</code>及以后即可，目前来看是没有问题的，但是还不知道其他的控件被<code>IB</code>搞成<code>iOS9</code>的版本，在低系统版本上会不会有问题，这个还需要后续的验证。第二个问题，由于使用<code>IB</code>创建的<code>UIKit</code>控件都会由<code>initWithCoder:</code>进行初始化，因此弄清楚<code>NSCoder</code>的<code>decode</code>过程就能将<code>IB</code>设置的属性赋值给所创建的对象了。</li>
</ol>


<p>解决完以上两个难点，就可以回过头来研究第一个了，就是创建一个和<code>UIStackView</code>一模一样的<code>FDStackView</code>。这里我们对<code>UIStackView</code>进行了详细的研究，包括<code>dump</code>出所有<code>UIStackView</code>的相关私有类，各个类的方法，实例变量等。还需要添加符号断点来跟踪各个方法的调用顺序及各个实例变量的值得变化情况。同时还需要分析各个状态下<code>UIStackView</code>的约束<code>constraints</code>的情况，包括约束的个数，连接的方式，及约束所添加到的视图等。经过以上的各种分析之后，我们又通过在<code>IB</code>中借助<code>UIView</code>手动连接约束的方式，连出每一个<code>UIStackView</code>所对应的状态。经过这一番调查与研究我们已经大概摸清的<code>UIStackView</code>的工作原理与实现方式。</p>

<p>与此同时我们还发现了两个<code>UIStackView</code>的<code>bug</code>，本以为在<code>Xcode7</code>正式发布之后会得到修复，可是遗憾的是从我们开始研究的时候的<code>beta5</code>到后来的<code>beta6</code>、<code>GM</code>和正式版这两个<code>bug</code>依然存在，后面我会介绍一下这两个<code>bug</code>。</p>

<h2>Implementation</h2>

<p>下面介绍一下具体的实现细节，同样还是从第二个点说起，最终起关键作用的代码是这些：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ----------------------------------------------------</span>
</span><span class='line'><span class="c1">// Runtime injection start.</span>
</span><span class='line'><span class="c1">// Assemble codes below are based on:</span>
</span><span class='line'><span class="c1">// https://github.com/0xced/NSUUID/blob/master/NSUUID.m</span>
</span><span class='line'><span class="c1">// ----------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Runtime Injection</span>
</span><span class='line'>
</span><span class='line'><span class="kr">__asm</span><span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;.section        __DATA,__objc_classrefs,regular,no_dead_strip</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#if  TARGET_RT_64_BIT</span>
</span><span class='line'>      <span class="s">&quot;.align          3</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;L_OBJC_CLASS_UIStackView:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;.quad           _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>      <span class="s">&quot;.align          2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;_OBJC_CLASS_UIStackView:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;.long           _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="s">&quot;.weak_reference _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Constructors are called after all classes have been loaded.</span>
</span><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">FDStackViewPatchEntry</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// &gt;= iOS9.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;UIStackView&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">Class</span> <span class="o">*</span><span class="n">stackViewClassLocation</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if TARGET_CPU_ARM</span>
</span><span class='line'>            <span class="kr">__asm</span><span class="p">(</span><span class="s">&quot;movw %0, :lower16:(_OBJC_CLASS_UIStackView-(LPC0+4))</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;movt %0, :upper16:(_OBJC_CLASS_UIStackView-(LPC0+4))</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;LPC0: add %0, pc&quot;</span> <span class="o">:</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">stackViewClassLocation</span><span class="p">));</span>
</span><span class='line'><span class="cp">#elif TARGET_CPU_ARM64</span>
</span><span class='line'>            <span class="kr">__asm</span><span class="p">(</span><span class="s">&quot;adrp %0, L_OBJC_CLASS_UIStackView@PAGE</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;add  %0, %0, L_OBJC_CLASS_UIStackView@PAGEOFF&quot;</span> <span class="o">:</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">stackViewClassLocation</span><span class="p">));</span>
</span><span class='line'><span class="cp">#elif TARGET_CPU_X86_64</span>
</span><span class='line'>            <span class="kr">__asm</span><span class="p">(</span><span class="s">&quot;leaq L_OBJC_CLASS_UIStackView(%%rip), %0&quot;</span> <span class="o">:</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">stackViewClassLocation</span><span class="p">));</span>
</span><span class='line'><span class="cp">#elif TARGET_CPU_X86</span>
</span><span class='line'>            <span class="kt">void</span> <span class="o">*</span><span class="n">pc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="kr">__asm</span><span class="p">(</span><span class="s">&quot;calll L0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;L0: popl %0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;leal _OBJC_CLASS_UIStackView-L0(%0), %1&quot;</span> <span class="o">:</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">pc</span><span class="p">),</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">stackViewClassLocation</span><span class="p">));</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#error Unsupported CPU</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">stackViewClassLocation</span> <span class="o">&amp;&amp;</span> <span class="o">!*</span><span class="n">stackViewClassLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="n">objc_allocateClassPair</span><span class="p">(</span><span class="n">FDStackView</span><span class="p">.</span><span class="k">class</span><span class="p">,</span> <span class="s">&quot;UIStackView&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">class</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">objc_registerClassPair</span><span class="p">(</span><span class="k">class</span><span class="p">);</span>
</span><span class='line'>                    <span class="o">*</span><span class="n">stackViewClassLocation</span> <span class="o">=</span> <span class="k">class</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先说一下<code>__asm</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Use the asm, _asm, or __asm keyword to place assembly language statements in the middle of your C or C++ source code. Any C++ symbols are replaced by the appropriate assembly language equivalents.
</span><span class='line'>You can group assembly language statements by beginning the block of statements with the asm keyword, then surrounding the statements with braces ({}).
</span><span class='line'>Note: The __asm form is the only one supported by Clang-based C++ compilers.</span></code></pre></td></tr></table></div></figure>


<p>意思就是说在你的<code>C</code>或<code>C++</code>源代码中放入汇编代码用来替换任何<code>C++</code>的符号。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kr">__asm</span><span class="p">(</span>
</span><span class='line'>          <span class="cm">/**</span>
</span><span class='line'><span class="cm">       this is a data section for objc2 class references with the following attributes:</span>
</span><span class='line'><span class="cm">       * regular: &quot;A regular section may contain any kind of data and gets no special processing from the link editor. This is the default section type. Examples of regular sections include program instructions or initialized data.&quot;</span>
</span><span class='line'><span class="cm">       * no_dead_strip: &quot;The no_dead_strip section attribute specifies that a particular section must not be dead-stripped.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">       Documentation can be found here: https://developer.apple.com/library/mac/#documentation/developertools/Reference/Assembler/040-Assembler_Directives/asm_directives.html</span>
</span><span class='line'><span class="cm">       */</span>
</span><span class='line'>      <span class="s">&quot;.section        __DATA,__objc_classrefs,regular,no_dead_strip</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#if  TARGET_RT_64_BIT</span>
</span><span class='line'>      <span class="s">&quot;.align          3</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// align the next label to 2^3 bytes = 64 bit for 64 bit platforms</span>
</span><span class='line'>      <span class="s">&quot;L_OBJC_CLASS_UIStackView:</span><span class="se">\n</span><span class="s">&quot;</span>  <span class="c1">// the L_OBJC_CLASS_UIStackView label will store the _OBJC_CLASS_$_UIStackView label, which is weak referenced (see below)</span>
</span><span class='line'>      <span class="s">&quot;.quad           _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>      <span class="s">&quot;.align          2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;_OBJC_CLASS_UIStackView:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="s">&quot;.long           _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>          <span class="cm">/**</span>
</span><span class='line'><span class="cm">       .weak_reference: &quot;The .weak_reference directive causes symbol_name to be a weak undefined symbol present in the output file’s symbol table. This is used by the compiler when referencing a symbol with the weak_import attribute.&quot;</span>
</span><span class='line'><span class="cm">       */</span>
</span><span class='line'>      <span class="s">&quot;.weak_reference _OBJC_CLASS_$_UIStackView</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先来说这一个部分，大神的<a href="https://gist.github.com/OliverLetterer/4643294">解决方案</a>给出了英文注释，尝试着直译了一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>这是一个由regular和no_dead_strip属性所标明的objc2类的数据区间。
</span><span class='line'>regular:一个regular区间一般包含各种类型的数据而且他们不会被连接器做特殊处理。这是默认的区间类型，包括程序指令和初始化数据是regular区间。
</span><span class='line'>no_dead_strip:一个no_dead_strip区间标识出那些一定不能dead_strip的特殊区间。</span></code></pre></td></tr></table></div></figure>


<p>发现还不如不译，就直接说一下大概的意思吧。
第一行是取得符号所在的区间，之后区分<code>64</code>和<code>32</code>位系统，将<code>_OBJC_CLASS_$_UIStackView</code>这个符号与自定的符号做一个<code>weak</code>类型的关联。</p>

<p>接下来就是<code>__attribute__((constructor))</code>这个黑魔法，这个标识的方法会在所有的类<code>load</code>之后，<code>main</code>函数调用之前调用。所以此时<code>FDStackView</code>已经被<code>load</code>了。再之后就是判断<code>runtime</code>是否存在<code>UIStackView</code>，不存在的话就根据不同的系统平台将指向<code>_OBJC_CLASS_$_UIStackView</code>这个符号的指针存储在<code>stackViewClassLocation</code>中，接下来通过<code>runtime</code>创建<code>UIStackView</code>这个类并作为<code>FDStackView</code>的子类，并注册进<code>runtime</code>，最后将<code>UIStackView</code>作为<code>stackViewClassLocation</code>这个指针的值。如此一来在低系统版本中<code>UIStackView</code>就能作为<code>FDStackView</code>的子类使用了。它没有重载任何方法，因此就跟使用直接<code>FDStackView</code>一模一样。</p>

<p>接下来的问题是<code>IB</code>加载出来的<code>UIStackView</code>如何将属性值设置到我们的<code>FDStackView</code>上，这个在前面研究是已经有结论，首先需要将<code>IB</code>的<code>build for</code>做下修改，然后<code>IB</code>创建的<code>UIKit</code>控件都会由<code>initWithCoder:</code>进行初始化，所以所有的信息都在<code>NSCoder</code>这个对象中，<code>NSCoder</code>提供了一系列的<code>decode</code>方法，由于<code>key</code>是字符串，所以可以在汇编代码处直接看到，所以通过加符号断点的方式找到这几个<code>key</code>。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475116128.png">
<img src="https://oac67o3cg.qnssl.com/1475116163.png"></p>

<p>如此一来就可以直接在<code>FDStackView</code>的<code>initWithCoder:</code>方法中取到值，再将这几个值赋值即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">initWithCoder</span><span class="p">:</span><span class="n">decoder</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Attributes of UIStackView in interface builder that archived.</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">commonInitializationWithArrangedSubviews</span><span class="p">:[</span><span class="n">decoder</span> <span class="nl">decodeObjectForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewArrangedSubviews&quot;</span><span class="p">]];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">axis</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeIntegerForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewAxis&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">distribution</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeIntegerForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewDistribution&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">alignment</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeIntegerForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewAlignment&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">spacing</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeDoubleForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewSpacing&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">baselineRelativeArrangement</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeBoolForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewBaselineRelative&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">layoutMarginsRelativeArrangement</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="nl">decodeBoolForKey</span><span class="p">:</span><span class="s">@&quot;UIStackViewLayoutMarginsRelative&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后就是通过系统的<code>API</code>创建<code>constraints</code>来实现<code>FDStackView</code>了，这里涉及的内容比较多，包括几个辅助的私有类，及<code>Alignment</code>和<code>Distribution</code>方向上的约束创建，子视图隐藏，<code>intrinsicContentSize</code>改变如何处理等。这里我们都尽可能的与猜测到的<code>UIStackView</code>的实现保持一致。这些内容将会在后续的另一篇文章中介绍。</p>

<h2>UIStackView Bugs</h2>

<p>现在来说一下我们在调研<code>UIStackView</code>时发现的两个<code>bug</code>，<a href="https://github.com/wtlucky/UIStackViewBugDemo">测试的<code>Demo</code></a>已经放在<code>Github</code>上。</p>

<p>这个测试<code>Demo</code>会借助我们的<code>FDStackView</code>来演示对比出<code>UIStackView</code>的<code>bug</code>，上面是系统原生的<code>UIStackView</code>，下面是我们的<code>FDStackView</code>，两者的参数设置是完全相同的。</p>

<p>先来看第一个，当<code>Distribution</code>设置为<code>UIStackViewDistributionFillProportionally</code>时，并且存在<code>spacing</code>时就会出现问题，如图所示：</p>

<p><img src="http://i3.piimg.com/22c9f3dc8b429bdd.jpg"></p>

<p><code>UIStackViewDistributionFillProportionally</code>这个属性的意思是子视图的宽度会根据他们内容的宽度比例而在<code>UIStackView</code>中占据对应的宽度，即他们的实际的宽度比应该是他们的内容固有宽度（<code>intrinsicContentSize</code>）的比例，<code>Demo</code>中三个<code>Label</code>的固有宽度即汉字的宽度是<code>4:1:2</code>，那么在<code>UIStackView</code>中他们所占据的宽度也应该是<code>4:1:2</code>，这在<code>spacing</code>为<code>0</code>的情况下是ok的。</p>

<p>如果存在<code>spacing</code>的话，那么<code>UIStackView</code>应该先减去子视图之间的<code>spacing</code>，然后再去按比例分布子视图的宽度。这里可以看到<code>UIStackView</code>的布局是烂的了，而<code>FDStackView</code>的布局是ok的。</p>

<p>这里我们通过分析<code>UIStackView</code>身上的<code>constraints</code>大概得出<code>UIStackView</code>出现这个<code>bug</code>的原因是，他们的算法出了问题，他们这一部分的约束是这样添加的，每一个子视图的宽度等于<code>UIStackView</code>的宽度乘上一个比例系数，即<code>AutoLayout</code>计算公式<code>y  = m * x + c</code>中的<code>m</code>系数，<code>c</code>的值一直为<code>0</code>。他们在计算<code>m</code>的时候出了问题，忽略了<code>spacing</code>的存在，也就是在计算中没有计算上<code>spacing</code>的值。</p>

<p>具体拿<code>Demo</code>来看的话，<code>UIStackView</code>的最左边的<code>Label</code>的宽度应该是这样计算的<code>label.width = 4 * UIStackView.width / (4 + 1 + 2)</code>，这是<code>spacing</code>为<code>0</code>时，<code>m</code>的值就是<code>4 / (4 + 1 + 2)</code>，这没有问题 ，但是如果有<code>spacing</code>的话，他们把<code>spacing</code>也作为了分母的一部分，认为<code>spacing</code>也是可以按比例显示宽度的，所以<code>m</code>的值就成为了<code>4 / (4 + 1 + 2 + spacing)</code>（这里的<code>spacing</code>不是<code>UIStackView</code>设置<code>spacing</code>的值，而应该是实际<code>UIStackView</code>中出现的所有<code>spacing</code>的和）。因为<code>spacing</code>被当作分母计算了进去，那么在布局的时候<code>spacing</code>也应该按照计算出的系数乘上<code>UIStackView</code>的宽度来显示，但实际上他们没有这么做，而是把<code>spacing</code>按固定值来显示了，这样就会因为分母加入了<code>spacing</code>导致所有子视图计算出的<code>m</code>偏小，进而显示出来也就会偏小，到了最后一个视图时，由于约束优先级的缘故导致这个宽度的约束不再起作用，从而导致被拉长，出现了上图的效果。</p>

<p>所以这里<code>UIStackView</code>是算法出了问题而显示时又按正确的样式来显示，所以布局就烂了，其实在有<code>spacing</code>的状态下就不应该忽略<code>c</code>的值了，而且<code>spacing</code>也不应该参与到分母中去计算，正确的约束应该是这个样子的<code>label.width = 4 * UIStackView.width / (4 + 1 + 2) - 4 * spacing / (4 + 1 + 2)</code>，这时<code>c</code>就有值了，不再是<code>0</code>而是<code>-4 * spacing / (4 + 1 + 2)</code>。</p>

<p>整体来说<code>UIStackView</code>在处理<code>UIStackViewDistributionFillProportionally</code>这个属性的时候采取的约束添加方式不是最好的，处理起来是比较复杂的，这样处理会出现很多非整数情况，一个是计算复杂，在一个也会丢失精度。所以我们在<code>FDStackView</code>中没有使用这种连接方式，而是使用了另外一种方法，后面的文章会介绍到。</p>

<p>另外一个<code>bug</code>是当<code>Alignment</code>属性设置为<code>UIStackViewAlignmentFill</code>时，当一个最高的子视图隐藏掉了时，<code>UIStackView</code>的高度并没有变化，这时它应该变为第二高的子视图的高度，具体如图所示：</p>

<p><img src="http://imgchr.com/images/hidingBug.gif"></p>

<p>这种情况只有在属性设置为<code>UIStackViewAlignmentFill</code>时才会出现，具体的出现原因我们也有分析出来的结论，但是涉及到<code>Alignment</code>方向上约束添加的问题，这个会在后一篇文章中提到，所以这里就先不做解释，之后在说。我们的<code>FDStackView</code>修复了这个问题，但是在一种情况下也会失去作用就是给这个要隐藏的视图收到添加了一个高优先级的高度约束的情况下，不过一般情况下我们使用<code>UIStackView</code>基本都不会再给子视图添加约束了。</p>

<p>第一篇文章就介绍这么多，后面我会找时间把第二篇文章（Part 2）整理出来。</p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constraints &amp; Transformations 在iOS7和8上的不同]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/06/06/constraints-and-transformations-zai-ios7he-8shang-de-bu-tong/"/>
    <updated>2015-06-06T09:03:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/06/06/constraints-and-transformations-zai-ios7he-8shang-de-bu-tong</id>
    <content type="html"><![CDATA[<p>使用<code>AutoLayout</code>时，在<code>iOS7</code>和<code>iOS8</code>上两者会有很大的不同，<code>iOS8</code>苹果优化了很多。最近看了一篇<code>bolg</code>，是<code>Reveal</code>的工程师写的介绍使用<code>Constraints</code>以及<code>transform</code>变幻之后在<code>iOS78</code>上的异同。<!-- More --></p>

<p><a href="http://revealapp.com/blog/constraints-and-transforms.html">原文链接</a></p>

<hr />

<p>先贴张图说明一下问题:</p>

<p><img src="https://oac67o3cg.qnssl.com/1475115317.png"></p>

<p>可以看到<code>iOS7</code>在使用了<code>autolayout</code>之后，进行<code>transform</code>变幻之后<code>view</code>并没有达到预期效果，而在<code>iOS8</code>和和纯<code>frame</code>布局的情况下是正常的。</p>

<p><code>autolayout</code>使用的是<code>Top</code>和<code>leading</code>与灰色的<code>view</code>进行约束，而<code>frame</code>是通过<code>setCenter</code>来设置位置的。</p>

<p>这种错误的现象会发生在<code>iOS7</code>及以前的版本中，在<code>iOS8</code>之后得到了修复。</p>

<p>通过<code>Reveal</code>查看可以看到:</p>

<p><img src="https://oac67o3cg.qnssl.com/1475115353.png"></p>

<p>使用<code>autolayout</code>的<code>view</code>跟他的参照<code>View</code>相比只移动了<code>（-10，-10）</code>,而且它的布局位置也发生了偏移<code>（10，10）</code>，在<code>iOS8</code>下查看，会发现布局位置并没有移动，跟参照<code>View</code>完全一致</p>

<p><img src="https://oac67o3cg.qnssl.com/1475115374.png"></p>

<p>由此可以得到的结论就是，在<code>iOS7</code>和<code>8</code>上使用<code>autolayout</code>布局的<code>view</code>的<code>center</code>属性的位置发生了改变。</p>

<p>通过设置断点和重写<code>setFrame</code>和<code>setCenter</code>方法研究发现，在<code>iOS7</code>和<code>8</code>上<code>setFrame</code>方法都没有被<code>UIKit</code>调用到，而只有<code>setCenter</code>方法被调用。</p>

<blockquote><p>“If the transform property is not the identity transform, the value of this property is undefined and therefore should be ignored.”<br/>
                           ————UIView&rsquo;s Class Reference</p></blockquote>

<p>如果<code>transform</code>属性不是<code>identity</code>的，那么他的值就是不确定的而且应该被忽略。因此可以断定<code>setFrame</code>方法没有没调用，因而<code>view</code>的<code>transform</code>属性也就不是<code>identity</code>的，所以会出现问题。</p>

<p>至于具体的<code>iOS7</code>和<code>8</code>在<code>NSISLayoutEngine</code>里面做了什么改变，可以查看<a href="http://revealapp.com/blog/constraints-and-transforms.html">博客原文</a>。</p>

<p>最后说一下结论：如果我们的<code>app</code>是使用<code>iOS8</code>或者以后的<code>SDK</code>编译链接的并且还要支持<code>iOS7</code>，并在没有<code>identity</code>的<code>transform</code>的<code>view</code>上使用了<code>AutoLayout</code>。那么就应该注意一下几点：</p>

<ol>
<li>如果只使用旋转和缩放的<code>transform</code>变换，那么就要使用<code>CenterX/CenterY</code>约束，来替代<code>Top/Bottom/Left/Right/Trailing/Leading</code>约束，因为如果<code>transform</code>的<code>view</code>是通过它的<code>centre</code>布局的话，那么结果就有可能是正确的。</li>
<li>将要变换的<code>view</code>放到一个<code>containerView</code>里，然后用约束约束<code>containerView</code>好过直接约束变换的<code>view</code>。变换的<code>view</code>可以直接用代码布局，也可以用<code>CentreX/CenterY</code>约束。但是使用等宽等高与<code>containerView</code>建立约束将不会达到预期效果</li>
<li>不要使用<code>constraint</code>来约束这些<code>View</code>，使用<code>autosizingMask</code>，然后设置这些<code>View</code>的<code>translatesAutoresizingMaskIntoConstraints</code>为<code>YES</code>。</li>
</ol>


<hr />

<p>PS:
最后算是做个广告吧，<a href="http://revealapp.com/"><code>Reveal</code></a>这个工具真的是很<code>NB</code>很好用，当你使用了之后就会爱不释手。它可以查看<code>view</code>的层级关系，动态的改变<code>UI</code>属性，在最近的版本还支持对<code>autolayout</code>的支持，可以查看<code>constraints</code>已经对他们进行修改，我们做<code>iOS</code>开发的更多的是做界面开发工作，那么有了这样一个神器在手，那么必然会达到事半功倍的效果，工欲善其事，必先利其器！</p>

<p><code>Reveal</code>还能做更NB的事情就是当你手机越狱后，然后你就可以查看任何<code>app</code>的视图层级关系了。就说到这里了，至于接下来怎样大家自己脑补吧。</p>

<p>既然这个工具这么强大，我们还是支持一下作者吧，同为开发者，都知道这行挺不容易的还是支持下正版吧，好消息是Reveal对中国的开发者们有个特惠价格：<code>RMB249</code>就可以拿下了，<a href="http://item.taobao.com/item.htm?spm=a230r.1.14.1.kpBX7S&amp;id=45630069705&amp;ns=1&amp;abbucket=4#detail">购买地址</a>，比半价还优惠，我在知道这个消息后第一时间拿下了它，因为之前的价格确实有点贵，对我来说还是有压力的。</p>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Cocoapods创建私有podspec]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/"/>
    <updated>2015-02-26T16:14:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/"><code>Cocoapods</code></a>是非常好用的一个<code>iOS</code>依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及将自己的项目中的公共组件交由它去管理。<code>Cocoapods</code>的介绍及优点本文就不在赘述，我开始使用<code>Cocoapods</code>还是在两年前，那个时候它刚刚出现，网上的资料还非常的少，就连他们自己的<code>HomePage</code>都十分的简单，我就着手尝试着使用了一下，用它管理起第三方库确实是十分的方便顺手。后来它有了更强大的功能就是自己创建<code>podspec</code>，更可以设置私有的库。</p>

<p>春节回来上班，一天的工作结束之后，需要充实下自己，正好项目中有一些公共组件需要从庞大的项目体系中剥离出来，而且年前项目终于从<code>SVN</code>迁移到了<code>Git</code>，真是喜大普奔，大快人心！这样项目使用<code>Cocoapods</code>就有了条件，正好学习一下创建私有的<code>podspec</code>并在项目中部署使用，以及<code>pods</code>的<code>subspec</code>的创建及使用。<!-- More --></p>

<hr />

<p>整体先说明一下创建一个私有的<code>podspec</code>包括如下那么几个步骤：</p>

<ol>
<li>创建并设置一个私有的<code>Spec Repo</code>。</li>
<li>创建<code>Pod</code>的所需要的项目工程文件，并且有可访问的项目版本控制地址。</li>
<li>创建<code>Pod</code>所对应的<code>podspec</code>文件。</li>
<li>本地测试配置好的<code>podspec</code>文件是否可用。</li>
<li>向私有的<code>Spec Repo</code>中提交<code>podspec</code>。</li>
<li>在个人项目中的<code>Podfile</code>中增加刚刚制作的好的<code>Pod</code>并使用。</li>
<li>更新维护<code>podspec</code>。</li>
</ol>


<p>在这一系列的步骤中需要创建两个<code>Git仓库</code>，分别是第一步和第二步（第二步不一定非要是<code>Git仓库</code>，只要是可以获取到相关代码文件就可以，也可以是<code>SVN</code>的，也可以说<code>zip包</code>，区别就是在<code>podspec</code>中的<code>source</code>项填写的内容不同），并且第一步只是在初次创建私有<code>podspec</code>时才需要，之后在创建其他的只需要从第二步开始就可以。本文只介绍在<code>Git</code>环境下的操作，其他环境其他方式暂不说明。</p>

<h3>创建私有<code>Spec Repo</code></h3>

<p>先来说第一步，什么是<code>Spec Repo</code>？他是所有的<code>Pods</code>的一个索引，就是一个容器，所有公开的<code>Pods</code>都在这个里面，他实际是一个<code>Git仓库</code><a href="https://github.com/CocoaPods/Specs"><code>remote端</code>
</a>在<code>GitHub</code>上，但是当你使用了<code>Cocoapods</code>后他会被<code>clone</code>到本地的<code>~/.cocoapods/repos</code>目录下，可以进入到这个目录看到<code>master</code>文件夹就是这个官方的<code>Spec Repo</code>了。这个<code>master</code>目录的结构是这个样子的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── Specs
</span><span class='line'>    └── <span class="o">[</span>SPEC_NAME<span class="o">]</span>
</span><span class='line'>        └── <span class="o">[</span>VERSION<span class="o">]</span>
</span><span class='line'>            └── <span class="o">[</span>SPEC_NAME<span class="o">]</span>.podspec
</span></code></pre></td></tr></table></div></figure>


<p>因此我们需要创建一个类似于<code>master</code>的私有<code>Spec Repo</code>，这里我们可以<code>fork</code>官方的<code>Repo</code>，也可以自己创建，个人建议不<code>fork</code>，因为你只是想添加自己的<code>Pods</code>，没有必要把现有的公开<code>Pods</code>都<code>copy</code>一份。所以创建一个
<code>Git仓库</code>，这个仓库你可以创建私有的也可以创建公开的，不过既然私有的<code>Spec Repo</code>，还是创建私有的仓库吧，需要注意的就是如果项目中有其他同事共同开发的话，你还要给他这个<code>Git仓库</code>的权限。因为<code>GitHub</code>的私有仓库是收费的，我还不是<code>GitHub</code>的付费用户，所以我使用了其他<code>Git</code>服务，我使用的是<a href="https://coding.net"><code>CODING</code></a>，当然还有其他的可供选择<a href="http://git.oschina.net/"><code>开源中国</code></a>、<a href="https://bitbucket.org/"><code>Bitbucket</code></a>以及<a href="https://code.csdn.net/"><code>CSDN</code></a></p>

<p>创建完成之后在<code>Terminal</code>中执行如下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="c"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span>
</span><span class='line'><span class="nv">$ </span>pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git
</span></code></pre></td></tr></table></div></figure>


<p>此时如果成功的话进入到<code>~/.cocoapods/repos</code>目录下就可以看到<code>WTSpecs</code>这个目录了。至此第一步创建私有<code>Spec Repo</code>完成。</p>

<p>PS：如果有其他合作人员共同使用这个私有<code>Spec Repo</code>的话在他有对应<code>Git仓库</code>的权限的前提下执行相同的命令添加这个<code>Spec Repo</code>即可。</p>

<h3>创建<code>Pod</code>项目工程文件</h3>

<p>这个第二步没有什么好介绍的，如果是有现有的组件项目，并且在<code>Git</code>的版本管理下，那么这一步就算完成了，可以直接进行下一步了。</p>

<p>如果你的组件还在你冗余庞大的项目中，需要拆分出来或者需要自己从零开始创建一个组件库，那么我建议你使用<code>Cocoapods</code>提供的一个工具将第二步与第三步结合起来做。</p>

<p>现在来说一下这个工具，相关的文档介绍是<a href="http://guides.cocoapods.org/making/using-pod-lib-create">Using Pod Lib Create</a>
就拿我创建的<code>podTestLibrary</code>为例子具体讲一下这里是如何操作的，先<code>cd</code>到要创建项目的目录然后执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib create podTestLibrary
</span></code></pre></td></tr></table></div></figure>


<p>之后他会问你四个问题，1.是否需要一个例子工程；2.选择一个测试框架；3.是否基于View测试；4.类的前缀；4个问题的具体介绍可以去看官方文档，我这里选择的是1.yes；2.Specta/Expecta；3.yes；4.PTL。
问完这4个问题他会自动执行<code>pod install</code>命令创建项目并生成依赖。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree PodTestLibrary -L 2
</span><span class='line'>PodTestLibrary
</span><span class='line'>├── Example                                  <span class="c">#demo APP</span>
</span><span class='line'>│   ├── PodTestLibrary
</span><span class='line'>│   ├── PodTestLibrary.xcodeproj
</span><span class='line'>│   ├── PodTestLibrary.xcworkspace
</span><span class='line'>│   ├── Podfile                              <span class="c">#demo APP 的依赖描述文件</span>
</span><span class='line'>│   ├── Podfile.lock
</span><span class='line'>│   ├── Pods                                  <span class="c">#demo APP 的依赖文件</span>
</span><span class='line'>│   └── Tests
</span><span class='line'>├── LICENSE                               <span class="c">#开源协议 默认MIT</span>
</span><span class='line'>├── Pod                                       <span class="c">#组件的目录</span>
</span><span class='line'>│   ├── Assets                            <span class="c">#资源文件</span>
</span><span class='line'>│   └── Classes                              <span class="c">#类文件</span>
</span><span class='line'>├── PodTestLibrary.podspec           <span class="c">#第三步要创建的podspec文件</span>
</span><span class='line'>└── README.md                                <span class="c">#markdown格式的README</span>
</span><span class='line'>
</span><span class='line'>9 directories, 5 files
</span></code></pre></td></tr></table></div></figure>


<p>以上是项目生成的目录结构及相关介绍。</p>

<p>接下来就是向<code>Pod</code>文件夹中添加库文件和资源，并配置<code>podspec</code>文件，我把一个网络模块的共有组件放入<code>Pod/Classes</code>中，然后进入<code>Example</code>文件夹执行<code>pod update</code>命令，再打开项目工程可以看到，刚刚添加的组件已经在<code>Pods</code>子工程下<code>Development Pods/PodTestLibrary</code>中了，然后编辑demo工程，测试组件，我并没有使用提供的测试框架进行测试，这里就先不介绍了。</p>

<p><em>注：</em>这里需要注意的是每当你向<code>Pod</code>中添加了新的文件或者以后更新了<code>podspec</code>的版本都需要重新执行一遍<code>pod update</code>命令。</p>

<p>测试无误后需要将该项目添加并推送到远端仓库，并编辑<code>podspec</code>文件。</p>

<p>通过<code>Cocoapods</code>创建出来的目录本身就在本地的<code>Git</code>管理下，我们需要做的就是给它添加远端仓库，同样去<code>GitHub</code>或其他的<code>Git</code>服务提供商那里创建一个私有的仓库，拿到<code>SSH</code>地址，然后<code>cd</code>到<code>PodTestLibrary</code>目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -s -m <span class="s2">&quot;Initial Commit of Library&quot;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin git@coding.net:wtlucky/podTestLibrary.git           <span class="c">#添加远端仓库</span>
</span><span class='line'><span class="nv">$ </span>git push origin master     <span class="c">#提交到远端仓库</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为<code>podspec</code>文件中获取<code>Git</code>版本控制的项目还需要<code>tag</code>号，所以我们要打上一个<code>tag</code>，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git tag -m <span class="s2">&quot;first release&quot;</span> 0.1.0
</span><span class='line'><span class="nv">$ </span>git push --tags     <span class="c">#推送tag到远端仓库</span>
</span></code></pre></td></tr></table></div></figure>


<p>做完这些就可以开始编辑<code>podspec</code>文件了，它是一个<code>Ruby</code>的文件，把编辑器的格式改成<code>Ruby</code>就能看到语法高亮，下面我贴上我的<code>podspec</code>文件，并在后面以注释的形式说明每个字段的含义，没有涉及到的字段可以去<a href="http://guides.cocoapods.org/syntax/podspec.html">官方文档</a>查阅</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Pod</span><span class="p">:</span><span class="ss">:Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>             <span class="o">=</span> <span class="s2">&quot;PodTestLibrary&quot;</span>    <span class="c1">#名称</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>          <span class="o">=</span> <span class="s2">&quot;0.1.0&quot;</span>             <span class="c1">#版本号</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>          <span class="o">=</span> <span class="s2">&quot;Just Testing.&quot;</span>     <span class="c1">#简短介绍，下面是详细介绍</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">description</span>      <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">DESC</span>
</span><span class='line'><span class="sh">                       Testing Private Podspec.</span>
</span><span class='line'>
</span><span class='line'><span class="sh">                       * Markdown format.</span>
</span><span class='line'><span class="sh">                       * Don&#39;t worry about the indent, we strip it!</span>
</span><span class='line'><span class="no">                       DESC</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span>         <span class="o">=</span> <span class="s2">&quot;https://coding.net/u/wtlucky/p/podTestLibrary&quot;</span>                           <span class="c1">#主页,这里要填写可以访问到的地址，不然验证不通过</span>
</span><span class='line'>  <span class="c1"># s.screenshots     = &quot;www.example.com/screenshots_1&quot;, &quot;www.example.com/screenshots_2&quot;           #截图</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">license</span>          <span class="o">=</span> <span class="s1">&#39;MIT&#39;</span>              <span class="c1">#开源协议</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span>           <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;wtlucky&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;wtlucky@foxmail.com&quot;</span> <span class="p">}</span>                   <span class="c1">#作者信息</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span>           <span class="o">=</span> <span class="p">{</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://coding.net/wtlucky/podTestLibrary.git&quot;</span><span class="p">,</span> <span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;0.1.0&quot;</span> <span class="p">}</span>      <span class="c1">#项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS</span>
</span><span class='line'>  <span class="c1"># s.social_media_url = &#39;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#39;                       #多媒体介绍地址</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">platform</span>     <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>            <span class="c1">#支持的平台及版本</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">requires_arc</span> <span class="o">=</span> <span class="kp">true</span>                   <span class="c1">#是否使用ARC，如果指定具体文件，则具体的问题使用ARC</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/**/*&#39;</span>     <span class="c1">#代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">resource_bundles</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;PodTestLibrary&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Pod/Assets/*.png&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>                                       <span class="c1">#资源文件地址</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/**/*.h&#39;</span>   <span class="c1">#公开头文件地址</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">frameworks</span> <span class="o">=</span> <span class="s1">&#39;UIKit&#39;</span>                  <span class="c1">#所需的framework，多个用逗号隔开</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span> <span class="s1">&#39;AFNetworking&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3&#39;</span>   <span class="c1">#依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>编辑完<code>podspec</code>文件后，需要验证一下这个文件是否可用，如果有任何<code>WARNING</code>或者<code>ERROR</code>都是不可以的，它就不能被添加到<code>Spec Repo</code>中，不过<code>xcode</code>的<code>WARNING</code>是可以存在的，验证需要执行一下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib lint
</span></code></pre></td></tr></table></div></figure>


<p>当你看到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> -&gt; PodTestLibrary <span class="o">(</span>0.1.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>PodTestLibrary passed validation.
</span></code></pre></td></tr></table></div></figure>


<p>时，说明验证通过了，不过这只是这个<code>podspec</code>文件是合格的，不一定说明这个<code>Pod</code>是可以用的，我们需要在本地做一下验证，这就是第四步的内容了，第四步在具体说明。</p>

<h3>创建<code>podspec</code>文件</h3>

<p>如果从第二步过来，已经有了现成的项目，那么就需要给这个项目创建一个<code>podspec</code>文件，创建它需要执行<code>Cocoapods</code>的另外一个命令，<a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html">官方文档</a>在这里</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod spec create PodTestLibrary git@coding.net:wtlucky/podTestLibrary.git
</span></code></pre></td></tr></table></div></figure>


<p>执行完之后，就创建了一个<code>podspec</code>文件，他其中会包含很多内容，可以按照我之前介绍的进行编辑，没用的删掉。编辑完成之后使用验证命令验证一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib lint
</span></code></pre></td></tr></table></div></figure>


<p>验证无误就可以进入下一步了。</p>

<h3>本地测试<code>podspec</code>文件</h3>

<p>我们可以创建一个新的项目，在这个项目的<code>Podfile</code>文件中直接指定刚才创建编辑好的<code>podspec</code>文件，看是否可用。
在<code>Podfile</code>中我们可以这样编辑，有两种方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;PodTestLibrary&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;~/code/Cocoapods/podTest/PodTestLibrary&#39;</span>      <span class="c1"># 指定路径</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;PodTestLibrary&#39;</span><span class="p">,</span> <span class="ss">:podspec</span> <span class="o">=&gt;</span> <span class="s1">&#39;~/code/Cocoapods/podTest/PodTestLibrary/PodTestLibrary.podspec&#39;</span>  <span class="c1"># 指定podspec文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>pod install</code>命令安装依赖，打开项目工程，可以看到库文件都被加载到<code>Pods</code>子项目中了，不过它们并没有在<code>Pods</code>目录下，而是跟测试项目一样存在于<code>Development Pods/PodTestLibrary</code>中，这是因为我们是在本地测试，而没有把<code>podspec</code>文件添加到<code>Spec Repo</code>中的缘故。</p>

<p>在项目中编写代码，测试库文件无误后就可以开始下一步了，提交<code>podspec</code>到<code>Spec Repo</code>中。</p>

<h3>向<code>Spec Repo</code>提交<code>podspec</code></h3>

<p>向<code>Spec Repo</code>提交<code>podspec</code>需要完成两点一个是<code>podspec</code>必须通过验证无误，在一个就是删掉无用的注释（这个不是必须的，为了规范还是删掉吧）。
向我们的私有<code>Spec Repo</code>提交<code>podspec</code>只需要一个命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo push WTSpecs PodTestLibrary.podspec  <span class="c">#前面是本地Repo名字 后面是podspec名字</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成之后这个组件库就添加到我们的私有<code>Spec Repo</code>中了，可以进入到<code>~/.cocoapods/repos/WTSpecs</code>目录下查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── PodTestLibrary
</span><span class='line'>│   └── 0.1.0
</span><span class='line'>│       └── PodTestLibrary.podspec
</span><span class='line'>└── README.md
</span></code></pre></td></tr></table></div></figure>


<p>再去看我们的<code>Spec Repo</code>远端仓库，也有了一次提交，这个<code>podspec</code>也已经被<code>Push</code>上去了。</p>

<p>至此，我们的这个组件库就已经制作添加完成了，使用<code>pod search</code>命令就可以查到我们自己的库了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod search PodTestLibrary
</span><span class='line'>
</span><span class='line'>-&gt; PodTestLibrary <span class="o">(</span>0.1.0<span class="o">)</span>
</span><span class='line'>   Just Testing.
</span><span class='line'>   pod <span class="s1">&#39;PodTestLibrary&#39;</span>, <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span><span class='line'>   - Homepage: https://coding.net/u/wtlucky/p/podTestLibrary
</span><span class='line'>   - Source:   https://coding.net/wtlucky/podTestLibrary.git
</span><span class='line'>   - Versions: 0.1.0 <span class="o">[</span>WTSpecs repo<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里说的是添加到私有的<code>Repo</code>，如果要添加到<code>Cocoapods</code>的官方库了，可以使用<code>trunk</code>工具，具体可以查看<a href="http://guides.cocoapods.org/making/getting-setup-with-trunk.html">官方文档</a></p>

<h3>使用制作好的<code>Pod</code></h3>

<p>在完成这一系列步骤之后，我们就可以在正式项目中使用这个私有的<code>Pod</code>了只需要在项目的<code>Podfile</code>里增加以下一行代码即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">pod</span> <span class="s1">&#39;PodTestLibrary&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>pod update</code>，更新库依赖，然后打卡项目可以看到，我们自己的库文件已经出现在<code>Pods</code>子项目中的<code>Pods</code>子目录下了，而不再是<code>Development Pods</code>。</p>

<h3>更新维护<code>podspec</code></h3>

<p>最后再来说一下制作好的<code>podspec</code>文件后续的更新维护工作，比如如何添加新的版本，如何删除<code>Pod</code>。</p>

<p>我已经制作好了<code>PodTestLibrary</code>的<code>0.1.0</code>版本，现在我对他进行升级工作，这次我添加了更多的模块到<code>PodTestLibrary</code>之中，包括工具类，底层<code>Model</code>及<code>UIKit</code>扩展等，这里又尝试了一下<code>subspec</code>功能，给<code>PodTestLibrary</code>创建了多个子分支。</p>

<p>具体做法是先将源文件添加到<code>Pod/Classes</code>中，然后按照不同的模块对文件目录进行整理，因为我有四个模块，所以在<code>Pod/Classes</code>下有创建了四个子目录，完成之后继续编辑之前的<code>PodTestLibrary.podspec</code>，这次增加了<code>subspec</code>特性</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>             <span class="o">=</span> <span class="s2">&quot;PodTestLibrary&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>          <span class="o">=</span> <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>          <span class="o">=</span> <span class="s2">&quot;Just Testing.&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">description</span>      <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">DESC</span>
</span><span class='line'><span class="sh">                       Testing Private Podspec.</span>
</span><span class='line'>
</span><span class='line'><span class="sh">                       * Markdown format.</span>
</span><span class='line'><span class="sh">                       * Don&#39;t worry about the indent, we strip it!</span>
</span><span class='line'><span class="no">                       DESC</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span>         <span class="o">=</span> <span class="s2">&quot;https://coding.net/u/wtlucky/p/podTestLibrary&quot;</span>
</span><span class='line'>  <span class="c1"># s.screenshots     = &quot;www.example.com/screenshots_1&quot;, &quot;www.example.com/screenshots_2&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">license</span>          <span class="o">=</span> <span class="s1">&#39;MIT&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span>           <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;wtlucky&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;wtlucky@foxmail.com&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span>           <span class="o">=</span> <span class="p">{</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://coding.net/wtlucky/podTestLibrary.git&quot;</span><span class="p">,</span> <span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;1.0.0&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># s.social_media_url = &#39;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">platform</span>     <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">requires_arc</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#s.source_files = &#39;Pod/Classes/**/*&#39;</span>
</span><span class='line'>  <span class="c1">#s.resource_bundles = {</span>
</span><span class='line'>  <span class="c1">#  &#39;PodTestLibrary&#39; =&gt; [&#39;Pod/Assets/*.png&#39;]</span>
</span><span class='line'>  <span class="c1">#}</span>
</span><span class='line'>  <span class="c1">#s.public_header_files = &#39;Pod/Classes/**/*.h&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="s1">&#39;NetWorkEngine&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">networkEngine</span><span class="o">|</span>
</span><span class='line'>      <span class="n">networkEngine</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/NetworkEngine/**/*&#39;</span>
</span><span class='line'>      <span class="n">networkEngine</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/NetworkEngine/**/*.h&#39;</span>
</span><span class='line'>      <span class="n">networkEngine</span><span class="o">.</span><span class="n">dependency</span> <span class="s1">&#39;AFNetworking&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="s1">&#39;DataModel&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">dataModel</span><span class="o">|</span>
</span><span class='line'>      <span class="n">dataModel</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/DataModel/**/*&#39;</span>
</span><span class='line'>      <span class="n">dataModel</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/DataModel/**/*.h&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="s1">&#39;CommonTools&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">commonTools</span><span class="o">|</span>
</span><span class='line'>      <span class="n">commonTools</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/CommonTools/**/*&#39;</span>
</span><span class='line'>      <span class="n">commonTools</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/CommonTools/**/*.h&#39;</span>
</span><span class='line'>      <span class="n">commonTools</span><span class="o">.</span><span class="n">dependency</span> <span class="s1">&#39;OpenUDID&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="s1">&#39;UIKitAddition&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ui</span><span class="o">|</span>
</span><span class='line'>      <span class="n">ui</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/UIKitAddition/**/*&#39;</span>
</span><span class='line'>      <span class="n">ui</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/UIKitAddition/**/*.h&#39;</span>
</span><span class='line'>      <span class="n">ui</span><span class="o">.</span><span class="n">resource</span> <span class="o">=</span> <span class="s2">&quot;Pod/Assets/MLSUIKitResource.bundle&quot;</span>
</span><span class='line'>      <span class="n">ui</span><span class="o">.</span><span class="n">dependency</span> <span class="s1">&#39;PodTestLibrary/CommonTools&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">frameworks</span> <span class="o">=</span> <span class="s1">&#39;UIKit&#39;</span>
</span><span class='line'>  <span class="c1">#s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 2.3&#39;</span>
</span><span class='line'>  <span class="c1">#s.dependency &#39;OpenUDID&#39;, &#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我们创建了<code>subspec</code>所以项目整体的依赖<code>dependency</code>，源文件<code>source_files</code>，头文件<code>public_header_files</code>，资源文件<code>resource</code>等都移动到了各自的<code>subspec</code>中，每个<code>subspec</code>之间也可以有相互的依赖关系，比如<code>UIKitAddition</code>就依赖于<code>CommonTools</code>。</p>

<p>编辑完成之后，在测试项目里<code>pod update</code>一下，几个子项目都被加进项目工程了，写代码验证无误之后，就可以将这个工程<code>push</code>到远端仓库，并打上新的<code>tag</code>-><code>1.0.0</code>。</p>

<p>最后再次使用<code>pod lib lint</code>验证编辑好的<code>podsepc</code>文件，没有自身的<code>WARNING</code>或者<code>ERROR</code>之后，就可以再次提交到<code>Spec Repo</code>中了，命令跟之前是一样的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo push WTSpecs PodTestLibrary.podspec
</span></code></pre></td></tr></table></div></figure>


<p>之后再次到<code>~/.cocoapods/repos/WTSpecs</code>目录下查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── PodTestLibrary
</span><span class='line'>│   ├── 0.1.0
</span><span class='line'>│   │   └── PodTestLibrary.podspec
</span><span class='line'>│   └── 1.0.0
</span><span class='line'>│       └── PodTestLibrary.podspec
</span><span class='line'>└── README.md
</span><span class='line'>
</span><span class='line'>3 directories, 4 files
</span></code></pre></td></tr></table></div></figure>


<p>已经有两个版本了，使用<code>pod search</code>查找得到的结果为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod search PodTestLibrary
</span><span class='line'>
</span><span class='line'>-&gt; PodTestLibrary <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>   Just Testing.
</span><span class='line'>   pod <span class="s1">&#39;PodTestLibrary&#39;</span>, <span class="s1">&#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'>   - Homepage: https://coding.net/u/wtlucky/p/podTestLibrary
</span><span class='line'>   - Source:   https://coding.net/wtlucky/podTestLibrary.git
</span><span class='line'>   - Versions: 1.0.0, 0.1.0 <span class="o">[</span>WTSpecs repo<span class="o">]</span>
</span><span class='line'>   - Sub specs:
</span><span class='line'>     - PodTestLibrary/NetWorkEngine <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>     - PodTestLibrary/DataModel <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>     - PodTestLibrary/CommonTools <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>     - PodTestLibrary/UIKitAddition <span class="o">(</span>1.0.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成这些之后，在实际项目中我们就可以选择使用整个组件库或者是组件库的某一个部分了，对应的<code>Podfile</code>中添加的内容为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://github.com/CocoaPods/Specs.git&#39;</span>  <span class="c1"># 官方库</span>
</span><span class='line'><span class="n">source</span> <span class="s1">&#39;https://git.coding.net/wtlucky/WTSpecs.git&#39;</span>   <span class="c1"># 私有库</span>
</span><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;PodTestLibrary/NetWorkEngine&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0&#39;</span>  <span class="c1">#使用某一个部分</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;PodTestLibrary/UIKitAddition&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;PodTestLibrary&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0&#39;</span>   <span class="c1">#使用整个库</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后介绍一下如何删除一个私有<code>Spec Repo</code>，只需要执行一条命令即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo remove WTSpecs
</span></code></pre></td></tr></table></div></figure>


<p>这样这个<code>Spec Repo</code>就在本地删除了，我们还可以通过</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo add WTSpecs git@coding.net:wtlucky/WTSpecs.git
</span></code></pre></td></tr></table></div></figure>


<p>再把它给加回来。</p>

<p>如果我们要删除私有<code>Spec Repo</code>下的某一个<code>podspec</code>怎么操作呢，此时无需借助<code>Cocoapods</code>，只需要<code>cd</code>到<code>~/.cocoapods/repos/WTSpecs</code>目录下，删掉库目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>rm -Rf PodTestLibrary
</span></code></pre></td></tr></table></div></figure>


<p>然后在将<code>Git</code>的变动<code>push</code>到远端仓库即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git add --all .
</span><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git ci -m <span class="s2">&quot;remove unuseful pods&quot;</span>
</span><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<blockquote><p><a href="http://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a></p>

<p><a href="http://blog.grio.com/2014/11/creating-a-private-cocoapod.html">Creating a Private CocoaPod</a></p>

<p><a href="http://www.objectpartners.com/2014/06/25/developing-private-in-house-libraries-with-cocoapods/">Developing Private In-House Libraries with CocoaPods</a></p></blockquote>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个特殊的iPhone6 Plus适配问题]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/01/29/adapt-view-for-iphone6-plus/"/>
    <updated>2015-01-29T21:13:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/01/29/adapt-view-for-iphone6-plus</id>
    <content type="html"><![CDATA[<p>最近项目在搞适配，目前的适配原则是不改变既有的设计图的设计样式，使用<code>@3x</code>的图片去进行完美适配。即不涉及到某一个模块在<code>iPhone5</code>及以下的设备上是一个展示样式，在<code>iPhone6</code>或着<code>iPhone6 Plus</code>上是另外的一个展示样式。单纯是这样的需求通过<code>Auto Resizing</code>和<code>AutoLayout</code>就完全可以应付的了。以前硬编码写的view的frame通过乘上一个屏幕放大的比例系数也可以搞定。</p>

<p>可是目前设计同学提出在一个使用<code>collection view</code>的页面中，之前是通过各种设备使用同一个大小的<code>cell</code>，不同的屏幕上拉大的是<code>cell</code>之间的间距来进行适配。现如今要改成只有在<code>6 Plus</code>上要将<code>cell</code>上半部分等比例放大，<code>cell</code>中下半部分的文字的字号也放大。目前的需求就是这个样子，其实我觉得这样适配就不是苹果的设计规范，按道理说屏幕大了看的内容多才对，这样搞个等比例放大，跟没有适配在兼容模式下运行的效果似地。不过需求来了还是得搞。</p>

<!-- More -->


<p>这个<code>cell</code>本来就是使用<code>AutoLayout</code>做的，但是之前是定高定宽的，图片的宽度被限制死了，即使是在<code>collocation view</code>的代理方法中将<code>cell</code>设大，<code>cell</code>的图片也不会变大。而且还需要把字体一并放大，以及图片左上和右下的两个图片的位置是要成比例设置的，这样之前设置的<code>heading space</code> 和 <code>trailing space</code>是固定值，也不能达到要求。先来看一下这个<code>cell</code>，因为项目的保密性我没有展示全部的内容，只是列举了一部分，但足以说明问题。</p>

<p><img src="http://i3.piimg.com/f775dffce0a50a8b.jpg"></p>

<p>因为使用的是<code>xcode6</code>，苹果提供了<code>Size Classes</code>这样强大的一个功能，为的是制作<code>adaptive UI</code>。就是只制作一套UI，但是可以适配多个屏幕尺寸以及选装方向，之前没有仔细研究过这个新特性，只是觉得他应该能应付当前的需求，因为使用它可以为每一种<code>size</code>设置一套<code>constraint</code>和字体大小。很好很强大！</p>

<p>但是当开始使用时发现，没有一个<code>size</code>是能够单独区分出<code>6 Plus</code>的<code>portrait</code>模式的，到时能区分出<code>landscape</code>模式。<code>6 Plus</code>的<code>portrait</code>模式使用的是<code>Regular height</code>和<code>Compact width</code>，其他的设备的<code>portrait</code>模式使用的也是<code>Regular height</code>和<code>Compact width</code>。但是<code>Any height</code>和<code>Compact width</code>这个<code>size</code>对应的是<code>6 Plus</code>以外其他设备的<code>portrait</code>和<code>landscape</code>模式。如图所示，</p>

<p><img src="http://i3.piimg.com/aeca38ae1498eb0b.jpg"></p>

<p>这里正好不包括<code>6 Plus</code>，分别设置了这两种<code>size</code>发现不是预期的效果，所有的手机都使用了<code>Regular height</code>和<code>Compact width</code>的这个<code>size</code>。后来有看见了这个优先级的表格，</p>

<p><img src="http://i3.piimg.com/2dcd34dae7d1d8bb.jpg"></p>

<p>一旦设置了这个<code>size</code>那么就会优先加载这个<code>size</code>，所以这条路目前是行不通的，我觉得一定有其他的方法来通过<code>Size Classes</code>解决，或者通过代码修改优先级，或者使用某种方法标识<code>6 Plus</code>。由于我时间比较紧急，所以就没有继续使用这种方式，有知道的大神求告知啊，感激不尽！</p>

<p><code>Size Classes</code>行不通，又想了其他两种方案，一个是为<code>6 Plus</code>单独制作一个xib，让collection view在<code>6 Plus</code>上加载这个xib上的<code>cell</code>；另外一个是修改现有的<code>cell</code>上的<code>constraints</code>把固定图片的大小<code>constraint</code>干掉搞成自适应的，自适应不了的<code>constraint</code>通过<code>IBOutlet</code>在代码中进行修改。权衡了一下这两个方案，第一个目前的工作量比较小，但是后期维护很恶心，而且这种做法实在是太low。而第二种虽然开始开上去很复杂，工作量很大，但是搞定之后，维护修改起来也容易很多，毕竟只有一个UI。</p>

<p>所以选择第二种开工，自适应很好搞，把最大的那个圆圈与父view的<code>heading</code>和<code>trailing</code>设为<code>0</code>即可，难的是等比例，虽然用<code>AutoLayout</code>有几个月了但是用得都是<code>heading</code>、<code>trailing</code>、<code>vertical</code>、<code>horizontal</code>、<code>top</code>、<code>bottom</code> 还有<code>width</code>和<code>height</code>这几个<code>constraint</code>，他们就能解决我之前遇到的所有布局问题，连<code>alignment</code>的那几个<code>constraint</code>我都很少使用。但是这次需要用到<code>Aspect ratio</code>了，之前一直不知道这咋用，感谢这次需求让我知道了如何用他，最大的那个圆圈是正方形设置了左右间距就确定了宽度，而高度的确定就用<code>Aspect ratio</code>设置为<code>1:1</code>即可，同样圆圈左上和右下的图也是需要等比例放大的，他们的比例也是通过<code>Aspect ratio</code>来设置，这里的比例按照设计图写一下即可。这里发现<code>xcode</code>一个很奇怪的问题，就是按住<code>ctrl</code>从一个view拖向另外一个view选择<code>Aspect ratio</code>的时候，<code>xcode</code>为你生成的是一个view的<code>height</code>与另一个view的<code>width</code>的比，这个我一直不是很理解，虽然如果你在设置<code>Aspect ratio</code>之前把他们的<code>frame</code>设为正确的话，生成的比例是正确的，但是这样真的很奇怪，可读性特别差，为什么要一个高比上另外一个的宽呢？我承认我数学学的不好，这里可能有其他的深刻含义，但是我觉得好奇怪，如果有人知道欢迎留言评论！所以这里我又手动的把一个view的<code>height</code>改为<code>width</code>，即宽比上宽，按照设计图修改一下比例。还有一个问题是圆圈的左上有右下的view的位置是要相应改变的，也是按照比例，设置固定的值肯定是不行的，因为值也是会变得，这里再次感谢这个需求，让我又一次加深的<code>AutoLayout</code>的理解，<code>AutoLayout</code>中的约束其实是一个二元一次方程，如图所示</p>

<p><img src="http://i3.piimg.com/d6877a02ea1a04f3.jpg"></p>

<p><code>First item = Second item * Multiplier + Constant</code>，
一个值是可以通过另外一个值通过这个方程式计算出来的，而我们所加的约束就是设置了<code>Multiplier</code>和<code>Constant</code>，再加上优先级，两者的属性（上下左右宽高等）以及两者的关系（大于小于等于），这些共同组成了一个<code>constraint</code>。 xcode默认创建的<code>constraint</code>的<code>Multiplier</code>为<code>1</code>，我之前使用的所有<code>constraint</code>也都是使用的是<code>1</code>，从没有改变过他，从方程式来看这里是可以按比例设置的。不得不说<code>AutoLayout</code>真的很强大，自己用到的仅仅是冰山一角。</p>

<p>那圆圈右下角的view举例子，首先设置他的x轴距离，据父view一个是<code>heading</code>一个是<code>trailing</code>，因为父view的<code>heading</code>是<code>0</code>，无论<code>Multiplier</code>设置什么相乘都是零，所以只能用<code>trailing</code>，因为我们事先已经按照设计图将一个尺寸的界面拼出来了，当设置了<code>trailing</code>之后，<code>xcode</code>生成了一个<code>Multiplier</code>为<code>1</code>，<code>Constant</code>为一个固定值的<code>constraint</code>，这样不对，不能够按比例移动x轴位置，所以我们把<code>Constant</code>设为<code>0</code>，由公式算出<code>Multiplier</code>为<code>First item / Second item</code>并进行设置。确定了x方向的位置还需要y方向的位置，y这里又出现了另外一个坑，y方向父view的<code>top</code>为<code>0</code>不能这是比例，<code>bottom</code>由于有<code>Label</code>所以<code>bottom</code>的值是不确定的，所以就不能与父view做约束了，只能选择与圆圈做约束，这里使用的是<code>align bottom</code>。同理因为是按比例放大，这个<code>constraint</code>也不能使用定值，所以<code>Constant</code>设为<code>0</code>，公式算出<code>Multiplier</code>并设置。同样圆圈左上的view也这样设置即可。如此一来<code>cell</code>上半部分等比例放大的问题就搞定了。</p>

<p><code>cell</code>下半部分<code>Label</code>之间的间距这个是不能自适应的，<code>6 Plus</code>和其他设备是两个不同的值，这样就只能把他们的<code>constraint</code>拿到代码中去进行修改，label上字体也是只能在代码中<code>cell</code>第一次加载时判断为<code>6 Plus</code>就将他们的字体放大。将这一部分逻辑放在了<code>aweakFromNib</code>中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="bp">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fequal</span><span class="p">(</span><span class="n">ScreenWidth</span><span class="p">,</span> <span class="mf">414.0f</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">16.0f</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">memberNumLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">15.0f</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">infoLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">13.0f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">icoTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">8.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">nameTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">33.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">memberCountTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">infoTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">10.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要说一下，判断<code>6 Plus</code>不能通过设备号去判断,<code>iPhone7,1</code>和<code>iPhone7,2</code>虽然是<code>iPhone6</code>和<code>iPhone6 Plus</code>没错，但是我们是在渲染界面，<code>iPhone6</code>和<code>iPhone6 Plus</code>是有一个放大模式的，在放大模式下<code>iPhone6 Plus</code>的屏幕尺寸是<code>iPhone6</code>的，<code>iPhone6</code>的屏幕尺寸是<code>iPhone5</code>的，所以如果通过设备号去判读那么渲染出来就是错误的，正确的方式是通过屏幕的尺寸来判断即<code>[UIScreen mainScreen].bounds.size</code>。</p>

<hr />

<p>写的很乱，因为是当天搞的，当天就记录下来，怕以后忘了，文笔不好，就凑合看吧，最后总结一下：</p>

<ol>
<li><code>Size Classes</code>还有待研究，如何区分出<code>iPhone6 Plus</code></li>
<li>学会了使用<code>Aspect ratio</code>，用于标记一个view的宽高比或者两个view的宽高比</li>
<li>在<code>AutoLayout</code>中使用<code>Multiplier</code>进行数值成比例改变的需求</li>
<li>在界面布局是不要使用设备号进行判别，要使用屏幕尺寸进行判断</li>
</ol>


<h2>参考资料</h2>

<blockquote><p><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LayoutandAppearance.html">Adaptivity and Layout</a></p>

<p><a href="https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/_index.html#//apple_ref/doc/uid/TP40014436">Size Classes Design Help</a></p>

<p><a href="http://mathewsanders.com/designing-adaptive-layouts-for-iphone-6-plus">ADAPTIVE LAYOUTS FOR iPHONE 6</a></p></blockquote>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Xib Views - 使用XIB实现嵌套自定义视图]]></title>
    <link href="http://blog.wtlucky.com/blog/2014/08/10/nested-xib-views/"/>
    <updated>2014-08-10T15:18:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2014/08/10/nested-xib-views</id>
    <content type="html"><![CDATA[<p>在进行<code>iOS</code>开发的过程中，对于一些复杂的界面，我们可以通过<code>Interface Builder</code>这个<code>Xcode</code>集成的可视化界面编辑工具在完成，这回节省大部分时间以及代码量。它的使用方法这里不做介绍了，这次我要介绍是使用它来实现一个嵌套的自定义视图。解释一下就是，我们使用<code>IB</code>自定义了一个<code>View</code>，然后又在其他的<code>xib</code>文件中使用了这个<code>View</code>，那么这就是所谓的嵌套自定义视图。之所以要介绍它，是因为我自己在使用它的时候遇到了一些问题，一方面写下来做个记录供自己查看，另一方面我相信大家在使用的时候应该也会遇到这样的问题，方便大家。<!-- More --></p>

<p>下面使用的示例代码我已经放到<code>Github</code>上了，<a href="https://github.com/wtlucky/nestedXibLoad">项目地址</a>，有需要的朋友可以去查看，<code>Demo</code>非常简单，主要是介绍这个知识点。</p>

<h2>Question</h2>

<p>首先我们创建一个<code>SingleView</code>的工程，项目使用<code>StoryBoard</code>，（使用<code>Xib</code>也无所谓，因为有些老的项目可能还没有使用到<code>StoryBoard</code>），然后创建一个<code>CustomView</code>作为我们的自定义视图。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114657.png"></p>

<p>有时对于复杂的界面我们可能会拆分出来对它进行单独处理，又有可能它的界面布局很复杂，这时我们就会用<code>Interface Builder</code>对它的布局进行处理。这里的<code>CustomView</code>就是这样一个视图，所以我们为它创建一个<code>xib</code>文件，我们通常的作法就是把<code>xib</code>中的<code>View</code>的<code>custom class</code>更改为我们的<code>CustomView</code>。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114680.png"></p>

<p>接下来对我们的界面进行布局，并连接输出口，编写响应逻辑，这里我放了一个<code>ImageView</code>和一个<code>Label</code>在这里，并把<code>View</code>的背景色设置为浅灰色。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114702.png"></p>

<p>自定义的<code>View</code>制作完成，回到我们<code>ViewController</code>的<code>xib</code>文件，拖入两个<code>View</code>并把他们的<code>custom class</code>更改为<code>CustomView</code>。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114726.png"></p>

<p>这时，我们算是工作做完了，运行程序，结果悲剧了，怎么不是我们想要的结果，为什么只生成了两个空白的视图，我们视图上的图片和文字哪里去了？</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114746.png"></p>

<p>在<code>CustomView</code>中的<code>awakeFromeNib</code>方法中增加断点调试发现，在<code>CustomView</code>初始化完成后，<code>ImageView</code>和<code>Label</code>并没有被初始化，他们仍然是<code>nil</code>。这就是在嵌套使用<code>xib</code>自定义视图时非常容易出现的问题，我们觉得被嵌套的视图能够正常显示出来，但是实际上它并没有被按照我们在<code>xib</code>上指定的方式被初始化。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114767.png"></p>

<h2>Solution</h2>

<p>那么如何解决这种问题，以及这种问题又是如何出现的呢？其实这主要是由于我们对<code>xib</code>文件的加载原理不熟悉所导致的，我们以为定义一个<code>View</code>，创建一个<code>xib</code>文件并布局好它的子视图，让后将它使用在另外一个<code>xib</code>文件中，把<code>custom class</code>改成它，然后<code>xib</code>的加载系统会自动为我们做好其余的一切。其实并不是这样的。</p>

<p>这样做<code>xib</code>加载系统只会为我们创建一个<code>CustomView</code>的对象，但这并不包括<code>CustomView</code>所对应的<code>xib</code>文件中的部分，所以只创建了一个空白的<code>View</code>。</p>

<p>解决他们有两种方式，不过最终的思路都是通过代码强制使<code>CustomView</code>的<code>xib</code>部分被加载。第一种是通过代码创建<code>CustomView</code>的对象，然后<code>addSubview</code>到<code>viewController</code>的<code>view</code>上。第二种是在<code>CustomView</code>的实现文件里，通过重载一些方法，来完成加载<code>xib</code>文件。</p>

<p>这两种方法各有利弊，第一种使用起来方便也好理解，但是当嵌套的层级比较多的时候或者一个<code>View</code>中有多个这样的<code>CustomView</code>时，这种方式就会显得过于麻烦。而第二种虽然理解起来有些难度，但是当你处理好之后，直接在需要的<code>xib</code>文件中拖入<code>view</code>，改个<code>custom class</code>，就能直接生成需要的对象了，并且也能够在<code>xib</code>中对他们进行直接布局，不再需要用代码去布局了。</p>

<h3>NO 1.</h3>

<p>先来介绍第一种方法，很简单，就是找到<code>xib</code>文件，生成对象，设置属性，<code>addsubview</code>到视图上。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114786.png"></p>

<h3>NO 2.</h3>

<p>第二种方法是通过重载<code>initWithCoder</code>方法来实现，因为通过<code>xib</code>来创建一个对象会调用到这个方法，所以我们需要在这个方法里做一些处理，把这个<code>CustomView</code>的<code>xib</code>中的内容加载进来，这时同样是需要通过代码来来加载，首先附上代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithCoder:</span><span class="n">aDecoder</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">containerView</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;CustomView&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">instantiateWithOwner:</span><span class="n">self</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">newFrame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>        <span class="n">containerView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">containerView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外，还要这里的输出口以及设置<code>custom class</code>的位置跟第一种方式有所不同，这里需要取消掉<code>xib</code>中<code>view</code>的<code>custom class</code>，再将跟它连接的图片与文字的输出口取消掉，在这里这个<code>view</code>只是被当做一个容器来处理，它跟<code>Customview</code>没有直接关系，它将来会被<code>addSubview</code>到<code>CustomView</code>上，除此之外还要把<code>xib</code>的<code>File's ower</code>的<code>custom class</code>改成<code>CustomView</code>，表示这个<code>xib</code>文件的持有者是<code>CustomView</code>。再把它与图片和文字通过输出口连接起来。</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114808.png"></p>

<p>这个时候在运行程序就看到了我们想要的结果了。^_^</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114826.png"></p>

<p>其实想要实现第二种解决方案所要的效果，还有一种方式，它是通过重载<code>awakeAfterUsingCoder:</code>方法来实现的，这个方法的返回值会替换掉真正的加载对象，所以在具体的加载<code>CustomView</code>的方式又与第一种相同，所以<code>xib</code>的输出口连接与<code>custom class</code>的设置也与第一种解决方案相同。不过这种方式是更复杂也更难于理解的，不推荐使用，因为上一个方法就能很好的解决这个问题了，这里只是贴出这个方法的代码，有想仔细研究的请参看文章底部的参考文章。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">awakeAfterUsingCoder:</span><span class="p">(</span><span class="bp">NSCoder</span><span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">isJustAPlaceholder</span> <span class="o">=</span> <span class="p">([[</span><span class="nb">self</span> <span class="n">subviews</span><span class="p">]</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isJustAPlaceholder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CustomView</span><span class="o">*</span> <span class="n">theRealThing</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">getClassObjectFromNib</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">theRealThing</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// make compatible with Auto Layout</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="n">theRealThing</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// convince ARC that we&#39;re legit, unnecessary since at least Xcode 4.5</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">((</span><span class="k">__bridge</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFRetain</span><span class="p">((</span><span class="k">__bridge</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">theRealThing</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">theRealThing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<blockquote><p><a href="https://blog.compeople.eu/apps/?p=142">Embedding custom-view Nibs in another Nib: Towards the holy grail</a></p>

<p><a href="http://blog.yangmeyer.de/blog/2012/07/09/an-update-on-nested-nib-loading">An Update on Nested Nib Loading</a></p></blockquote>

<p>————————————</p>

<p><img src="https://oac67o3cg.qnssl.com/1475114982.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Hexadecimal conversion]]></title>
    <link href="http://blog.wtlucky.com/blog/2014/07/25/swift-hexadecimal-conversion/"/>
    <updated>2014-07-25T15:11:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2014/07/25/swift-hexadecimal-conversion</id>
    <content type="html"><![CDATA[<p>自己的<code>Blog</code>好久没有更新了，一个是因为这半年里要忙着毕业好多事情，再一个就是工作上也很忙，基本就没有时间来为我的<code>Blog</code>增添新的血液了。<code>APPLE</code>在<code>WWDC 2014</code>上公布了一门新的编程语言<a href="https://developer.apple.com/swift/">Swift</a>，最近可以说是相当火热，而且在语言热度排名上也是突飞猛进，这是一个集合了N多语言优秀特性于一身的全新语言，它将成为开发<code>iOS</code>和<code>MAC</code>的新的选择。并且据说他将会取代<code>Objective-C</code>，但是我觉得并不是这样，不过这也仅仅是一家之谈，至于会不会这样，我们走着瞧。<!-- More --></p>

<p>既然苹果放出了这样一个利器，身为<code>iOS开发者</code>的我也不能落下，<code>APPLE</code>为我们提供了两个文档<a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/index.html">The Swift Programming Language</a>和<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html">Using Swift with Cocoa and Objective-C</a>。他们一个是纯语言角度的介绍<code>Swift</code>，包括各种细节语法，另一个则是介绍怎么它怎么与<code>Cocoa</code>交互，如何使用它开发<code>iOS</code>和<code>MAC</code>应用，以及如何与现有的程序兼容。学习这样一门全新的技术我还是建议读第一手资料的，虽然现在网络上有好多中文版的资料了吧，但是苹果的文档写的很是通俗易懂，读起来也没有什么困难。而起自己之前有过脚本语言的经验，所以看起来也是很快。</p>

<p>读完两个文档，就做一些实战的内容，先从小程序开始，之前自己写过一个<code>进制转换器</code>，没啥功能，就是提供一个十进制和十六进制互相转换的功能，主要还是为了方便自己在写一些颜色值的时候使用。之前的版本是用<code>Objective-C</code>写的，那么这次就用<code>Swift</code>重写一遍。</p>

<p>这个程序最主要的部分也就是两个进制相互转换的算法了，用<code>Objective-C</code>实现起来很简单，通过一下字符<code>char</code>的运算就能搞定。代码如下：</p>

<figure class='code'><figcaption><span>Hexdecimal To Decimal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">decimalConvertedFromHexdecimal:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">hexdecimal</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">hexdecimal</span> <span class="nl">characterAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;f&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithTitle:</span><span class="s">@&quot;错误&quot;</span>
</span><span class='line'>      <span class="nl">message:</span><span class="s">@&quot;你提供了非法字符&quot;</span> <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>      <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;知道了&quot;</span>
</span><span class='line'>      <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span> <span class="n">becomeFirstResponder</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">pow</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Decimal To Hexdecimal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">hexdecimalConvertedFromDecimal:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">decimal</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="n">decimal</span> <span class="n">intValue</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">-</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">character</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">result</span> <span class="nl">insertString:</span><span class="n">character</span> <span class="nl">atIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">/=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是当我使用<code>Swift</code>重写的时候，我进入到了一个很深的坑里，发现这项任务是如此的难做，我定义了这样两个方法，注意方法的参数和返回值：</p>

<figure class='code'><figcaption><span>Swift Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="nl">hexdecimal:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="nl">decimal:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我使用的是Swift提供的<code>String</code>类型，它是由一系列的<code>Character</code>类型的字符组成的，但是这种<code>Character</code>并不是<code>char</code>，他们在处理进制转换这个问题上让我无从下手，也有可能是我还不够熟悉，不知道正确的用法，如果有人知道欢迎告诉我。下面来说一说我遇到的问题，首先在<code>Swift</code>中是没有<code>‘A’</code>这种字符表示方法的，更不用说用它去进行运算了，其次<code>Character</code>不能进行大小比较，只能进行想等或者不等的比较，这样一来在判断一个字符所在的区间上就遇到了很大的问题。</p>

<p><code>Swift</code>的<code>String</code>提供了<code>uft8</code>和<code>uft16</code>方法，返回值为<code>UTF8View</code>或者<code>UFT16View</code>，这是一个<code>Array</code>，使用<code>for-in</code>遍历他们可以输出他们的数字值，但是这个值也仅仅是能进行输出使用，他们不是<code>Int</code>也不能进行加减运算。不能进行运算在转换上就无能为力。单单从这里看来，<code>Swift</code>确实蛋疼，连这么一个小小的问题都不能搞定。</p>

<p>不过还好，<code>Swift</code>对<code>Cocoa</code>做了兼容使得<code>String</code>与<code>NSString</code>可以无缝转化，在使用了<code>NSString</code>后，问题的处理就变得简单多了，在<code>Swift</code>中<code>NSString</code>使用一系列的<code>unichar</code>组成的，查看声明可以看到他其实就是<code>UInt</code>，那么他就可以进行运算，所以把<code>String</code>改成<code>NSString</code>完成这两个方法。即使这样，<code>Swift</code>不支持<code>‘A’</code>这种字符的特性，也使得我们必须自己把字符转化为数值来运算，使得程序的可读性很差，还就是<code>Swift</code>的内置类型不支持隐式转换，所以在类型不一致的地方都需要强制转换一下。</p>

<p>这两个方法的实现在文末的代码中有，这个代码虽然完成了功能，但是还有很多需要改进和优化的地方，其次在代码风格上也需要改一下，<a href="https://github.com/raywenderlich/swift-style-guide">Raywenderlich</a>的<code>Swift</code>的代码风格就很不错，非常值得套用。</p>

<p>最后说一下，在<code>iOS8</code>中<code>UIAlertView</code>和<code>UIActionSheet</code>被废除了，而引入的是<code>UIAlertController</code>，通过<code>preferredStyle</code>来确定类型，通过<code>UIAlertAction</code>来增加事件，然后通过<code>presentViewController</code>来显示出来，在使用上做到了统一，还是蛮方便的。</p>

<p>下面附上完全的代码，</p>

<figure class='code'><figcaption><span> (HexConverterViewController.m)</span> <a href='http://blog.wtlucky.com/downloads/code/swift/HexConverterViewController.m'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ViewController.swift</span>
</span><span class='line'><span class="c1">//  HexConverter_swift</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by taowang on 7/24/14.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014 Meilishuo. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">beforeConvertTextField:</span> <span class="n">UITextField</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">afterConvertTextField:</span> <span class="n">UITextField</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">segmentControl:</span> <span class="n">UISegmentedControl</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">action:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;setTextFieldKeyboardType&quot;</span><span class="p">),</span> <span class="nl">forControlEvents:</span> <span class="n">UIControlEvents</span><span class="p">.</span><span class="n">ValueChanged</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="nl">hexdecimal:</span> <span class="n">NSString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSString</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="nl">sum:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">var</span> <span class="nl">i:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">c:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">characterAtIndex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="nl">num:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">70</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">55</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">97</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">102</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">87</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">48</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">57</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">48</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;错误&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;你提供了非法字符&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>                <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;知道了&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Cancel</span><span class="p">,</span> <span class="nl">handler:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">CDouble</span><span class="p">(</span><span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">Int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">NSString</span><span class="p">(</span><span class="nl">format:</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="nl">decimal:</span> <span class="n">NSString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSString</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="nl">num:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">decimal</span><span class="p">.</span><span class="n">integerValue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">result:</span> <span class="n">NSMutableString</span> <span class="o">=</span> <span class="n">NSMutableString</span><span class="p">(</span><span class="nl">capacity:</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">c:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="mi">48</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="mi">97</span> <span class="o">+</span> <span class="n">unichar</span><span class="p">(</span><span class="n">tmp</span> <span class="o">-</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">=</span> <span class="mi">48</span> <span class="o">+</span> <span class="n">unichar</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">let</span> <span class="nl">character:</span> <span class="n">NSString</span> <span class="o">=</span> <span class="n">NSString</span><span class="p">(</span><span class="nl">format:</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">insertString</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="nl">atIndex:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">/=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">setTextFieldKeyboardType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">selectedSegmentIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">ASCIICapable</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">NumberPad</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">endEditing</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">endEditing</span><span class="p">(</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">convertButtonPressed</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s">&quot;&quot;</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;提示&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;你还没有填写被转换数字&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>            <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;知道了&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Cancel</span><span class="p">,</span> <span class="nl">handler:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">selectedSegmentIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">afterConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">afterConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wax Lua—使用lua编写原生ios程序的框架实现原理]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/12/28/wax-lua/"/>
    <updated>2013-12-28T20:13:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/12/28/wax-lua</id>
    <content type="html"><![CDATA[<h3>Wax Lua是什么？</h3>

<p><code>Lua</code>我就不介绍了，我们都在使用的脚本语言，游戏开发的神器。
而<code>Wax</code>就是使用<code>Lua</code>脚本语言来编写<code>ios原生应用</code>的一个框架，它把Lua脚本语言和原生<code>Objective-C</code>应用编程接口(API)结合起来。这意味着，你可以从Lua里面，使用任何和全部的<code>Objective-C</code>类及框架。</p>

<h3>为什么要使用Wax Lua？</h3>

<p>苹果在2010年9月就修改条款允许开发者使用脚本语言，不再是只限定开发者只能使用<code>Objective-C</code>和<code>javascript</code>两种语言，这也就导致了<code>Wax Lua</code>的出现。</p>

<pre><code>Wax Lua的优势：
1.  开源、免费，遵循MIT协议。项目地址：[Wax Lua](https://github.com/probablycorey/wax)
2.  可以使用原生API，可以访问所有ios的框架。
3.  Lua类型和OC类型自动转化。
4.  自动内存管理。
5.  便捷的Lua模块，使得HTTP请求和JSON解析容易且快速。
6.  简洁的代码，不再有头文件，数组和字典等语句。
7.  Lua支持闭包，相当强大的功能。
</code></pre>

<!-- More -->


<p>当年风靡一时的《Angry Birds》就是使用<code>Wax Lua</code>开发的，不过一个不幸的消息就是<code>Wax Lua</code>框架在2011年，即两年前原作者就不在对它进行维护了，所以不能确定在如今<code>XCode5</code>，<code>iOS7</code>时代它是否依然可以用。我觉得作者不再维护它是有原因的，现在来看他的优势已不再有这么多了，iOS4有了block，就有了Lua的闭包的功能，iOS5有了ARC，也可以自动管理内存，iOS6简化了OC代码，使代码脚本化，再也不用长长的数组与字典语句了，iOS5自带的NSJSONSerialization和强大<a href="https://github.com/AFNetworking/AFNetworking/">AFNetworking</a>也使HTTP请求和JSON解析相当便捷。如此看来<code>Wax Lua</code>的优势也所剩无几了。</p>

<h3>Wax Lua 使用方法</h3>

<p>说一下<code>Wax</code>的特点，它支持你在脚本里使用任何<code>OC</code>的类，同样也支持你创建一个类。</p>

<p>使用一个类时你会这样使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">NSString</span> <span class="c1">-- Returns the NSString class</span>
</span><span class='line'><span class="n">UIView</span> <span class="c1">-- Returns the UIView class</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样调用其实一个语法糖，实际上他调用的是wax.class[&ldquo;UIView &rdquo;]，但是我们在使用的时候不需要知道这些，因为在这个框架里已经通过设置元表的方法实现了这一点。</p>

<p>当定义一个类的时候会是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">waxClass</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">MyClass&quot;</span><span class="p">,</span> <span class="n">NSObject</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遵循协议的类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">waxClass</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">MyClass&quot;</span><span class="p">,</span><span class="n">NSObject</span><span class="p">,</span><span class="n">protocols</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">UITableViewDelegate&quot;</span><span class="p">,</span><span class="s2">&quot;</span><span class="s">UITableViewDataSource&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在你定义这个类的脚本文件里缩写的其他function都将作为这个类的实例方法。且这个方法的第一个参数必须是<code>self</code>，这就是Wax模仿Objective-C的面向对象的关键所在。
因此在Wax中调用方法要使用冒号，类似这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIApplication</span><span class="p">:</span><span class="n">sharedApplication</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实他就等同于这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">(</span><span class="n">UIApplication</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在调用含有多个参数的方法时候，使用<code>_</code>来代替OC中的:,例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">UIAlertView</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;title&quot;</span> <span class="nl">message:</span><span class="s">@&quot;message&quot;</span> <span class="nl">delegate:</span><span class="nb">nil</span><span class="p">];</span>  <span class="c1">//OC方式</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIAlertView</span><span class="p">:</span><span class="n">initWithTitle_message_delegate</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">title&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">message&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>    <span class="c1">--Wax 方式</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>Wax</code>创建对象不需要你<code>alloc</code>，因为他会帮你实现内存管理，它是怎么实现的稍后再说。</p>

<p><code>Wax</code>不支持属性Property，因此你不能使用OC中的点语法，<code>Wax</code>要求Lua与OC的通信必须通过方法来完成，就是如果你要访问一个Property的话就只能使用它的<code>setter</code>和<code>getter</code>方法。
如果你在脚本中使用了点语法，那么你将为这个对象创建一个实例变量，但这只是在Lua层面的，在OC层面它并不知道你创建了这样一个实例变量。</p>

<p><code>Wax</code>会强制的把OC的对象转换成Lua的对象，同时他也支持反向转化，比如一个方法需要<code>NSString</code>类型的参数，你可以直接传递Lua的字符串进去。
有时你不想让OC对象被强制转化成Lua的，它也提供了相应变回OC对象的方法。</p>

<p><code>Wax</code>对枚举和结构的支持并不是很好，就是它需要把你需要用到的枚举和结构都按照他定义好的格式添加到<code>APP_ROOT/wax/stdlib/enums.lua和APP_ROOT/wax/wax-scripts/structs.lua</code>中，只有这样你才能正常的使用它们。</p>

<p><code>Wax</code>对协议的支持也不是很好，有的协议在<code>Wax</code>中可以正常使用，有的则不可以，你在源文件中会看到ProtocolLoader.h这样一个文件，他需要把不支持的协议预先加载到runtime中，作者自己也不知道这是为什么，也许是一个他不知道的runtime method。</p>

<p><code>Wax</code>也是不支持分类的，不过这个使用的比较少，不支持也没有什么。</p>

<h3>Wax Lua 实现原理</h3>

<p>我们知道OC是一门动态语言，他的<code>runtime</code>很强大，强大到你可以在运行时动态的创建一个类，而<code>Wax</code>真是借助于OC的<code>runtime</code>实现了它一系列的功能。
目前我们在使用的<code>CCLuaObjcBridge</code>，这个类也是实现了Lua调用OC的方法，他借助的也是<code>runtime</code>，但是跟<code>Wax</code>比起来，他就简单了很多，从他的限制就能看出来，它只支持类的静态方法，方法只能有一个参数，不能创建对象，不能调用实例方法。它的实现是这样的：通过类名找到类对象，通过预先定义好的只能包含一个参数或没有参数的方法名生成<code>selector</code>，再根据类对象和<code>selector</code>生成<code>NSMethodSignature</code>，进而由NSMethodSignature生成NSInvocation，进行方法调用，再加上参数和返回值的Lua与OC的类型转换，就完成了一次OC方法的调用。</p>

<p>下面再说一下<code>Wax</code>。<code>Wax</code>的源码中有这样一个文件<code>wax_helpers.h/wax_helpers.m</code>，它提供了一系列的工具方法包括lua与OC的类型之间相互转化，lua中使用_的方法名转化为OC中:的selector，根据lua传递过来的方法名找到对应的<code>selector</code>等方法，有兴趣的同学可以去看看代码。</p>

<p><code>Wax</code>主要是维护了这样的一个结构，基本上所有与对象有关的操作都是在这个基础上完成的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_wax_instance_userdata</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">id</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'>      <span class="n">BOOL</span> <span class="n">isClass</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">isSuper</span><span class="p">;</span> <span class="c1">// isSuper not only stores whether the class is a super, but it also contains the value of the next superClass.</span>
</span><span class='line'>      <span class="n">BOOL</span> <span class="n">actAsSuper</span><span class="p">;</span> <span class="c1">// It only acts like a super once, when it is called for the first time.</span>
</span><span class='line'><span class="p">}</span> <span class="n">wax_instance_userdata</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个<code>instance</code>就是OC对象的一个指针，<code>isClass</code>标识这是不是一个类对象，<code>isSuper</code>用来标识他的父对象，类似以OC中的<code>isa</code>指针，这么做是为了在方法调用时子类如果找不到的话就会由此去父类查找，<code>actAsSuper</code>用来标识这个对象是不是被当做父类来使用，<code>Wax</code>中一个对象智能被当做父类一次。</p>

<p><code>Wax</code>中还维护了两个表，一个<code>UserDataTable</code>一个<code>StrongUserDataTable</code>。这两个表中都存储的是<code>Wax_instance_userdata-&gt;instance</code>为<code>key</code>，<code>Wax_instance_userdata</code>为值的键值对。 <code>UserDataTable</code>是一个值为wake的弱表，他用来存储所有创建的对象，是一个弱引用，他其中就存储了通过lua创建的OC对象，因为是弱表，所以当不在使用时会调用<code>__gc</code>这个元方法，进而将该OC对象销毁。<code>StrongUserDataTable</code>是一个强引用表他保存的是所有通过<code>Wax</code>创建的对象，他不是一个弱表所以需要手动管理内存。也就是说使用<code>Wax</code>创建的对象除了会在<code>UserDataTable</code>中保存一份以外还会在<code>StrongUserDataTable</code>保存一份。</p>

<p>说到这里就在说一下<code>Wax</code>的内存管理，<code>Wax</code>的内存管理也是基于引用计数的，而且他没有使用<code>AutoReleasePool</code>。所有引用计数的操作都在框架里为你实现好了，所以在lua里你不能调用<code>alloc</code>方法，而要直接使用<code>init</code>方法，因为他会判断你的方法是不是<code>init</code>初始化方法，如果是的话<code>Wax</code>会帮你调用<code>alloc</code>方法。对象的<code>release</code>有两种一种是<code>UserDataTable</code>中的对象会在<code>__gc</code>元方法中<code>release</code>，另外一种就是在<code>Wax</code>运行的时候有一个定时器timer，不停地轮询<code>StrongUserDataTable</code>中的对象的引用计数如果小于2，那么就会<code>release</code>。</p>

<p><code>Wax</code>创建类和对象以及方法调用都是通过元方法来实现的。
先来说创建类，就是通过定义的类名以及父类，在运行时通过字符串以及运行时的API创建一个类，通过<code>class_addMethod（）</code>函数给创建的这个类注册方法，而这个方法的实现就是一个IMP（函数指针），Wax中IMP是这样的一类方法，方法包括lua中用户自己写的function，在OC的层面又对这个function的参数和返回值进行了OC与lua的互转，这两部分组合起来构成一个方法。也就是当调用一个用lua写的方法的时候会首先把参数转化为lua类型然后由<code>lua_pcall（）</code>调用lua中的方法，完成后再把返回值转换成OC类型的。</p>

<p>最后说一下<code>Wax</code>的方法调用，无论是OC自己的方法还是用户自己写的方法最终都是去调用这个IMP（函数指针），所以在这之前无论是调用OC原生的方法和用户自己定义的方法，处理的方式都是一样的。在元方法<code>__index</code>里将方法的调用作为一个closure push到lua中，在元方法<code>__newindex</code>中进行方法的override。在closure中的方法调用就和<code>CCLuaObjcBridge</code>一样了，都是先获取到<code>selector</code>，生成<code>NSMethodSignature</code>，然后生成<code>NSInvocation</code>，然后调用。与<code>CCLuaObjcBridge</code>不同的地方就是由于这个对象是<code>wax_instance_userdata</code>中的<code>instance</code>，而不是由类名生成的类对象，所以他可以调用实例方法。</p>

<p>以上仅是个人一些理解，自身对Lua的C API和OC的runtime的API不是很熟悉，<code>Wax</code>中使用了大量的这些API，所以有不对的地方还请指出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入门bash shell脚本]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/05/02/start-write-shell/"/>
    <updated>2013-05-02T15:15:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/05/02/start-write-shell</id>
    <content type="html"><![CDATA[<p>在进行批量的操作，或者繁琐的操作时，可以使用<code>shell</code>编写脚本来简化操作。我使用过众多别人编写的脚本，但是自己从来没有写过。今天正好碰到一个问题，不想繁琐的去挨个操作，那么就尝试着写一个脚本来方便操作一下吧。</p>

<p>首先说一下自己遇到的问题，今年去参加了<code>CocoaChina开发者大会</code>，会上的<code>PPT</code>很好，今天在网上把他们下载了下来，但是问题是，他们的命名很长而且前一部分都是一样的，类似于"CocoaChina2013开发者大会-……"，前一部分都是重的，在<code>Finder</code>里看起来很是不方便，根本看不到有用的文件名信息，所以我决定要把这十多个文件重命名去掉前缀。</p>

<p>从来没有编写过<code>shell</code>脚本，向来都是使用<code>shell</code>命令的我，先从学习编写<code>shell</code>脚本文件开始吧！</p>

<!-- More -->


<p>在文本编辑器中第一行（必须是第一行）首先键入<code>#!/bin/sh</code>，符号<code>#!</code>用来告诉系统它后面的参数是用来执行该文件的程序。</p>

<h4>注释</h4>

<p>在<code>shell</code>中<code>#</code>代表注释，直到这一行结束。</p>

<h4>变量</h4>

<p>在<code>shell</code>中，变量都由字符串组成，变量名无需提前声明，写了就可以直接赋值，<code>变量名=值</code>(这里等号两边一定不能有空格)。
取变量时要使用<code>$</code>符号。有时在一长串字符串中包含变量，可以对变量名加上<code>{}</code>来区分。例如有一个变量<code>num=2</code>
<code>echo "this is the $numnd"</code>，这样会有问题，我们要写成<code>echo "this is the ${num}nd"</code>。</p>

<h4>流程控制</h4>

<p>只写一下本次用到的<code>for</code>循环，其他的流程控制以后用到时在学习。
for-loop表达式查看一个字符串列表 (字符串用空格分隔) 然后将其赋给一个变量：
for var in &hellip;.; do
　 &hellip;.
done
在下面的例子中，将分别打印ABC到屏幕上：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="k">for </span>var in A B C ; <span class="k">do</span>
</span><span class='line'>　 <span class="nb">echo</span> <span class="s2">&quot;var is $var&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里参考的文章是<a href="http://blog.csdn.net/fpmystar/article/details/4183678">Linux shell脚本编写基础</a></p>

<p>在我写的<code>shell</code>脚本中则是使用循环输出当前文件夹下文件的名字：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="k">for </span>aFile in *; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">tmpFile</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$aFile</span><span class="sb">`</span>
</span><span class='line'>    <span class="nb">echo</span> 原文件名：<span class="k">${</span><span class="nv">tmpFile</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来就是对获取到的每一个文件名的字符串进行截取，删掉不需要的部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="k">for </span>aFile in *; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">tmpFile</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$aFile</span><span class="sb">`</span>
</span><span class='line'>    <span class="nv">newName</span><span class="o">=</span><span class="k">${</span><span class="nv">tmpFile</span><span class="p">#C*-</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 原文件名：<span class="k">${</span><span class="nv">tmpFile</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 新文件名：<span class="k">${</span><span class="nv">newName</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里学习了一下<code>shell</code>字符串的操作知识，<code>:</code>选取子串 <code>#</code>正向截取子串 <code>%</code>逆向截取子串 <code>##</code>正向最长匹配 <code>%%</code>逆向最长匹配。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">str</span><span class="o">=</span><span class="s2">&quot;abcdef&quot;</span>
</span><span class='line'>expr substr <span class="s2">&quot;$str&quot;</span> 1 3  <span class="c"># 从第一个位置开始取3个字符， abc</span>
</span><span class='line'>expr substr <span class="s2">&quot;$str&quot;</span> 2 5  <span class="c"># 从第二个位置开始取5个字符， bcdef </span>
</span><span class='line'>expr substr <span class="s2">&quot;$str&quot;</span> 4 5  <span class="c"># 从第四个位置开始取5个字符， def</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">:</span><span class="nv">2</span><span class="k">}</span>           <span class="c"># 从第二个位置开始提取字符串， bcdef</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">:</span><span class="nv">2</span><span class="p">:</span><span class="nv">3</span><span class="k">}</span>         <span class="c"># 从第二个位置开始提取3个字符, bcd</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">:(-2)</span><span class="k">}</span>        <span class="c"># 从倒数第二个位置向左提取字符串, abcde</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">:(-2):</span><span class="nv">3</span><span class="k">}</span>      <span class="c"># 从倒数第二个位置向左提取3个字符, cde</span>
</span><span class='line'>
</span><span class='line'><span class="nv">str</span><span class="o">=</span><span class="s2">&quot;abbc,def,ghi,abcjkl&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">#a*c</span><span class="k">}</span>         <span class="c"># ,def,ghi,abcjkl  一个井号(#) 表示从左边截取掉最短的匹配 (这里把abbc字串去掉）</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">##a*c</span><span class="k">}</span>        <span class="c"># jkl，             两个井号(##) 表示从左边截取掉最长的匹配 (这里把abbc,def,ghi,abc字串去掉)</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">#</span><span class="s2">&quot;a*c&quot;</span><span class="k">}</span>       <span class="c"># 空,因为str中没有子串&quot;a*c&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$[</span>str##<span class="s2">&quot;a*c&quot;</span><span class="o">}</span>      <span class="c"># 空,同理</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">str</span><span class="p">#d*f)         # abbc,def,ghi,abcjkl, </span>
</span><span class='line'><span class="p">echo </span><span class="k">${</span><span class="nv">str</span><span class="p">#*d*f</span><span class="k">}</span><span class="p">        # ,ghi,abcjkl   </span>
</span><span class='line'>
</span><span class='line'><span class="p">echo </span><span class="k">${</span><span class="nv">str</span><span class="p">%a*l</span><span class="k">}</span><span class="p">         # abbc,def,ghi  一个百分号(%)表示从右边截取最短的匹配 </span>
</span><span class='line'><span class="p">echo </span><span class="k">${</span><span class="nv">str</span><span class="p">%%b*l</span><span class="k">}</span><span class="p">        # a             两个百分号表示(%%)表示从右边截取最长的匹配</span>
</span><span class='line'><span class="p">echo </span><span class="k">${</span><span class="nv">str</span><span class="p">%a*c</span><span class="k">}</span><span class="p">         # abbc,def,ghi,abcjkl  </span>
</span></code></pre></td></tr></table></div></figure>


<p>这里参考的文章<a href="http://my.oschina.net/aiguozhe/blog/41557">Bash Shell字符串操作小结</a></p>

<p>最后就是将文件重命名了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="k">for </span>aFile in *; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">tmpFile</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$aFile</span><span class="sb">`</span>
</span><span class='line'>    <span class="nv">newName</span><span class="o">=</span><span class="k">${</span><span class="nv">tmpFile</span><span class="p">#C*-</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 原文件名：<span class="k">${</span><span class="nv">tmpFile</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 新文件名：<span class="k">${</span><span class="nv">newName</span><span class="k">}</span>
</span><span class='line'>    mv <span class="nv">$tmpFile</span> <span class="nv">$newName</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行时发现只有部分文件被成功重命名了，其余的都不成功，而这些不成功的文件名中都包含空格，空格是很大一个问题，在获取原文件名时文件名就被空格截断了，导致文件名不全。因而重命名也是失败的，找不到源文件。
参考这篇文章<a href="http://www.cnblogs.com/cocowool/archive/2013/01/15/2861904.html">SHELL技巧：处理文件名中的那些空格</a>
找到了解决方法，对变量添加<code>""</code>使空格被正确处理，这不是最好的方法，但是在我这个小小的脚本中完全可以了。</p>

<p>文章中还介绍了一种终极解决方法就是设置<code>IFS(the Internal Field Separator)</code>，但是在设置之前先保存当前的<code>IFS</code>，操作完成之后在设置回去。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">SAVEIFS</span><span class="o">=</span><span class="nv">$IFS</span>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> -en <span class="s2">&quot;\n\b&quot;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#进行操作</span>
</span><span class='line'>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="nv">$SAVEIFS</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是我这样使用之后经过测试发现，并不能解决问题，文件名被读取成其他怪异的形式了，空格是被正常读取了但是<code>-</code>也被读取成空格了，我不知道这是为什么，有知道的欢迎告诉我。</p>

<p>最后附上自己写的完整的<code>shell</code>脚本，虽然很短，但这是第一次写，也算是个入门吧。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c">#===============将文件名的前缀部分去掉=============</span>
</span><span class='line'><span class="c">#====处理文件名中带空格的问题，先保存$IFS变量，经测试这么做还是会有问题部分字符会丢失</span>
</span><span class='line'><span class="c">#SAVEIFS=$IFS</span>
</span><span class='line'><span class="c">#IFS=$(echo -en &quot;\n\b&quot;)</span>
</span><span class='line'><span class="k">for </span>aFile in *; <span class="k">do</span>
</span><span class='line'>    <span class="c">#对变量加上双引号会避免文件名中有空格的问题</span>
</span><span class='line'>    <span class="nv">tmpFile</span><span class="o">=</span><span class="sb">`</span>basename <span class="s2">&quot;$aFile&quot;</span><span class="sb">`</span>
</span><span class='line'>    <span class="c">#截取文件名字符串中的前一部分</span>
</span><span class='line'>    <span class="nv">newName</span><span class="o">=</span><span class="k">${</span><span class="nv">tmpFile</span><span class="p">#C*-</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 原文件名：<span class="k">${</span><span class="nv">tmpFile</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> 新文件名：<span class="k">${</span><span class="nv">newName</span><span class="k">}</span>
</span><span class='line'>    <span class="c">#对文件进行重命名</span>
</span><span class='line'>    mv <span class="s2">&quot;$tmpFile&quot;</span> <span class="s2">&quot;$newName&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="c">#=====将$IFS恢复为原来的状态</span>
</span><span class='line'><span class="c">#IFS=$SAVEIFS</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结一下需要注意的地方</h3>

<ol>
<li>在写<code>shell</code>脚本时不能延续写其他代码乱加空格的习惯，空格在<code>shell</code>中很重要，随便加空格会导致<code>shell</code>脚本执行失败。</li>
<li>还是空格问题，使用<code>basename</code>命令时，获取到的文件名如果有空格的话将不会获取之后部分，可以对变量添加<code>""</code>解决问题。</li>
<li><code>cp</code> <code>mv</code>等命令要求文件命中同样不能有空格，也可以在脚本中对变量添加<code>""</code>解决。</li>
<li>刚开始写<code>shell</code>脚本时最好写一句测试一句，要严谨不能想当然。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23种设计模式——策略模式]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/31/strategy/"/>
    <updated>2013-03-31T20:46:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/31/strategy</id>
    <content type="html"><![CDATA[<p>这次介绍一下<code>策略模式（Strategy Pattern）</code>，相比之下是一种比较简单的模式。它也叫<code>政策模式（Policy Pattern）</code>。
<code>策略模式</code>使用的就是面向对象的<code>继承</code>和<code>多态</code>机制，其他的没有什么玄机。<code>策略模式</code>适合使用在：
1. 多个类只有在算法或行为上稍有不同的场景。
2. 算法需要自由切换的场景。
3. 需要屏蔽算法规则的场景。
使用<code>策略模式</code>当然也有需要注意的地方，那么就是策略类不要太多，如果一个策略家族的具体策略数量超过4个，则需要考虑<code>混合模式</code>，解决策略类膨胀和对外暴露问题。在实际项目中，我们一般通过<code>工厂方法模式</code>来实现策略类的声明。</p>

<p>下面我们就来具体讲解一下<code>策略模式</code>。</p>

<h4>策略模式定义</h4>

<p><code>Define a family of algorithms, encapsulate each one, and make them interchangeable.(定义一组算法，将每个算法都封装起来，并且是它们之间可以互换。)</code></p>

<!-- More -->


<h4>策略模式类图</h4>

<p><img src="https://oac67o3cg.qnssl.com/1475114575.png"></p>

<h4>策略模式说明</h4>

<ul>
<li>Context封装角色
它也叫做上下文角色，起承上启下封装作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在变化。</li>
<li>Strategy抽象策略角色
策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。</li>
<li>ConcreteStrategy具体策略角色
实现抽象策略中的操作，该类含有具体的算法。</li>
</ul>


<h4>策略模式优点</h4>

<ol>
<li>算法可以自由切换。</li>
<li>避免使用多重条件判断。</li>
<li>扩展性良好。</li>
</ol>


<h4>策略模式缺点</h4>

<ol>
<li>策略类数量增多
每一个策略都是一个类，复用的可能性很小，类数量增多。</li>
<li>所有的策略类都需要对外暴露
上层模块必须知道有哪些策略，然后才能决定使用哪一个策略，这与<code>迪米特法则</code>是相违背的。</li>
</ol>


<h4>策略模式的objective-C实现</h4>

<figure class='code'><figcaption><span>Strategy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="c1">//定义接口</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">TransportStrategy</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">travelling</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ConcreteStrategy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;TransportStrategy.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Car</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">TransportStrategy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Car</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">travelling</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;travelling by car.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Bicycle</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">TransportStrategy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Bicycle</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">travelling</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;travelling by bicycle.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Train</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">TransportStrategy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Train</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">travelling</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;travelling by train.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Context </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;TransportStrategy.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">travel:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TransportStrategy</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">transport</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">travel:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TransportStrategy</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">transport</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">transport</span> <span class="n">travelling</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Car.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Bicycle.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Train.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Person.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Car</span> <span class="o">*</span><span class="n">car</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Car</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Bicycle</span> <span class="o">*</span><span class="n">bicycle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Bicycle</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Train</span> <span class="o">*</span><span class="n">train</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Train</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">person</span> <span class="nl">travel</span><span class="p">:</span><span class="n">car</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">person</span> <span class="nl">travel</span><span class="p">:</span><span class="n">bicycle</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">person</span> <span class="nl">travel</span><span class="p">:</span><span class="n">train</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果禁止使用UDID的解决方案]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/23/deviceuniqueidentifier/"/>
    <updated>2013-03-23T16:42:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/23/deviceuniqueidentifier</id>
    <content type="html"><![CDATA[<p><code>UDID</code>之前在<code>iOS</code>开发中广泛使用的一串字符串，用来标示唯一的设备，它本身并不包含用户信息，但是广告商却可以利用他获取到个人信息，从而发送广告，因为他涉及到隐私问题，所以苹果早在2011年就提出了将不再使用它。然而就在前天，苹果的开发者网站，发出新闻：</p>

<blockquote><p>Starting May 1, the App Store will no longer accept new apps or app updates that access UDIDs. Please update your apps and servers to associate users with the Vendor or Advertising identifiers introduced in iOS 6. You can find more details in the <a href="https://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/DeprecationAppendix/AppendixADeprecatedAPI.html">UIDevice Class Reference</a>.</p></blockquote>

<p>“自5月1日起，App Store将不再接受任何使用UDID的app，苹果建议开发者转用iOS 6 引进的Vendor 或者 Adverstising Identifier（‘广告标识符’）”
这次苹果打出了强制通知，再使用<code>UDID</code>的话，那么应用将不会审核通过，也就无法发布。</p>

<p>不过俗话说的好“上有政策，下有对策”。虽然苹果自己也给出了替代的方法，但他们都不是最好的，<code>UUID</code>每次获取都不同，所以使用时必须要把他们存文件，存数据库或者存<code>UserDefault</code>。当应用被删除重装，那么这个<code>UUID</code>也就不同了。<code>Vendor</code>更是同一个设备上的同一个开发商的应用的<code>id</code>都是相同的，也没有办法使用。<code>Advertising identifier</code>也并不是固定的。那要如何才能达到我们的需求呢，既能方便获取又能保证唯一呢？</p>

<!-- More -->


<p>答案就是<code>MAC</code>地址，<code>MAC</code>地址在网络上用来区分设备的唯一性，接入网络的设备都有一个<code>MAC</code>地址，他们肯定都是不同的，是唯一的。一部<code>iPhone</code>上可能有多个<code>MAC</code>地址，包括<code>WIFI</code>的、<code>SIM</code>的等，但是<code>iTouch</code>和<code>iPad</code>上就有一个<code>WIFI</code>的，因此只需获取<code>WIFI</code>的<code>MAC</code>地址就好了，也就是<code>en0</code>的地址。直接把<code>MAC</code>地址拿出来使用是不安全的，因此对他们做一次<code>hash</code>计算，<code>MD5</code>就是一种哈希算法，对得到的<code>MAC</code>地址计算一下他的<code>MD5</code>值就好了，那么这样拿到的就是这个设备唯一的<code>ID</code>了。有时我们为了区分设备上的应用，也可以获取到应用的<code>bundleID</code>，在和<code>MAC</code>地址结合起来计算一下<code>MD5</code>，那么该值就是可以区分设备上应用的ID了。</p>

<p>首先是<code>MD5</code>，为<code>NSString</code>添加<code>MD5</code>方法：</p>

<figure class='code'><figcaption><span>NSString+MD5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  NSString+MD5.h</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by wtlucky on 12-12-2.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">NSString</span> <span class="nl">(MD5)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">MD5</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">MD5ByAStr:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aSourceStr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;CommonCrypto/CommonDigest.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="nl">(MD5)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">MD5</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">MD5ByAStr:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">MD5ByAStr:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aSourceStr</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">aSourceStr</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">result</span><span class="p">[</span><span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CC_MD5</span><span class="p">(</span><span class="n">cStr</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">cStr</span><span class="p">),</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nl">stringWithCapacity:</span><span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">ret</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02x&quot;</span><span class="p">,</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是获得唯一ID，为<code>UIDevice</code>添加方法：</p>

<figure class='code'><figcaption><span>UIDevice+UniqueIdentifier </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  UIDevice+UniqueIdentifier.h</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by wtlucky on 13-3-22.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2013年 AlphaStudio. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UIDevice</span> <span class="nl">(UniqueIdentifier)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   返回针对与一个应用的唯一ID</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @return 针对与一个应用的唯一ID</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uniqueDeviceIdentifier</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   返回设备的唯一ID</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @return 设备的唯一ID</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uniqueGlobalDeviceIdentifier</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;NSString+MD5.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;sys/sysctl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;net/if.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;net/if_dl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UIDevice</span> <span class="nl">(private)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">macAddress</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIDevice</span> <span class="nl">(UniqueIdentifier)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">macAddress</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span>                 <span class="n">mib</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>    <span class="n">size_t</span>              <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span>                <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span>       <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">if_msghdr</span>    <span class="o">*</span><span class="n">ifm</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_dl</span>  <span class="o">*</span><span class="n">sdl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mib</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">CTL_NET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mib</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">AF_ROUTE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mib</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mib</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">AF_LINK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mib</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">NET_RT_IFLIST</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">mib</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">if_nametoindex</span><span class="p">(</span><span class="s">&quot;en0&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Error: if_nametoindex error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sysctl</span><span class="p">(</span><span class="n">mib</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Error: sysctl, take 1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">len</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could not allocate memory. error!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sysctl</span><span class="p">(</span><span class="n">mib</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Error: sysctl, take 2&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ifm</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">if_msghdr</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sdl</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_dl</span> <span class="o">*</span><span class="p">)(</span><span class="n">ifm</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">LLADDR</span><span class="p">(</span><span class="n">sdl</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">outstring</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%02X:%02X:%02X:%02X:%02X:%02X&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">3</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">4</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">5</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">outstring</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uniqueDeviceIdentifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">macAddress</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">macAddress</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">bundleIdentifier</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleIdentifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">stringToHash</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@%@&quot;</span><span class="p">,</span> <span class="n">macAddress</span><span class="p">,</span> <span class="n">bundleIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">uniqueIdentifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">stringToHash</span> <span class="n">MD5</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">uniqueIdentifier</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uniqueGlobalDeviceIdentifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">macAddress</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">macAddress</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">uniqueGlobalIdentifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">macAddress</span> <span class="n">MD5</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">uniqueGlobalIdentifier</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一来，在使用时就相当方便了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23种设计模式——适配器模式]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/23/adapter/"/>
    <updated>2013-03-23T14:13:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/23/adapter</id>
    <content type="html"><![CDATA[<p>今天要介绍的是<code>适配器模式（Adapter Pattern）</code>，适配器模式又叫做<code>变压器模式</code>，也叫做<code>包装模式（Wrapper）</code>，但是<code>包装模式</code>却不止一个，<code>装饰模式</code>也是<code>包装模式</code>，以后会介绍到。适配器模式是一种补救模式，他可以让你从因业务扩展而系统无法迅速适应的苦恼中解脱出来。我们在进行系统开发时，不管之前的可行性分析、需求分析、系统设计处理的多么完美，总会在关键时候、关键场合出现一些“意外”。这些“意外”，该来的还是要来，躲是躲不过的，而这时就是我们的<code>适配器模式</code>的用武之地。<code>适配器模式</code>最好在设计阶段不要考虑它，它不是为了解决还处在开发阶段的问题，而是解决正在服役的项目问题，没有一个系统分析师会再做详细设计时考虑使用<code>适配器模式</code>。</p>

<p><code>适配器模式</code>包含两种，一种是<code>类适配器</code>，另一种是<code>对象适配器</code>。<code>类适配器</code>是通过类的继承实现的适配，而<code>对象适配器</code>是通过对象间的关联关系，组合关系实现的适配。二者在实际项目中都会经常用到，由于<code>对象适配器</code>是通过类间的关联关系进行耦合的，因此在设计时就可以做到比较灵活，而<code>类适配器</code>就只能通过覆写源角色的方法进行拓展，在实际项目中，<code>对象适配器</code>使用到的场景相对较多。在<code>iOS</code>开发中也推荐多使用组合关系，而尽量减少继承关系，这是一种很好的编程习惯，因此我在这里只介绍<code>对象适配器</code>，想了解更多的关于<code>类适配器</code>的话，请自行<code>Google</code>之。</p>

<h4>适配器模式定义</h4>

<p><code>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.(将一个类的接口变成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。)</code></p>

<!-- More -->


<h4>适配器模式类图</h4>

<p><img src="https://oac67o3cg.qnssl.com/1475114532.png"></p>

<h4>适配器模式说明</h4>

<ul>
<li>Target目标角色
该角色定义把其他类转换为何种接口，也就是我们的期望接口。</li>
<li>Adaptee源角色
你想把“谁”转换成目标角色，这个“谁”就是源角色，它是已经存在的、运行良好的类或对象。</li>
<li>Adapter适配器角色
适配器模式的核心角色，其他两个角色都是已经存在的角色，而适配器角色是需要新建立的，他的职责非常简单：把源角色转换为目标角色。</li>
</ul>


<h4>适配器模式优点</h4>

<ol>
<li>适配器模式可以让两个没有任何关系的类在一起运行，只要适配器这个角色能够搞定他们就成。</li>
<li>增加了类的透明性。我们访问的是目标角色，但是实现却在源角色里。</li>
<li>提高了类的复用度。源角色在原有系统中还是可以正常使用的。</li>
<li>灵活性非常好。不想要适配器时，删掉这个适配器就好了，其他代码不用改。</li>
</ol>


<h4>适配器模式的objective-C实现</h4>

<figure class='code'><figcaption><span>Target </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">Target</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">userExpectInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Adaptee </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Adaptee</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSometing</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Adaptee</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSometing</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;adaptee doing something!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Adapter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Target.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Adaptee.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Adapter</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">Adaptee</span> <span class="o">*</span><span class="n">adaptee</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithAdaptee:</span><span class="p">(</span><span class="n">Adaptee</span> <span class="o">*</span><span class="p">)</span><span class="nv">adaptee</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Adapter</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">adaptee</span> <span class="o">=</span> <span class="n">_adaptee</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithAdaptee:</span><span class="p">(</span><span class="n">Adaptee</span> <span class="o">*</span><span class="p">)</span><span class="nv">adaptee</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_adaptee</span> <span class="o">=</span> <span class="n">adaptee</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">userExpectInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">adaptee</span> <span class="n">doSometing</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Adapter.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Adaptee.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Target.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Adaptee</span> <span class="o">*</span><span class="n">adaptee</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Adaptee</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">id</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span> <span class="n">object</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Adapter</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithAdaptee</span><span class="p">:</span><span class="n">adaptee</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">object</span> <span class="n">userExpectInterface</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23种设计模式——观察者模式]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/20/observer/"/>
    <updated>2013-03-20T21:04:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/20/observer</id>
    <content type="html"><![CDATA[<p>这次来介绍一下观察者模式，这种模式可以说使用的是最多的，也最常见。我们现在使用的智能手机的应用在本质上也都是观察者模式的一种体现，这些手机应用都是事件驱动机制，只要有事件发生，就会做出一系列的响应处理，在没有事件的时候，什么也不会发生。这就是观察者模式，观察者模式需要一个被观察者，和一个或者多个观察者。当被观察者的状态发生改变时，观察者会做出相应的处理。</p>

<h4>观察者模式定义</h4>

<p>观察者模式（Observer Pattern）也叫做发布订阅模式（Publish/subscribe）。
<code>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.(定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于他的对象都会得到通知并被自动更新。)</code></p>

<!-- More -->


<h4>观察者模式类图</h4>

<p><img src="https://oac67o3cg.qnssl.com/1475114496.png"></p>

<h4>观察者模式说明</h4>

<ul>
<li>Subject被观察者
定义被观察者必须实现的职责，它必须能够动态的增加、取消观察者。它一般是抽象类或者是实现类，仅仅完成作为被观察者必须实现的职责：管理观察者并通知观察者。</li>
<li>Observer观察者
观察者接收到消息后，即进行update（更新方法）操作，对接收到的信息进行处理。</li>
<li>ConcreteSubject具体的被观察者
定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。</li>
<li>ConcreteObserver具体的观察者
每个观察者在接收到消息后的处理反应应是不同的，各个观察者有自己的处理逻辑。</li>
</ul>


<h4>观察者模式的优点</h4>

<ol>
<li>观察者和被观察者之间是抽象耦合</li>
<li>建立一套触法机制</li>
</ol>


<h4>观察者模式的缺点</h4>

<p>观察者模式需要考虑开发效率和运行效率的问题。</p>

<h4>观察者模式在iOS中的应用</h4>

<p>观察者模式在iOS中的应用我知道主要有两个，一个是消息中心(<code>NSNotificitonCenter</code>)，他并不是严格意义上的观察者模式，但是很类似，首先将观察者注册到消息中心，被观察者可以向消息中心发送消息通知给观察者，从而产生相应的逻辑。再有一个就是<code>Cocoa</code>的<code>KVO</code>机制，也就是<code>Key Value Observer</code>，他可以检测一个对象的某一个属性，当他发生改变时，观察者自动的去调用相应的方法。</p>

<p>下面附上一个用<code>objective-C</code>写的类似的一个观察者模式的小程序：</p>

<figure class='code'><figcaption><span>Student </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Student</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">Ttel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aName</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updatePhone:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aTel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Student</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">Ttel</span> <span class="o">=</span> <span class="n">_Ttel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_name</span> <span class="o">=</span> <span class="n">aName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updatePhone:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aTel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">Ttel</span> <span class="o">=</span> <span class="n">aTel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Teacher </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Teacher</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">tel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">observers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWtihName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aName</span> <span class="nf">andTel:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aTel</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aObserver</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aObserver</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">noticeObservers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;Student.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Teacher</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">tel</span> <span class="o">=</span> <span class="n">_tel</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">observers</span> <span class="o">=</span> <span class="n">_observers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWtihName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aName</span> <span class="nf">andTel:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aTel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_name</span> <span class="o">=</span> <span class="n">aName</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_tel</span> <span class="o">=</span> <span class="n">aTel</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_observers</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aObserver</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_observers</span> <span class="nl">addObject:</span><span class="n">aObserver</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aObserver</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_observers</span> <span class="nl">removeObject:</span><span class="n">aObserver</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">noticeObservers</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">observers</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">updatePhone:</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">obj</span> <span class="nl">updatePhone:</span><span class="n">_tel</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Student.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Teacher.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// insert code here...</span>
</span><span class='line'>        <span class="n">Teacher</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Teacher</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWtihName</span><span class="p">:</span><span class="s">@&quot;teacher&quot;</span> <span class="nl">andTel</span><span class="p">:</span><span class="s">@&quot;123456&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Student</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Student</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithName</span><span class="p">:</span><span class="s">@&quot;Student1&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Student</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Student</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithName</span><span class="p">:</span><span class="s">@&quot;Student2&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">t</span> <span class="nl">addObserver</span><span class="p">:</span><span class="n">s1</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">t</span> <span class="nl">addObserver</span><span class="p">:</span><span class="n">s2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">.</span><span class="n">Ttel</span><span class="p">,</span> <span class="n">s2</span><span class="p">.</span><span class="n">Ttel</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">tel</span> <span class="o">=</span> <span class="s">@&quot;654321&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">t</span> <span class="n">noticeObservers</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">.</span><span class="n">Ttel</span><span class="p">,</span> <span class="n">s2</span><span class="p">.</span><span class="n">Ttel</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>例子很简单就是老师将电话号码留给同学们，当老师电话号码改变时，同学们自动的也会将老师的电话号码改变。其实写的并不好，最好还是定义两个<code>Protocol</code>，一个是<code>Observer</code>一个是<code>Subject</code>，然后老师和学生分别遵循<code>Observer</code>和<code>Subject</code>协议，这样的话就比较好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23种设计模式——单例模式]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/19/singleton/"/>
    <updated>2013-03-19T19:35:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/19/singleton</id>
    <content type="html"><![CDATA[<p>本学期开了一门课程叫做《软件体系结构》，讲的主要是设计模式的东西，而我在之前也看过设计模式的书，正好借此机会来整理一下自己所学到的知识，因为自己在做<code>iOS</code>开发，所以基本上这23种设计模式我都通过<code>objective-C</code>来实现了。此系列文章的类图都是来自<a href="http://book.douban.com/subject/4260618/">《设计模式之禅》</a>，有兴趣的同学可以去买这本书看。</p>

<p>话说，在编码编到一定的程度以后，由于代码体系的庞大，结构的复杂，自然就会上升到设计模式高度，而现在的软件设计又基本都是面向对象的，所以有了设计模式作支持，可以使软件更加的稳定安全，也更易于维护与拓展。</p>

<p>首先来介绍最常用最简单的单例模式（Singleton），在以后的文章中再依次介绍其他的模式。</p>

<h4>单例模式定义</h4>

<p><code>Ensure a class has only one instance, and provide a global point of access to it. (确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。)</code></p>

<!-- More -->


<h4>单例模式类图</h4>

<p><img src="https://oac67o3cg.qnssl.com/1475114445.png"></p>

<h4>单例模式介绍</h4>

<p>单例模式确保在一个应用中只产生一个实例，这是很有必要的，因为在我们做软件设计的时候，有很多对象都是只需要一个就可以了，而不需要创建众多的对象，这样最显而易见的就是节省了内存空间。而且避免了这个类的频繁的初始化与销毁。有时为了实现某一种功能与操作而创建的类（工具类）往往也不需要多个对象，使用单例模式再合适不过。再延伸一点，有时为了节省内存对一个对象进行复用的话也可以通过单例来实现，这在手机软件的开发中用得比较多，因为手机的内存实在是少得可怜。</p>

<h4>单例模式优点</h4>

<ol>
<li>正如前面说的，单例模式在内存中只有一个实例，减少了内存开支。特别是一个对象需要频繁的创建、销毁时，而创建与销毁的性能有无法优化，单例模式的优势就非常明显。</li>
<li>单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</li>
<li>单例模式可以避免对资源的多重占用。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li>
</ol>


<h4>单例模式缺点</h4>

<ol>
<li>单例模式一般没有接口，扩展很困难，除了修改代码基本上没有第二种途径实现。</li>
<li>单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的。</li>
<li>单例模式与单一职责原则有冲突。</li>
</ol>


<h4>单例模式在iOS中的使用</h4>

<p>单例模式在<code>iOS</code>开发中的使用还是蛮多的，许多<code>Foundation</code>、<code>Cocoa</code>和<code>UIKit</code>中的类都实现了单例模式，比如应用程序本身<code>UIApplication</code>、文件操作类<code>NSFileManager</code>、消息中心<code>NSNotificitonCenter</code>等系统都已经给我们实现单例，我们只需要使用就好了。在<code>iOS</code>中使用单例模式要使用类方法，通过类方法返回该类的唯一对象。</p>

<p>我知道的在<code>iOS</code>开发中实现单例模式主要有以下三种方式：</p>

<h5>第一种</h5>

<p>该方法是苹果的官方文档中写的一种方式，通过覆盖<code>NSObject</code>的部分方法实现，使该类无法<code>alloc</code>、<code>retain</code>、<code>release</code>。这是最麻烦的一种方法，也是最不好的一种方法。</p>

<figure class='code'><figcaption><span>Singleton </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">Singleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">Singleton</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">super</span> <span class="nl">allocWithZone</span><span class="p">:</span><span class="nb">NULL</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nf">retainCount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NSUIntegerMax</span><span class="p">;</span>  <span class="c1">//denotes an object that cannot be released</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">release</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//do nothing</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这种方式，使用静态成员维持了一个永久存在的对象，而且覆盖了<code>alloc</code>方法（<code>alloc</code>方法会调用<code>allocWithZone:</code>方法），并且也覆盖了所有与引用技术有关的方法，这都使这个对象不会被销毁。这样看上去基本实现了我们需要的，但是写起来麻烦不说，还有很大的一个问题，那就是多线程问题，如果是在多线程中那么该种方法就不能保证只产生一个对象了。所以这种方式只是介绍一下，并不推荐使用。</p>

<h5>第二种</h5>

<p>第二种跟第一种差不多，也是通过覆盖<code>NSObject</code>的方法实现的，但是它在第一种的基础上增加了多线程的处理，所以即使在多线程下，该种方法创建的对象也是唯一的。这种方法已经有大牛为我们写好了，全都都是通过<code>C</code>的宏定义<code>#define</code>出来了。现给出该头文件：</p>

<figure class='code'><figcaption><span> (SynthesizeSingleton.h)</span> <a href='http://blog.wtlucky.com/downloads/code/designPattern/SynthesizeSingleton.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  SynthesizeSingleton.h</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Modified by Karl Stenerud starting 16/04/2010.</span>
</span><span class='line'><span class="c1">// - Moved the swizzle code to allocWithZone so that non-default init methods may be</span>
</span><span class='line'><span class="c1">//   used to initialize the singleton.</span>
</span><span class='line'><span class="c1">// - Added &quot;lesser&quot; singleton which allows other instances besides sharedInstance to be created.</span>
</span><span class='line'><span class="c1">// - Added guard ifndef so that this file can be used in multiple library distributions.</span>
</span><span class='line'><span class="c1">// - Made singleton variable name class-specific so that it can be used on multiple classes</span>
</span><span class='line'><span class="c1">//   within the same compilation module.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Modified by CJ Hanson on 26/02/2010.</span>
</span><span class='line'><span class="c1">//  This version of Matt&#39;s code uses method_setImplementaiton() to dynamically</span>
</span><span class='line'><span class="c1">//  replace the +sharedInstance method with one that does not use @synchronized</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Based on code by Matt Gallagher from CocoaWithLove</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Matt Gallagher on 20/10/08.</span>
</span><span class='line'><span class="c1">//  Copyright 2009 Matt Gallagher. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Permission is given to use this source code file without charge in any</span>
</span><span class='line'><span class="c1">//  project, commercial or otherwise, entirely at your risk, with the condition</span>
</span><span class='line'><span class="c1">//  that any redistribution (in part or whole) of source code must retain</span>
</span><span class='line'><span class="c1">//  this copyright and permission notice. Attribution in compiled projects is</span>
</span><span class='line'><span class="c1">//  appreciated but not required.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef SYNTHESIZE_SINGLETON_FOR_CLASS</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Singleton</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Synthesize Singleton For Class</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Creates a singleton interface for the specified class with the following methods:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * + (MyClass*) sharedInstance;</span>
</span><span class='line'><span class="cm"> * + (void) purgeSharedInstance;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Calling sharedInstance will instantiate the class and swizzle some methods to ensure</span>
</span><span class='line'><span class="cm"> * that only a single instance ever exists.</span>
</span><span class='line'><span class="cm"> * Calling purgeSharedInstance will destroy the shared instance and return the swizzled</span>
</span><span class='line'><span class="cm"> * methods to their former selves.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Usage:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * MyClass.h:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;SynthesizeSingleton.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @interface MyClass: SomeSuperclass</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              ...</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      MyClass.m:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;MyClass.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      // This line is optional. Use it if you&#39;ve enabled GCC_WARN_UNDECLARED_SELECTOR</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @implementation MyClass</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      ...</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note: Calling alloc manually will also initialize the singleton, so you</span>
</span><span class='line'><span class="cm"> * can call a more complex init routine to initialize the singleton like so:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * [[MyClass alloc] initWithParam:firstParam secondParam:secondParam];</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Just be sure to make such a call BEFORE you call &quot;sharedInstance&quot; in</span>
</span><span class='line'><span class="cm"> * your program.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(SS_CLASSNAME)     \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstance;       \</span>
</span><span class='line'><span class="cp">+ (void) purgeSharedInstance;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">@interface SS_CLASSNAME (SynthesizeSingletonPrivate)    \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoNothing;     \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoSomething;   \</span>
</span><span class='line'><span class="cp">- (void)releaseDoNothing;       \</span>
</span><span class='line'><span class="cp">- (void)releaseDoSomething;     \</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoNothing;     \</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoSomething; \</span>
</span><span class='line'><span class="cp">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS(SS_CLASSNAME)    \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">static volatile SS_CLASSNAME* _##SS_CLASSNAME##_sharedInstance = nil;   \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstanceNoSynch        \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstanceSynch  \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] init]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstance       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*)[self sharedInstanceSynch]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (id)allocWithZone:(NSZone*) zone      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if (nil == _##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [super allocWithZone:zone];  \</span>
</span><span class='line'><span class="cp">if(nil != _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(retainCount)), class_getMethodImplementation(self, @selector(retainCountDoNothing)));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(release)), class_getMethodImplementation(self, @selector(releaseDoNothing)));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(autorelease)), class_getMethodImplementation(self, @selector(autoreleaseDoNothing)));  \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (id)_##SS_CLASSNAME##_sharedInstance;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (void)purgeSharedInstance     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil != _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceSynch));    \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(retainCount)), class_getMethodImplementation(self, @selector(retainCountDoSomething)));        \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(release)), class_getMethodImplementation(self, @selector(releaseDoSomething)));        \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(autorelease)), class_getMethodImplementation(self, @selector(autoreleaseDoSomething)));        \</span>
</span><span class='line'><span class="cp">[_##SS_CLASSNAME##_sharedInstance release];     \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = nil; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)copyWithZone:(NSZone *)zone       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)retain    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCount       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(NSUInteger)retainCount method did not get swizzled.&quot;, self); \</span>
</span><span class='line'><span class="cp">return NSUIntegerMax;   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoNothing      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return NSUIntegerMax;   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoSomething    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return [super retainCount];     \</span>
</span><span class='line'><span class="cp">}\</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (oneway void)release  \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(void)release method did not get swizzled.&quot;, self);   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (void)releaseDoNothing{}      \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (void)releaseDoSomething      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">[super release];        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autorelease       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(id)autorelease method did not get swizzled.&quot;, self); \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoNothing      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoSomething    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return [super autorelease];     \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Lesser Singleton</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* A lesser singleton has a shared instance, but can also be instantiated on its own.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * For a lesser singleton, you still use SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(),</span>
</span><span class='line'><span class="cm"> * but use SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS() in the implementation file.</span>
</span><span class='line'><span class="cm"> * You must specify which creation methods are to initialize the shared instance</span>
</span><span class='line'><span class="cm"> * (besides &quot;sharedInstance&quot;) via CALL_LESSER_SINGLETON_INIT_METHOD()</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Example:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * MyClass.h:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;SynthesizeSingleton.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @interface MyClass: SomeSuperclass</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              int value;</span>
</span><span class='line'><span class="cm"> *              ...</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceWithValue:(int) value;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * - (id) initWithValue:(int) value;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      MyClass.m:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;MyClass.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      // This line is optional. Use it if you&#39;ve enabled GCC_WARN_UNDECLARED_SELECTOR</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @implementation MyClass</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceWithValue:(int) value</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD(MyClass, initWithValue:value);</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      ...</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note: CALL_LESSER_SINGLETON_INIT_METHOD() will not work if your</span>
</span><span class='line'><span class="cm"> * init call contains commas. If you need commas (such as for varargs),</span>
</span><span class='line'><span class="cm"> * or other more complex initialization, use the PRE and POST macros:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceComplex</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD_PRE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *              int firstNumber = [self getFirstNumberSomehow];</span>
</span><span class='line'><span class="cm"> *              _sharedInstance = [[self alloc] initWithValues:firstNumber, 2, 3, 4, -1];</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD_POST(MyClass);</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS(SS_CLASSNAME)     \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">static volatile SS_CLASSNAME* _##SS_CLASSNAME##_sharedInstance = nil;   \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstanceNoSynch \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstanceSynch   \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] init]; \</span>
</span><span class='line'><span class="cp">if(_##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*)sharedInstance        \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) [self sharedInstanceSynch]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (void)purgeSharedInstance     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceSynch));    \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">[_##SS_CLASSNAME##_sharedInstance release];     \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = nil; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD_PRE(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD_POST(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">if(_##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD(SS_CLASSNAME,__INIT_CALL__) \</span>
</span><span class='line'><span class="cp">CALL_LESSER_SINGLETON_INIT_METHOD_PRE(SS_CLASSNAME); \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] __INIT_CALL__];        \</span>
</span><span class='line'><span class="cp">CALL_LESSER_SINGLETON_INIT_METHOD_POST(SS_CLASSNAME)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* SYNTHESIZE_SINGLETON_FOR_CLASS */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时也非常方便，该头文件也已给出使用方法，在这里我在说一下，供那些E文不好的同学使用。</p>

<p>使用这种方式首先把该头文件加到我们的项目中，然后直接使用就可以了：</p>

<figure class='code'><figcaption><span>Singleton.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;SynthesizeSingleton.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Singleton</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="n">SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER</span><span class="p">(</span><span class="n">Singleton</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//定义该类的属性，方法等</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Singleton.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Singleton</span>
</span><span class='line'>
</span><span class='line'><span class="n">SYNTHESIZE_SINGLETON_FOR_CLASS</span><span class="p">(</span><span class="n">Singleton</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//属性方法的实现</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一来在使用时，通过<code>[Singleton sharedInstance]</code>就可以获得该类的单例对象了。
这种方法由于有了这个头文件的支持，所以使得使用单例方便多了，而且也避免了多线程的问题。</p>

<h5>第三种</h5>

<p>这是最后一种也是我最推荐的一种。<code>iOS</code>在4.0以后推出了<code>block</code>和<code>GCD</code>，这两个特性给<code>iOS</code>开发带来的很大的便利，也使开发变得更加趣味话。那么如何通过<code>GCD</code>+<code>block</code>来实现单例模式呢，这主要归功于<code>dispatch_once(dispatch_once_t *predicate, ^(void)block)</code>这个<code>GCD</code>的函数，他有两个参数第一参数是一个指向<code>dispatch_once_t</code>类型结构体的指针，用来测试<code>block</code>是否执行完成，该指针所指向的结构体必须是全局的或者静态的，第二个参数是一个返回值与参数均为空的<code>block</code>，在<code>block</code>体中进行对象的初始化即可。<code>dispatch_once</code>在程序的生命周期中保证只会被调用一次，所以在多线程中也不会有问题。
该种方法使用方法：</p>

<figure class='code'><figcaption><span>Singleton </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">Singleton</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">Singleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Singleton</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用该种方法只需要这简单的几句代码就可以实现单例了。使用起来非常方便，但是这种创建单例的方法也不是完美的，它并不能阻止人们通过<code>alloc</code>方法来实例化一个对象，所以这并不是严格意义上的单例模式，但是一般程序都是我们自己写，我们自己记得就好了，这也没什么可担心的，从这一点上来说第二种方法又是比较好的，具体使用的时候呢，根据实际情况来吧，各取所需就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Xcode添加生成注释服务]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/04/generate-commentate-with-xcode/"/>
    <updated>2013-03-04T13:05:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/04/generate-commentate-with-xcode</id>
    <content type="html"><![CDATA[<p><code>Xcode</code>不得不说，很好用的一款<code>IDE</code>，他集成了很多功能，但惟独没有发现为一个方法添加注释的功能。尤其是在当有大量的方法需要添加注释，而且注释的格式还要统一的时候，真的让人头疼。
在<code>Xcode 3.2</code>版本的时候，还可以找到<code>appledoc</code>插件，很方便的生成注释。但是到了<code>Xcode 4.0</code>以上的版本就找不到这个功能，虽然<code>appledoc</code>仍然可以用，但是需要使用命令行，而且生成的是<code>html</code>文件。就没有再仔细研究，继续寻找更简便的方法。
最终找到一位大神写的一段<code>ruby</code>脚本，使用它为系统添加了一项服务，使用此可以很方便为指定的方法生成指定格式的注释。
不过，测试发现这段<code>ruby</code>脚本还是有一点点问题的，在生成注释后会把当前生成注释的方法的声明删掉。我只好凭着多年的编程经验对这段脚本进行了一点修改（第一次接触到<code>ruby</code>代码。o(╯□╰)o），现在已经很好使用了，基本上没有啥问题了。分享给大家。</p>

<p>先展示个效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *   &lt;#Description#&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @param  application     &lt;#application description#&gt;</span>
</span><span class='line'><span class="cm"> *   @param  launchOptions   &lt;#launchOptions description#&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *   @return &lt;#return value description#&gt;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
</span><span class='line'><span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--More -->


<h3>如何安装使用</h3>

<p>所需文件：<a href="http://wtlucky.github.com/geekerprobe/downloads/XcodeAddCommentate.zip">下载</a>
1. ruby脚本 <code>Doxygen.rb</code>原始的 <code>DoxygenNew.rb</code>我修改的
2. 添加服务的应用程序 <code>ThisService.app</code></p>

<p>首先打开<code>ThisService.app</code>，加载<code>DoxygenNew.rb</code>
<img src="http://ww4.sinaimg.cn/large/8ded26aejw1e2dppl3txtj.jpg"></p>

<p>可以通过<code>Add option</code>增加一些自定义设置，这里只添加了应用程序filter，添加的该服务只有<code>Xcode</code>能使用</p>

<p>点<code>Test Service</code>测试服务，可以粘过一些代码过来测试。
<img src="http://ww3.sinaimg.cn/bmiddle/8ded26aejw1e2dpwj5pk9j.jpg"></p>

<p>测试无误后，添加服务就好了。</p>

<p>然后就可以在<code>Xcode</code>的服务里找到添加的这个服务了。
<img src="http://ww2.sinaimg.cn/bmiddle/8ded26aejw1e2dpzqi9jhj.jpg"></p>

<p>为了方便使用再为这个服务设置一个快捷键，往后在使用时，只需要选中要生成注释的方法名，按下快捷键，注释就会自动给生成了。</p>

<p>最后贴上我改过的<code>ruby</code>代码，希望大家根据自己的需要再进行编辑，拿出来与大家分享。</p>

<figure class='code'><figcaption><span> (DoxygenNew.rb)</span> <a href='http://blog.wtlucky.com/downloads/code/ruby/DoxygenNew.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This script helps you make doxygen comments in Obj-C/C/C++ files in XCode</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Created by Fred McCann on 03/16/2010 - and Edwin.</span>
</span><span class='line'><span class="c1"># http://www.duckrowing.com</span>
</span><span class='line'><span class="c1"># Adapted for ThisService by Martin Pichlmair 03/29/2011</span>
</span><span class='line'><span class="c1"># Modified for Objectiv-c by Dake 07/22/2012</span>
</span><span class='line'><span class="c1"># Modified by wtlucky 11/21/2012</span>
</span><span class='line'><span class="c1"># httip://glade.tk</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Duckrowing</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Convenience class to hold name and type information</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Argument</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>            <span class="vi">@name</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">name</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^&amp;/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\*/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\[.*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/,$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/;$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">name</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">&#39;...&#39;</span>
</span><span class='line'>                <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;vararg_list&#39;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">type</span>
</span><span class='line'>            <span class="vi">@type</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">type</span><span class="o">=</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">type</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>                <span class="n">type</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/&amp;$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">type</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*\*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">type</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">type</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Base implementation of commenter</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">BaseCommenter</span>
</span><span class='line'>        <span class="c1"># Creates a new commenter object</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">indent</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>            <span class="vi">@indent</span> <span class="o">=</span> <span class="n">indent</span>
</span><span class='line'>            <span class="vi">@code</span> <span class="o">=</span> <span class="n">code</span>
</span><span class='line'>            <span class="vi">@arguments</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>            <span class="vi">@returns</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Creates an opening comment</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">start_comment</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;Description&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;/**</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="c1">#str = &quot;#{@indent}/**\n&quot;</span>
</span><span class='line'>            <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> *</span><span class="se">\t</span><span class="s2">&lt;#</span><span class="si">#{</span><span class="n">description</span><span class="si">}</span><span class="s2">#&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="n">str</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">arguments_comment</span>
</span><span class='line'>            <span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>            <span class="vi">@arguments</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">str</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>                    <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> *</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>                <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> *</span><span class="se">\t</span><span class="s2">@param </span><span class="se">\t</span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> </span><span class="se">\t</span><span class="s2">&lt;#</span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> description#&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="n">str</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">return_comment</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@returns</span>
</span><span class='line'>            <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> *</span><span class="se">\n</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> *</span><span class="se">\t</span><span class="s2">@return</span><span class="se">\t</span><span class="s2">&lt;#return value description#&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Creates closing comment</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">end_comment</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">#&quot;#{@indent} */\n&quot;</span>
</span><span class='line'>            <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2"> */</span><span class="se">\n</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Convenience method to detect multiline statements</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">is_multiline?</span>
</span><span class='line'>            <span class="vi">@code</span> <span class="o">=~</span> <span class="sr">/\n/</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Adds inline comments to a comma delimited list</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">comment_list</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">base_indent</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">commented_list</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>            <span class="n">ids</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/,/</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">list_id</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>                <span class="n">list_id</span> <span class="o">+=</span> <span class="s1">&#39;,&#39;</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">!=</span> <span class="n">ids</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\=.*$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\[.*\]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/;/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*\:\s*\d+/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">doc_id</span> <span class="o">=</span> <span class="nb">id</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>                <span class="n">doc_id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\*/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">commented_list</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_indent</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">!=</span> <span class="n">ids</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>                <span class="n">commented_list</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="se">\t</span><span class="si">#{</span><span class="n">list_id</span><span class="si">}</span><span class="s2"> /**&lt; &lt;#</span><span class="si">#{</span><span class="n">doc_id</span><span class="si">}</span><span class="s2"> description#&gt; */&quot;</span>
</span><span class='line'>                <span class="n">commented_list</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">!=</span> <span class="n">ids</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="n">commented_list</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Parses a comma delimited list into an array of Argument objects</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">parse_c_style_argument_list</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>            <span class="n">arguments</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>            <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/,/</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>                <span class="n">arg</span> <span class="o">=</span> <span class="no">Argument</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>                <span class="n">parts</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
</span><span class='line'>                <span class="n">arg</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">parts</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>                <span class="n">parts</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">parts</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">arg</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">parts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="vi">@arguments</span> <span class="o">&lt;&lt;</span> <span class="n">arg</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Add Xcode selection markup to first editable field</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">select_first_field</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>            <span class="c1"># Add PBX selection to first field</span>
</span><span class='line'>            <span class="n">matches</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\&lt;\#.*\#\&gt;/</span><span class="p">)</span>
</span><span class='line'>           <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>               <span class="n">first_field</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>               <span class="c1"># str.gsub!(/#{first_field}/, &quot;%%%{PBXSelection}%%%#{first_field}%%%{PBXSelection}%%%&quot;)</span>
</span><span class='line'>               <span class="n">str</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/</span><span class="si">#{</span><span class="n">first_field</span><span class="si">}</span><span class="sr">/</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_field</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>           <span class="n">str</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Returns a comment above the code and the original section of commented code</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>       <span class="n">str</span> <span class="o">=</span> <span class="n">start_comment</span><span class="p">()</span>
</span><span class='line'>       <span class="n">str</span> <span class="o">+=</span> <span class="n">arguments_comment</span><span class="p">()</span>
</span><span class='line'>       <span class="n">str</span> <span class="o">+=</span> <span class="n">return_comment</span><span class="p">()</span>
</span><span class='line'>       <span class="n">str</span> <span class="o">+=</span> <span class="n">end_comment</span><span class="p">()</span>
</span><span class='line'>       <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@code</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>       <span class="c1">#print &quot;#{@code}&quot;</span>
</span><span class='line'>       <span class="c1">#matches = @code.scan(/\n/)</span>
</span><span class='line'>       <span class="c1">#print matches.size</span>
</span><span class='line'>                               <span class="c1">#if matches.size &gt; 1</span>
</span><span class='line'>                               <span class="c1">#str += &quot;#{@code}&quot;</span>
</span><span class='line'>                               <span class="c1">#end</span>
</span><span class='line'>       <span class="n">select_first_field</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">VariableCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>   <span class="c1"># Adds a basic comment above individual variables and rewrites multiple</span>
</span><span class='line'>   <span class="c1"># declaritions into an inline commented list</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>   <span class="k">if</span> <span class="vi">@code</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">/^([^\{]+\,)/</span>
</span><span class='line'>   <span class="n">commented_code</span> <span class="o">=</span> <span class="n">comment_list</span><span class="p">(</span><span class="vi">@code</span><span class="p">)</span>
</span><span class='line'>   <span class="n">commented_code</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span><span class="vi">@indent</span><span class="p">);</span>
</span><span class='line'>   <span class="n">select_first_field</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">commented_code</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>   <span class="k">super</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">PropertyCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>   <span class="c1"># Adds a basic comment above individual properties</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">MacroCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>   <span class="c1"># Parse out args for inclusion in comment</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">capture_args</span>
</span><span class='line'>   <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\(([^\(\)]*)\)/</span><span class="p">)</span>
</span><span class='line'>   <span class="n">parse_c_style_argument_list</span><span class="p">(</span><span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>   <span class="vi">@returns</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Adds a basic comment above individual variables and rewrites multiple</span>
</span><span class='line'>   <span class="c1"># declaritions into an inline commented list</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>   <span class="n">capture_args</span> <span class="k">if</span> <span class="vi">@code</span> <span class="o">=~</span> <span class="sr">/\(/</span>
</span><span class='line'>                               <span class="k">super</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Implementation of commenter to comment C style enums</span>
</span><span class='line'>                               <span class="k">class</span> <span class="nc">EnumCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>                               <span class="c1"># Comments identifiers in the code block</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">comment_code</span>
</span><span class='line'>                               <span class="n">block_match</span> <span class="o">=</span> <span class="sr">/\{([^\{\}]*)\}/</span>
</span><span class='line'>                               <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">block_match</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">return</span> <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>                               <span class="n">block</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>                               <span class="vi">@code</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="n">block_match</span><span class="p">,</span> <span class="s2">&quot;{</span><span class="se">\n</span><span class="si">#{</span><span class="n">comment_list</span><span class="p">(</span><span class="n">block</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="si">#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2">}&quot;</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Comments the enum. This will write comments next to each name for a multiline</span>
</span><span class='line'>                               <span class="c1"># statement. It will not for single line enumerations.</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>                               <span class="n">comment_code</span> <span class="k">if</span> <span class="n">is_multiline?</span>
</span><span class='line'>                               <span class="k">super</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Implementation of commenter to comment C style enums</span>
</span><span class='line'>                               <span class="k">class</span> <span class="nc">StructCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>                               <span class="c1"># Comments semicolon delimited list of struct members</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">comment_struct_list</span><span class="p">(</span><span class="n">list</span><span class="p">)</span>
</span><span class='line'>                               <span class="n">commented_list</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>                               <span class="n">ids</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/;/</span><span class="p">)</span>
</span><span class='line'>                               <span class="n">ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span>
</span><span class='line'>                               <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                               <span class="nb">id</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                               <span class="n">list_id</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>                               <span class="n">base_indent</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span>
</span><span class='line'>                               <span class="n">commented_list</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">comment_list</span><span class="p">(</span><span class="n">list_id</span><span class="p">,</span> <span class="n">base_indent</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>                               <span class="n">commented_list</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Comments identifiers in the code block</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">comment_code</span>
</span><span class='line'>                               <span class="n">block_match</span> <span class="o">=</span> <span class="sr">/\{([^\{\}]*)\}/</span>
</span><span class='line'>                               <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">block_match</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">return</span> <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>                               <span class="n">block</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>                               <span class="vi">@code</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="n">block_match</span><span class="p">,</span> <span class="s2">&quot;{</span><span class="se">\n</span><span class="si">#{</span><span class="n">comment_struct_list</span><span class="p">(</span><span class="n">block</span><span class="p">)</span><span class="si">}#{</span><span class="vi">@indent</span><span class="si">}</span><span class="s2">}&quot;</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Adds inline comments for members and a comment for the entire struct</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>                               <span class="n">comment_code</span>
</span><span class='line'>                               <span class="k">super</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="k">class</span> <span class="nc">FunctionCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>                               <span class="c1"># Parse out args for inclusion in comment</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">capture_args</span>
</span><span class='line'>                               <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\(([^\(\)]*)\)/</span><span class="p">)</span>
</span><span class='line'>                               <span class="n">parse_c_style_argument_list</span><span class="p">(</span><span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                               <span class="c1"># Decides whether or not to add a returns tag to comment</span>
</span><span class='line'>                               <span class="k">def</span> <span class="nf">capture_return</span>
</span><span class='line'>                               <span class="vi">@returns</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\(/</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">!~</span> <span class="sr">/void/</span>
</span><span class='line'>                                                      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="c1"># Adds a basic comment above individual variables and rewrites multiple</span>
</span><span class='line'>                                                      <span class="c1"># declaritions into an inline commented list</span>
</span><span class='line'>                                                      <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>                                                      <span class="n">capture_args</span>
</span><span class='line'>                                                      <span class="n">capture_return</span>
</span><span class='line'>                                                      <span class="k">super</span>
</span><span class='line'>                                                      <span class="k">end</span>
</span><span class='line'>                                                      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="k">class</span> <span class="nc">MethodCommenter</span> <span class="o">&lt;</span> <span class="no">BaseCommenter</span>
</span><span class='line'>                                                      <span class="no">TAILMATCH</span> <span class="o">=</span> <span class="sr">/[\s*;.*]/</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="c1"># Find the return type</span>
</span><span class='line'>                                                      <span class="k">def</span> <span class="nf">capture_return_type</span>
</span><span class='line'>                                                      <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/^\s*[+-]\s*\(([^\(\)]*)\)/</span><span class="p">)</span>
</span><span class='line'>                                                      <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'>                                                      <span class="n">type</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="no">TAILMATCH</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="s1">&#39;void&#39;</span> <span class="o">||</span> <span class="n">type</span> <span class="o">==</span> <span class="s1">&#39;IBAction&#39;</span>
</span><span class='line'>                                                      <span class="vi">@returns</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>                                                      <span class="k">else</span>
</span><span class='line'>                                                      <span class="vi">@returns</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>                                                      <span class="k">end</span>
</span><span class='line'>                                                      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="c1"># Parse out params</span>
</span><span class='line'>                                                      <span class="k">def</span> <span class="nf">capture_parameters</span>
</span><span class='line'>                                                      <span class="n">params</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>                                                      <span class="n">matches</span> <span class="o">=</span> <span class="vi">@code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\:\(([^\(]+)\)(\S+)/</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">matches</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>                                                                           <span class="k">next</span> <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">2</span>
</span><span class='line'>                                                                           <span class="n">arg</span> <span class="o">=</span> <span class="no">Argument</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>                                                                           <span class="n">arg</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="no">TAILMATCH</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">arg</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="no">TAILMATCH</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="vi">@arguments</span> <span class="o">&lt;&lt;</span> <span class="n">arg</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="c1"># Adds a basic comment above individual variables and rewrites multiple</span>
</span><span class='line'>                                                                           <span class="c1"># declaritions into an inline commented list</span>
</span><span class='line'>                                                                           <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>                                                                           <span class="n">capture_parameters</span>
</span><span class='line'>                                                                           <span class="n">capture_return_type</span>
</span><span class='line'>                                                                           <span class="k">super</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="k">class</span> <span class="nc">Documenter</span>
</span><span class='line'>                                                                           <span class="k">def</span> <span class="nf">document</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="c1"># 此句刷格式缩进了</span>
</span><span class='line'>                                                                           <span class="c1">#code.gsub!(/\s*$/, &#39;&#39;)</span>
</span><span class='line'>                                                                           <span class="n">indent</span> <span class="o">=</span> <span class="n">base_indentation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="k">if</span> <span class="n">is_objc_property?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">PropertyCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_objc_method?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">MethodCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_function?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">FunctionCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_macro?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">MacroCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_struct?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">StructCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_union?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">StructCommenter</span>
</span><span class='line'>                                                                           <span class="k">elsif</span> <span class="n">is_enum?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">EnumCommenter</span>
</span><span class='line'>                                                                           <span class="k">else</span>
</span><span class='line'>                                                                           <span class="n">klass</span> <span class="o">=</span> <span class="no">VariableCommenter</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="c1">#puts &quot;USE --&gt; #{klass}&quot;</span>
</span><span class='line'>                                                                           <span class="n">commenter</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">indent</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">commenter</span><span class="o">.</span><span class="n">document</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="kp">private</span>
</span><span class='line'>                                                                           <span class="k">def</span> <span class="nf">is_objc_method?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">code</span> <span class="o">=~</span> <span class="sr">/^\s*[+-]/</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="k">def</span> <span class="nf">is_objc_property?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="n">code</span> <span class="o">=~</span> <span class="sr">/^\s*\@property/</span>
</span><span class='line'>                                                                           <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                           <span class="k">def</span> <span class="nf">is_function?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                           <span class="o">!</span><span class="n">is_macro?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">is_objc_method?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">code</span> <span class="o">=~</span> <span class="sr">/\(/</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">is_macro?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="n">code</span> <span class="o">=~</span> <span class="sr">/^\s*\#define/</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">is_enum?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="n">code</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">/^\s*(\w+\s)?enum.*\{.*\}/</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">is_struct?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="n">code</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">/^\s*(\w+\s)?struct.*\{.*\}/</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">is_union?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="n">code</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">/^\s*(\w+\s)?union.*\{.*\}/</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">base_indentation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="n">matches</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/^(\s*)/</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="k">return</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>                                                                                                                                    <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="c1"># Unicode considerations:</span>
</span><span class='line'>                                                                                                                                    <span class="c1">#  Set $KCODE to &#39;u&#39;. This makes STDIN and STDOUT both act as containing UTF-8.</span>
</span><span class='line'>                                                                                                                                    <span class="vg">$KCODE</span> <span class="o">=</span> <span class="s1">&#39;u&#39;</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="c1">#  Since any Ruby version before 1.9 doesn&#39;t much care for Unicode,</span>
</span><span class='line'>                                                                                                                                    <span class="c1">#  patch in a new String#utf8_length method that returns the correct length</span>
</span><span class='line'>                                                                                                                                    <span class="c1">#  for UTF-8 strings.</span>
</span><span class='line'>                                                                                                                                    <span class="no">UNICODE_COMPETENT</span> <span class="o">=</span> <span class="p">((</span><span class="no">RUBY_VERSION</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">].</span><span class="n">to_f</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="k">unless</span> <span class="no">UNICODE_COMPETENT</span> <span class="c1"># lower than 1.9</span>
</span><span class='line'>                                                                                                                                    <span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>                                                                                                                                    <span class="k">def</span> <span class="nf">utf8_length</span>
</span><span class='line'>                                                                                                                                    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                                                                                                                                    <span class="n">i</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/(.)/</span><span class="p">)</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>                                                                                                                                    <span class="n">i</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>                                                                                                                                    <span class="k">else</span> <span class="c1"># 1.9 and above</span>
</span><span class='line'>                                                                                                                                    <span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>                                                                                                                                    <span class="n">alias_method</span> <span class="ss">:utf8_length</span><span class="p">,</span> <span class="ss">:length</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>                                                                                                                                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>                                                                                                                                    <span class="n">input</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>                                                                                                                                    <span class="c1"># input now contains the contents of STDIN.</span>
</span><span class='line'>                                                                                                                                    <span class="c1"># Write your script here. </span>
</span><span class='line'>                                                                                                                                    <span class="c1"># Be sure to print anything you want the service to output.</span>
</span><span class='line'>                                                                                                                                    <span class="n">documenter</span> <span class="o">=</span> <span class="ss">Duckrowing</span><span class="p">:</span><span class="ss">:Documenter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>                                                                                                                                    <span class="n">replacement</span> <span class="o">=</span> <span class="n">documenter</span><span class="o">.</span><span class="n">document</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>                                                                                                                                    <span class="nb">puts</span> <span class="n">replacement</span>
</span><span class='line'>                                                                                                                                    <span class="c1">#print replacement</span>
</span><span class='line'>                                                                                                                                    <span class="c1">#print input</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
