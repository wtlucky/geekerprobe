<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: GCD | GeekerProbe]]></title>
  <link href="http://blog.wtlucky.com/tags/gcd/atom.xml" rel="self"/>
  <link href="http://blog.wtlucky.com/"/>
  <updated>2014-11-23T10:44:56+08:00</updated>
  <id>http://blog.wtlucky.com/</id>
  <author>
    <name><![CDATA[wtlucky ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[23种设计模式——单例模式]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/03/19/singleton/"/>
    <updated>2013-03-19T19:35:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/03/19/singleton</id>
    <content type="html"><![CDATA[<p>本学期开了一门课程叫做《软件体系结构》，讲的主要是设计模式的东西，而我在之前也看过设计模式的书，正好借此机会来整理一下自己所学到的知识，因为自己在做<code>iOS</code>开发，所以基本上这23种设计模式我都通过<code>objective-C</code>来实现了。此系列文章的类图都是来自<a href="http://book.douban.com/subject/4260618/">《设计模式之禅》</a>，有兴趣的同学可以去买这本书看。</p>

<p>话说，在编码编到一定的程度以后，由于代码体系的庞大，结构的复杂，自然就会上升到设计模式高度，而现在的软件设计又基本都是面向对象的，所以有了设计模式作支持，可以使软件更加的稳定安全，也更易于维护与拓展。</p>

<p>首先来介绍最常用最简单的单例模式（Singleton），在以后的文章中再依次介绍其他的模式。</p>

<h4>单例模式定义</h4>

<p><code>Ensure a class has only one instance, and provide a global point of access to it. (确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。)</code></p>

<!-- More -->


<h4>单例模式类图</h4>

<p><img src="http://picturemapstore.bcs.duapp.com/2013/03/singleton.jpg"></p>

<h4>单例模式介绍</h4>

<p>单例模式确保在一个应用中只产生一个实例，这是很有必要的，因为在我们做软件设计的时候，有很多对象都是只需要一个就可以了，而不需要创建众多的对象，这样最显而易见的就是节省了内存空间。而且避免了这个类的频繁的初始化与销毁。有时为了实现某一种功能与操作而创建的类（工具类）往往也不需要多个对象，使用单例模式再合适不过。再延伸一点，有时为了节省内存对一个对象进行复用的话也可以通过单例来实现，这在手机软件的开发中用得比较多，因为手机的内存实在是少得可怜。</p>

<h4>单例模式优点</h4>

<ol>
<li>正如前面说的，单例模式在内存中只有一个实例，减少了内存开支。特别是一个对象需要频繁的创建、销毁时，而创建与销毁的性能有无法优化，单例模式的优势就非常明显。</li>
<li>单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</li>
<li>单例模式可以避免对资源的多重占用。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li>
</ol>


<h4>单例模式缺点</h4>

<ol>
<li>单例模式一般没有接口，扩展很困难，除了修改代码基本上没有第二种途径实现。</li>
<li>单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的。</li>
<li>单例模式与单一职责原则有冲突。</li>
</ol>


<h4>单例模式在iOS中的使用</h4>

<p>单例模式在<code>iOS</code>开发中的使用还是蛮多的，许多<code>Foundation</code>、<code>Cocoa</code>和<code>UIKit</code>中的类都实现了单例模式，比如应用程序本身<code>UIApplication</code>、文件操作类<code>NSFileManager</code>、消息中心<code>NSNotificitonCenter</code>等系统都已经给我们实现单例，我们只需要使用就好了。在<code>iOS</code>中使用单例模式要使用类方法，通过类方法返回该类的唯一对象。</p>

<p>我知道的在<code>iOS</code>开发中实现单例模式主要有以下三种方式：</p>

<h5>第一种</h5>

<p>该方法是苹果的官方文档中写的一种方式，通过覆盖<code>NSObject</code>的部分方法实现，使该类无法<code>alloc</code>、<code>retain</code>、<code>release</code>。这是最麻烦的一种方法，也是最不好的一种方法。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">Singleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Singleton</span> <span class="o">*</span><span class="p">)</span><span class="n">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">super</span> <span class="nl">allocWithZone:</span><span class="nb">NULL</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="n">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">self</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="n">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">retain</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">retainCount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NSUIntegerMax</span><span class="p">;</span>  <span class="c1">//denotes an object that cannot be released</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">release</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//do nothing</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">autorelease</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>可以看到这种方式，使用静态成员维持了一个永久存在的对象，而且覆盖了<code>alloc</code>方法（<code>alloc</code>方法会调用<code>allocWithZone:</code>方法），并且也覆盖了所有与引用技术有关的方法，这都使这个对象不会被销毁。这样看上去基本实现了我们需要的，但是写起来麻烦不说，还有很大的一个问题，那就是多线程问题，如果是在多线程中那么该种方法就不能保证只产生一个对象了。所以这种方式只是介绍一下，并不推荐使用。</p>

<h5>第二种</h5>

<p>第二种跟第一种差不多，也是通过覆盖<code>NSObject</code>的方法实现的，但是它在第一种的基础上增加了多线程的处理，所以即使在多线程下，该种方法创建的对象也是唯一的。这种方法已经有大牛为我们写好了，全都都是通过<code>C</code>的宏定义<code>#define</code>出来了。现给出该头文件：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (SynthesizeSingleton.h)</span> <a href='/downloads/code/designPattern/SynthesizeSingleton.h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  SynthesizeSingleton.h</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Modified by Karl Stenerud starting 16/04/2010.</span>
</span><span class='line'><span class="c1">// - Moved the swizzle code to allocWithZone so that non-default init methods may be</span>
</span><span class='line'><span class="c1">//   used to initialize the singleton.</span>
</span><span class='line'><span class="c1">// - Added &quot;lesser&quot; singleton which allows other instances besides sharedInstance to be created.</span>
</span><span class='line'><span class="c1">// - Added guard ifndef so that this file can be used in multiple library distributions.</span>
</span><span class='line'><span class="c1">// - Made singleton variable name class-specific so that it can be used on multiple classes</span>
</span><span class='line'><span class="c1">//   within the same compilation module.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Modified by CJ Hanson on 26/02/2010.</span>
</span><span class='line'><span class="c1">//  This version of Matt&#39;s code uses method_setImplementaiton() to dynamically</span>
</span><span class='line'><span class="c1">//  replace the +sharedInstance method with one that does not use @synchronized</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Based on code by Matt Gallagher from CocoaWithLove</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Matt Gallagher on 20/10/08.</span>
</span><span class='line'><span class="c1">//  Copyright 2009 Matt Gallagher. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Permission is given to use this source code file without charge in any</span>
</span><span class='line'><span class="c1">//  project, commercial or otherwise, entirely at your risk, with the condition</span>
</span><span class='line'><span class="c1">//  that any redistribution (in part or whole) of source code must retain</span>
</span><span class='line'><span class="c1">//  this copyright and permission notice. Attribution in compiled projects is</span>
</span><span class='line'><span class="c1">//  appreciated but not required.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef SYNTHESIZE_SINGLETON_FOR_CLASS</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Singleton</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Synthesize Singleton For Class</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Creates a singleton interface for the specified class with the following methods:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * + (MyClass*) sharedInstance;</span>
</span><span class='line'><span class="cm"> * + (void) purgeSharedInstance;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Calling sharedInstance will instantiate the class and swizzle some methods to ensure</span>
</span><span class='line'><span class="cm"> * that only a single instance ever exists.</span>
</span><span class='line'><span class="cm"> * Calling purgeSharedInstance will destroy the shared instance and return the swizzled</span>
</span><span class='line'><span class="cm"> * methods to their former selves.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Usage:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * MyClass.h:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;SynthesizeSingleton.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @interface MyClass: SomeSuperclass</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              ...</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      MyClass.m:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;MyClass.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      // This line is optional. Use it if you&#39;ve enabled GCC_WARN_UNDECLARED_SELECTOR</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @implementation MyClass</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      ...</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note: Calling alloc manually will also initialize the singleton, so you</span>
</span><span class='line'><span class="cm"> * can call a more complex init routine to initialize the singleton like so:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * [[MyClass alloc] initWithParam:firstParam secondParam:secondParam];</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Just be sure to make such a call BEFORE you call &quot;sharedInstance&quot; in</span>
</span><span class='line'><span class="cm"> * your program.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(SS_CLASSNAME)     \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstance;       \</span>
</span><span class='line'><span class="cp">+ (void) purgeSharedInstance;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">@interface SS_CLASSNAME (SynthesizeSingletonPrivate)    \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoNothing;     \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoSomething;   \</span>
</span><span class='line'><span class="cp">- (void)releaseDoNothing;       \</span>
</span><span class='line'><span class="cp">- (void)releaseDoSomething;     \</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoNothing;     \</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoSomething; \</span>
</span><span class='line'><span class="cp">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_SINGLETON_FOR_CLASS(SS_CLASSNAME)    \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">static volatile SS_CLASSNAME* _##SS_CLASSNAME##_sharedInstance = nil;   \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstanceNoSynch        \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstanceSynch  \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] init]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*) sharedInstance       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*)[self sharedInstanceSynch]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (id)allocWithZone:(NSZone*) zone      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if (nil == _##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [super allocWithZone:zone];  \</span>
</span><span class='line'><span class="cp">if(nil != _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(retainCount)), class_getMethodImplementation(self, @selector(retainCountDoNothing)));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(release)), class_getMethodImplementation(self, @selector(releaseDoNothing)));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(autorelease)), class_getMethodImplementation(self, @selector(autoreleaseDoNothing)));  \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (id)_##SS_CLASSNAME##_sharedInstance;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (void)purgeSharedInstance     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil != _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceSynch));    \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(retainCount)), class_getMethodImplementation(self, @selector(retainCountDoSomething)));        \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(release)), class_getMethodImplementation(self, @selector(releaseDoSomething)));        \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getInstanceMethod(self, @selector(autorelease)), class_getMethodImplementation(self, @selector(autoreleaseDoSomething)));        \</span>
</span><span class='line'><span class="cp">[_##SS_CLASSNAME##_sharedInstance release];     \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = nil; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)copyWithZone:(NSZone *)zone       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)retain    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCount       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(NSUInteger)retainCount method did not get swizzled.&quot;, self); \</span>
</span><span class='line'><span class="cp">return NSUIntegerMax;   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoNothing      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return NSUIntegerMax;   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">- (NSUInteger)retainCountDoSomething    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return [super retainCount];     \</span>
</span><span class='line'><span class="cp">}\</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (oneway void)release  \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(void)release method did not get swizzled.&quot;, self);   \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (void)releaseDoNothing{}      \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (void)releaseDoSomething      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">[super release];        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autorelease       \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">NSAssert1(1==0, @&quot;SynthesizeSingleton: %@ ERROR: -(id)autorelease method did not get swizzled.&quot;, self); \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoNothing      \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return self;    \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">- (id)autoreleaseDoSomething    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return [super autorelease];     \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Lesser Singleton</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* A lesser singleton has a shared instance, but can also be instantiated on its own.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * For a lesser singleton, you still use SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(),</span>
</span><span class='line'><span class="cm"> * but use SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS() in the implementation file.</span>
</span><span class='line'><span class="cm"> * You must specify which creation methods are to initialize the shared instance</span>
</span><span class='line'><span class="cm"> * (besides &quot;sharedInstance&quot;) via CALL_LESSER_SINGLETON_INIT_METHOD()</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Example:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * MyClass.h:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;SynthesizeSingleton.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @interface MyClass: SomeSuperclass</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              int value;</span>
</span><span class='line'><span class="cm"> *              ...</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceWithValue:(int) value;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * - (id) initWithValue:(int) value;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      MyClass.m:</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *      #import &quot;MyClass.h&quot;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      // This line is optional. Use it if you&#39;ve enabled GCC_WARN_UNDECLARED_SELECTOR</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_SINGLETON_FOR_CLASS_PROTOTYPE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @implementation MyClass</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceWithValue:(int) value</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD(MyClass, initWithValue:value);</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      ...</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      @end</span>
</span><span class='line'><span class="cm"> * ========================================</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note: CALL_LESSER_SINGLETON_INIT_METHOD() will not work if your</span>
</span><span class='line'><span class="cm"> * init call contains commas. If you need commas (such as for varargs),</span>
</span><span class='line'><span class="cm"> * or other more complex initialization, use the PRE and POST macros:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      + (void) initSharedInstanceComplex</span>
</span><span class='line'><span class="cm"> *      {</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD_PRE(MyClass);</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *              int firstNumber = [self getFirstNumberSomehow];</span>
</span><span class='line'><span class="cm"> *              _sharedInstance = [[self alloc] initWithValues:firstNumber, 2, 3, 4, -1];</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *              CALL_LESSER_SINGLETON_INIT_METHOD_POST(MyClass);</span>
</span><span class='line'><span class="cm"> *      }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYNTHESIZE_LESSER_SINGLETON_FOR_CLASS(SS_CLASSNAME)     \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">static volatile SS_CLASSNAME* _##SS_CLASSNAME##_sharedInstance = nil;   \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstanceNoSynch \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (SS_CLASSNAME*) sharedInstanceSynch   \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] init]; \</span>
</span><span class='line'><span class="cp">if(_##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">return (SS_CLASSNAME*) _##SS_CLASSNAME##_sharedInstance;        \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (volatile SS_CLASSNAME*)sharedInstance        \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">return (volatile SS_CLASSNAME*) [self sharedInstanceSynch]; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">\</span>
</span><span class='line'><span class="cp">+ (void)purgeSharedInstance     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceSynch));    \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">[_##SS_CLASSNAME##_sharedInstance release];     \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = nil; \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD_PRE(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">@synchronized(self)     \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">if(nil == _##SS_CLASSNAME##_sharedInstance)     \</span>
</span><span class='line'><span class="cp">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD_POST(SS_CLASSNAME) \</span>
</span><span class='line'><span class="cp">if(_##SS_CLASSNAME##_sharedInstance)    \</span>
</span><span class='line'><span class="cp">{       \</span>
</span><span class='line'><span class="cp">Method newSharedInstanceMethod = class_getClassMethod(self, @selector(sharedInstanceNoSynch));  \</span>
</span><span class='line'><span class="cp">method_setImplementation(class_getClassMethod(self, @selector(sharedInstance)), method_getImplementation(newSharedInstanceMethod));     \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}       \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CALL_LESSER_SINGLETON_INIT_METHOD(SS_CLASSNAME,__INIT_CALL__) \</span>
</span><span class='line'><span class="cp">CALL_LESSER_SINGLETON_INIT_METHOD_PRE(SS_CLASSNAME); \</span>
</span><span class='line'><span class="cp">_##SS_CLASSNAME##_sharedInstance = [[self alloc] __INIT_CALL__];        \</span>
</span><span class='line'><span class="cp">CALL_LESSER_SINGLETON_INIT_METHOD_POST(SS_CLASSNAME)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* SYNTHESIZE_SINGLETON_FOR_CLASS */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
使用时也非常方便，该头文件也已给出使用方法，在这里我在说一下，供那些E文不好的同学使用。</p>

<p>使用这种方式首先把该头文件加到我们的项目中，然后直接使用就可以了：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="s">&quot;SynthesizeSingleton.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">Singleton</span> : <span class="nc">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER</span><span class="p">(</span><span class="n">Singleton</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//定义该类的属性，方法等&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton.m  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Singleton</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SYNTHESIZE_SINGLETON_FOR_CLASS</span><span class="p">(</span><span class="n">Singleton</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//属性方法的实现&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如此一来在使用时，通过<code>[Singleton sharedInstance]</code>就可以获得该类的单例对象了。
这种方法由于有了这个头文件的支持，所以使得使用单例方便多了，而且也避免了多线程的问题。</p>

<h5>第三种</h5>

<p>这是最后一种也是我最推荐的一种。<code>iOS</code>在4.0以后推出了<code>block</code>和<code>GCD</code>，这两个特性给<code>iOS</code>开发带来的很大的便利，也使开发变得更加趣味话。那么如何通过<code>GCD</code>+<code>block</code>来实现单例模式呢，这主要归功于<code>dispatch_once(dispatch_once_t *predicate, ^(void)block)</code>这个<code>GCD</code>的函数，他有两个参数第一参数是一个指向<code>dispatch_once_t</code>类型结构体的指针，用来测试<code>block</code>是否执行完成，该指针所指向的结构体必须是全局的或者静态的，第二个参数是一个返回值与参数均为空的<code>block</code>，在<code>block</code>体中进行对象的初始化即可。<code>dispatch_once</code>在程序的生命周期中保证只会被调用一次，所以在多线程中也不会有问题。
该种方法使用方法：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">Singleton</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Singleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Singleton</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用该种方法只需要这简单的几句代码就可以实现单例了。使用起来非常方便，但是这种创建单例的方法也不是完美的，它并不能阻止人们通过<code>alloc</code>方法来实例化一个对象，所以这并不是严格意义上的单例模式，但是一般程序都是我们自己写，我们自己记得就好了，这也没什么可担心的，从这一点上来说第二种方法又是比较好的，具体使用的时候呢，根据实际情况来吧，各取所需就好了。</p>
]]></content>
  </entry>
  
</feed>
