<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: iOS | GeekerProbe]]></title>
  <link href="http://blog.wtlucky.com/tags/ios/atom.xml" rel="self"/>
  <link href="http://blog.wtlucky.com/"/>
  <updated>2015-02-27T17:35:50+08:00</updated>
  <id>http://blog.wtlucky.com/</id>
  <author>
    <name><![CDATA[wtlucky ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Cocoapods创建私有podspec]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/"/>
    <updated>2015-02-26T16:14:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/"><code>Cocoapods</code></a>是非常好用的一个<code>iOS</code>依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及将自己的项目中的公共组件交由它去管理。<code>Cocoapods</code>的介绍及优点本文就不在赘述，我开始使用<code>Cocoapods</code>还是在两年前，那个时候它刚刚出现，网上的资料还非常的少，就连他们自己的<code>HomePage</code>都十分的简单，我就着手尝试着使用了一下，用它管理起第三方库确实是十分的方便顺手。后来它有了更强大的功能就是自己创建<code>podspec</code>，更可以设置私有的库。</p>

<p>春节回来上班，没有什么任务做，正好项目中有一些公共组件需要从庞大的项目体系中剥离出来，而且年前项目终于从<code>SVN</code>迁移到了<code>Git</code>，真是喜大普奔，大快人心！这样项目使用<code>Cocoapods</code>就有了条件，正好趁着这两天没有什么事情做，学习一下创建私有的<code>podspec</code>并在项目中部署使用，以及<code>pods</code>的<code>subspec</code>的创建及使用。<!-- More --></p>

<hr />

<p>整体先说明一下创建一个私有的<code>podspec</code>包括如下那么几个步骤：</p>

<ol>
<li>创建并设置一个私有的<code>Spec Repo</code>。</li>
<li>创建<code>Pod</code>的所需要的项目工程文件，并且有可访问的项目版本控制地址。</li>
<li>创建<code>Pod</code>所对应的<code>podspec</code>文件。</li>
<li>本地测试配置好的<code>podspec</code>文件是否可用。</li>
<li>向私有的<code>Spec Repo</code>中提交<code>podspec</code>。</li>
<li>在个人项目中的<code>Podfile</code>中增加刚刚制作的好的<code>Pod</code>并使用。</li>
<li>更新维护<code>podspec</code>。</li>
</ol>


<p>在这一系列的步骤中需要创建两个<code>Git仓库</code>，分别是第一步和第二步（第二步不一定非要是<code>Git仓库</code>，只要是可以获取到相关代码文件就可以，也可以是<code>SVN</code>的，也可以说<code>zip包</code>，区别就是在<code>podspec</code>中的<code>source</code>项填写的内容不同），并且第一步只是在初次创建私有<code>podspec</code>时才需要，之后在创建其他的只需要从第二步开始就可以。本文只介绍在<code>Git</code>环境下的操作，其他环境其他方式暂不说明。</p>

<h3>创建私有<code>Spec Repo</code></h3>

<p>先来说第一步，什么是<code>Spec Repo</code>？他是所有的<code>Pods</code>的一个索引，就是一个容器，所有公开的<code>Pods</code>都在这个里面，他实际是一个<code>Git仓库</code><a href="https://github.com/CocoaPods/Specs"><code>remote端</code>
</a>在<code>GitHub</code>上，但是当你使用了<code>Cocoapods</code>后他会被<code>clone</code>到本地的<code>~/.cocoapods/repos</code>目录下，可以进入到这个目录看到<code>master</code>文件夹就是这个官方的<code>Spec Repo</code>了。这个<code>master</code>目录的结构是这个样子的
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── Specs&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;└── <span class="o">[</span>SPEC_NAME<span class="o">]</span>
</span><span class='line'>    └── <span class="o">[</span>VERSION<span class="o">]</span>
</span><span class='line'>        └── <span class="o">[</span>SPEC_NAME<span class="o">]</span>.podspec
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
因此我们需要创建一个类似于<code>master</code>的私有<code>Spec Repo</code>，这里我们可以<code>fork</code>官方的<code>Repo</code>，也可以自己创建，个人建议不<code>fork</code>，因为你只是想添加自己的<code>Pods</code>，没有必要把现有的公开<code>Pods</code>都<code>copy</code>一份。所以创建一个
<code>Git仓库</code>，这个仓库你可以创建私有的也可以创建公开的，不过既然私有的<code>Spec Repo</code>，还是创建私有的仓库吧，需要注意的就是如果项目中有其他同事共同开发的话，你还要给他这个<code>Git仓库</code>的权限。因为<code>GitHub</code>的私有仓库是收费的，我还不是<code>GitHub</code>的付费用户，所以我使用了其他<code>Git</code>服务，我使用的是<a href="https://coding.net"><code>CODING</code></a>，当然还有其他的可供选择<a href="http://git.oschina.net/"><code>开源中国</code></a>、<a href="https://bitbucket.org/"><code>Bitbucket</code></a>以及<a href="https://code.csdn.net/"><code>CSDN</code></a></p>

<p>创建完成之后在<code>Terminal</code>中执行如下命令
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="c"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span>
</span><span class='line'><span class="nv">$ </span>pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git
</span></code></pre></td></tr></table></div></figure></notextile></div>
此时如果成功的话进入到<code>~/.cocoapods/repos</code>目录下就可以看到<code>WTSpecs</code>这个目录了。至此第一步创建私有<code>Spec Repo</code>完成。</p>

<p>PS：如果有其他合作人员共同使用这个私有<code>Spec Repo</code>的话在他有对应<code>Git仓库</code>的权限的前提下执行相同的命令添加这个<code>Spec Repo</code>即可。</p>

<h3>创建<code>Pod</code>项目工程文件</h3>

<p>这个第二步没有什么好介绍的，如果是有现有的组件项目，并且在<code>Git</code>的版本管理下，那么这一步就算完成了，可以直接进行下一步了。</p>

<p>如果你的组件还在你冗余庞大的项目中，需要拆分出来或者需要自己从零开始创建一个组件库，那么我建议你使用<code>Cocoapods</code>提供的一个工具将第二步与第三步结合起来做。</p>

<p>现在来说一下这个工具，相关的文档介绍是<a href="http://guides.cocoapods.org/making/using-pod-lib-create">Using Pod Lib Create</a>
就拿我创建的<code>podTestLibrary</code>为例子具体讲一下这里是如何操作的，先<code>cd</code>到要创建项目的目录然后执行
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib create podTestLibrary
</span></code></pre></td></tr></table></div></figure></notextile></div>
之后他会问你四个问题，1.是否需要一个例子工程；2.选择一个测试框架；3.是否基于View测试；4.类的前缀；4个问题的具体介绍可以去看官方文档，我这里选择的是1.yes；2.Specta/Expecta；3.yes；4.PTL。
问完这4个问题他会自动执行<code>pod install</code>命令创建项目并生成依赖。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tree PodTestLibrary -L 2
</span><span class='line'>PodTestLibrary
</span><span class='line'>├── Example                                    <span class="c">#demo APP</span>
</span><span class='line'>│   ├── PodTestLibrary
</span><span class='line'>│   ├── PodTestLibrary.xcodeproj
</span><span class='line'>│   ├── PodTestLibrary.xcworkspace
</span><span class='line'>│   ├── Podfile                                <span class="c">#demo APP 的依赖描述文件</span>
</span><span class='line'>│   ├── Podfile.lock
</span><span class='line'>│   ├── Pods                                <span class="c">#demo APP 的依赖文件</span>
</span><span class='line'>│   └── Tests
</span><span class='line'>├── LICENSE                                 <span class="c">#开源协议 默认MIT</span>
</span><span class='line'>├── Pod                                         <span class="c">#组件的目录</span>
</span><span class='line'>│   ├── Assets                              <span class="c">#资源文件</span>
</span><span class='line'>│   └── Classes                                <span class="c">#类文件</span>
</span><span class='line'>├── PodTestLibrary.podspec             <span class="c">#第三步要创建的podspec文件</span>
</span><span class='line'>└── README.md                              <span class="c">#markdown格式的README&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;9 directories, 5 files
</span></code></pre></td></tr></table></div></figure></notextile></div>
以上是项目生成的目录结构及相关介绍。</p>

<p>接下来就是向<code>Pod</code>文件夹中添加库文件和资源，并配置<code>podspec</code>文件，我把一个网络模块的共有组件放入<code>Pod/Classes</code>中，然后进入<code>Example</code>文件夹执行<code>pod update</code>命令，再打开项目工程可以看到，刚刚添加的组件已经在<code>Pods</code>子工程下<code>Development Pods/PodTestLibrary</code>中了，然后编辑demo工程，测试组件，我并没有使用提供的测试框架进行测试，这里就先不介绍了。</p>

<p><em>注：</em>这里需要注意的是每当你向<code>Pod</code>中添加了新的文件或者以后更新了<code>podspec</code>的版本都需要重新执行一遍<code>pod update</code>命令。</p>

<p>测试无误后需要将该项目添加并推送到远端仓库，并编辑<code>podspec</code>文件。</p>

<p>通过<code>Cocoapods</code>创建出来的目录本身就在本地的<code>Git</code>管理下，我们需要做的就是给它添加远端仓库，同样去<code>GitHub</code>或其他的<code>Git</code>服务提供商那里创建一个私有的仓库，拿到<code>SSH</code>地址，然后<code>cd</code>到<code>PodTestLibrary</code>目录</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -s -m <span class="s2">&quot;Initial Commit of Library&quot;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin git@coding.net:wtlucky/podTestLibrary.git           <span class="c">#添加远端仓库</span>
</span><span class='line'><span class="nv">$ </span>git push origin master     <span class="c">#提交到远端仓库</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因为<code>podspec</code>文件中获取<code>Git</code>版本控制的项目还需要<code>tag</code>号，所以我们要打上一个<code>tag</code>，</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git tag -m <span class="s2">&quot;first release&quot;</span> <span class="s2">&quot;0.1.0&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push --tags     <span class="c">#推送tag到远端仓库</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>做完这些就可以开始编辑<code>podspec</code>文件了，它是一个<code>Ruby</code>的文件，把编辑器的格式改成<code>Ruby</code>就能看到语法高亮，下面我贴上我的<code>podspec</code>文件，并在后面以注释的形式说明每个字段的含义，没有涉及到的字段可以去<a href="http://guides.cocoapods.org/syntax/podspec.html">官方文档</a>查阅</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Pod::Spec.new do |s|</span>
</span><span class='line'><span class="sr">  s.name             = &quot;PodTestLibrary&quot;    #名称</span>
</span><span class='line'><span class="sr">  s.version          = &quot;0.1.0&quot;             #版本号</span>
</span><span class='line'><span class="sr">  s.summary          = &quot;Just Testing.&quot;     #简短介绍，下面是详细介绍</span>
</span><span class='line'><span class="sr">  s.description      = &amp;lt;&amp;lt;-DESC&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                   <span class="no">Testing</span> <span class="no">Private</span> <span class="no">Podspec</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>                   <span class="o">*</span> <span class="no">Markdown</span> <span class="nb">format</span><span class="o">.</span>
</span><span class='line'>                   <span class="o">*</span> <span class="no">Don</span><span class="s1">&#39;t worry about the indent, we strip it!</span>
</span><span class='line'><span class="s1">                   DESC</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  s.homepage         = &quot;https://coding.net/u/wtlucky/p/podTestLibrary&quot;                           #主页,这里要填写可以访问到的地址，不然验证不通过</span>
</span><span class='line'><span class="s1">  # s.screenshots     = &quot;www.example.com/screenshots_1&quot;, &quot;www.example.com/screenshots_2&quot;           #截图</span>
</span><span class='line'><span class="s1">  s.license          = &#39;</span><span class="no">MIT</span><span class="s1">&#39;              #开源协议</span>
</span><span class='line'><span class="s1">  s.author           = { &quot;wtlucky&quot; =&gt; &quot;wtlucky@foxmail.com&quot; }                   #作者信息</span>
</span><span class='line'><span class="s1">  s.source           = { :git =&gt; &quot;https://coding.net/wtlucky/podTestLibrary.git&quot;, :tag =&gt; &quot;0.1.0&quot; }      #项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS</span>
</span><span class='line'><span class="s1">  # s.social_media_url = &#39;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">twitter</span><span class="o">.</span><span class="n">com</span><span class="o">/&lt;</span><span class="no">TWITTER_USERNAME</span><span class="o">&gt;</span><span class="s1">&#39;                       #多媒体介绍地址&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  s.platform     = :ios, &#39;</span><span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="s1">&#39;            #支持的平台及版本</span>
</span><span class='line'><span class="s1">  s.requires_arc = true                   #是否使用ARC，如果指定具体文件，则具体的问题使用ARC&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  s.source_files = &#39;</span><span class="no">Pod</span><span class="o">/</span><span class="no">Classes</span><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="sr">/*&#39;     #代码源文件地址，&lt;/s</span><span class="n">trong</span><span class="o">&gt;</span><span class="sr">/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</span>
</span><span class='line'><span class="sr">  s.resource_bundles = {&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s1">&#39;PodTestLibrary&#39;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="s1">&#39;Pod/Assets/*.png&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="p">}</span>                                       <span class="c1">#资源文件地址&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">s</span><span class="o">.</span><span class="n">public_header_files</span> <span class="o">=</span> <span class="s1">&#39;Pod/Classes/&lt;em&gt;*/&lt;/em&gt;.h&#39;</span>   <span class="c1">#公开头文件地址</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">frameworks</span> <span class="o">=</span> <span class="s1">&#39;UIKit&#39;</span>                  <span class="c1">#所需的framework，多个用逗号隔开</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span> <span class="s1">&#39;AFNetworking&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3&#39;</span>   <span class="c1">#依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>编辑完<code>podspec</code>文件后，需要验证一下这个文件是否可用，如果有任何<code>WARNING</code>或者<code>ERROR</code>都是不可以的，它就不能被添加到<code>Spec Repo</code>中，不过<code>xcode</code>的<code>WARNING</code>是可以存在的，验证需要执行一下命令
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib lint
</span></code></pre></td></tr></table></div></figure></notextile></div>
当你看到
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> -&gt; PodTestLibrary <span class="o">(</span>0.1.0<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PodTestLibrary passed validation.
</span></code></pre></td></tr></table></div></figure></notextile></div>
时，说明验证通过了，不过这只是这个<code>podspec</code>文件是合格的，不一定说明这个<code>Pod</code>是可以用的，我们需要在本地做一下验证，这就是第四步的内容了，第四步在具体说明。</p>

<h3>创建<code>podspec</code>文件</h3>

<p>如果从第二步过来，已经有了现成的项目，那么就需要给这个项目创建一个<code>podspec</code>文件，创建它需要执行<code>Cocoapods</code>的另外一个命令，<a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html">官方文档</a>在这里
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod spec create PodTestLibrary git@coding.net:wtlucky/podTestLibrary.git
</span></code></pre></td></tr></table></div></figure></notextile></div>
执行完之后，就创建了一个<code>podspec</code>文件，他其中会包含很多内容，可以按照我之前介绍的进行编辑，没用的删掉。编辑完成之后使用验证命令验证一下
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod lib lint
</span></code></pre></td></tr></table></div></figure></notextile></div>
验证无误就可以进入下一步了。</p>

<h3>本地测试<code>podspec</code>文件</h3>

<p>我们可以创建一个新的项目，在这个项目的<code>Podfile</code>文件中直接指定刚才创建编辑好的<code>podspec</code>文件，看是否可用。
在<code>Podfile</code>中我们可以这样编辑，有两种方式</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;pod &#39;PodTestLibrary&#39;, :path =&gt; &#39;~/</span><span class="n">code</span><span class="o">/</span><span class="no">Cocoapods</span><span class="o">/</span><span class="n">podTest</span><span class="o">/</span><span class="no">PodTestLibrary</span><span class="s1">&#39;      #指定路径</span>
</span><span class='line'><span class="s1">pod &#39;</span><span class="no">PodTestLibrary</span><span class="s1">&#39;, :podspec =&gt; &#39;</span><span class="o">~</span><span class="sr">/code/</span><span class="no">Cocoapods</span><span class="o">/</span><span class="n">podTest</span><span class="o">/</span><span class="no">PodTestLibrary</span><span class="o">/</span><span class="no">PodTestLibrary</span><span class="o">.</span><span class="n">podspec</span><span class="err">&#39;</span>  <span class="c1">#指定podspec文件</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后执行<code>pod install</code>命令安装依赖，打开项目工程，可以看到库文件都被加载到<code>Pods</code>子项目中了，不过它们并没有在<code>Pods</code>目录下，而是跟测试项目一样存在于<code>Development Pods/PodTestLibrary</code>中，这是因为我们是在本地测试，而没有把<code>podspec</code>文件添加到<code>Spec Repo</code>中的缘故。</p>

<p>在项目中编写代码，测试库文件无误后就可以开始下一步了，提交<code>podspec</code>到<code>Spec Repo</code>中。</p>

<h3>向<code>Spec Repo</code>提交<code>podspec</code></h3>

<p>向<code>Spec Repo</code>提交<code>podspec</code>需要完成两点一个是<code>podspec</code>必须通过验证无误，在一个就是删掉无用的注释（这个不是必须的，为了规范还是删掉吧）。
向我们的私有<code>Spec Repo</code>提交<code>podspec</code>只需要一个命令
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo push WTSpecs PodTestLibrary.podspec  <span class="c">#前面是本地Repo名字 后面是podspec名字</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
完成之后这个组件库就添加到我们的私有<code>Spec Repo</code>中了，可以进入到<code>~/.cocoapods/repos/WTSpecs</code>目录下查看
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── PodTestLibrary
</span><span class='line'>│   └── 0.1.0
</span><span class='line'>│       └── PodTestLibrary.podspec
</span><span class='line'>└── README.md
</span></code></pre></td></tr></table></div></figure></notextile></div>
再去看我们的<code>Spec Repo</code>远端仓库，也有了一次提交，这个<code>podspec</code>也已经被<code>Push</code>上去了。</p>

<p>至此，我们的这个组件库就已经制作添加完成了，使用<code>pod search</code>命令就可以查到我们自己的库了
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod search PodTestLibrary&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-&gt; PodTestLibrary <span class="o">(</span>0.1.0<span class="o">)</span>
</span><span class='line'>   Just Testing.
</span><span class='line'>   pod <span class="s1">&#39;PodTestLibrary&#39;</span>, <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span><span class='line'>   - Homepage: https://coding.net/u/wtlucky/p/podTestLibrary
</span><span class='line'>   - Source:   https://coding.net/wtlucky/podTestLibrary.git
</span><span class='line'>   - Versions: 0.1.0 <span class="o">[</span>WTSpecs repo<span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里说的是添加到私有的<code>Repo</code>，如果要添加到<code>Cocoapods</code>的官方库了，可以使用<code>trunk</code>工具，具体可以查看<a href="http://guides.cocoapods.org/making/getting-setup-with-trunk.html">官方文档</a></p>

<h3>使用制作好的<code>Pod</code></h3>

<p>在完成这一系列步骤之后，我们就可以在正式项目中使用这个私有的<code>Pod</code>了只需要在项目的<code>Podfile</code>里增加以下一行代码即可
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">pod</span> <span class="s1">&#39;PodTestLibrary&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后执行<code>pod update</code>，更新库依赖，然后打卡项目可以看到，我们自己的库文件已经出现在<code>Pods</code>子项目中的<code>Pods</code>子目录下了，而不再是<code>Development Pods</code>。</p>

<h3>更新维护<code>podspec</code></h3>

<p>最后再来说一下制作好的<code>podspec</code>文件后续的更新维护工作，比如如何添加新的版本，如何删除<code>Pod</code>。</p>

<p>我已经制作好了<code>PodTestLibrary</code>的<code>0.1.0</code>版本，现在我对他进行升级工作，这次我添加了更多的模块到<code>PodTestLibrary</code>之中，包括工具类，底层<code>Model</code>及<code>UIKit</code>扩展等，这里又尝试了一下<code>subspec</code>功能，给<code>PodTestLibrary</code>创建了多个子分支。</p>

<p>具体做法是先将源文件添加到<code>Pod/Classes</code>中，然后按照不同的模块对文件目录进行整理，因为我有四个模块，所以在<code>Pod/Classes</code>下有创建了四个子目录，完成之后继续编辑之前的<code>PodTestLibrary.podspec</code>，这次增加了<code>subspec</code>特性
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Pod</span><span class="p">:</span><span class="ss">:Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>             <span class="o">=</span> <span class="s2">&quot;PodTestLibrary&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>          <span class="o">=</span> <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>          <span class="o">=</span> <span class="s2">&quot;Just Testing.&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">description</span>      <span class="o">=</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span><span class="no">DESC</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;                   Testing Private Podspec.</span>
</span><span class='line'>
</span><span class='line'><span class="sr">                   * Markdown format.</span>
</span><span class='line'><span class="sr">                   * Don&#39;t worry about the indent, we strip it!</span>
</span><span class='line'><span class="sr">                   DESC</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  s.homepage         = &quot;https:/</span><span class="o">/</span><span class="n">coding</span><span class="o">.</span><span class="n">net</span><span class="o">/</span><span class="n">u</span><span class="o">/</span><span class="n">wtlucky</span><span class="o">/</span><span class="nb">p</span><span class="o">/</span><span class="n">podTestLibrary</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  # s.screenshots     = &quot;</span><span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">screenshots_1</span><span class="s2">&quot;, &quot;</span><span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">screenshots_2</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  s.license          = &#39;MIT&#39;</span>
</span><span class='line'><span class="s2">  s.author           = { &quot;</span><span class="n">wtlucky</span><span class="s2">&quot; =&gt; &quot;</span><span class="n">wtlucky</span><span class="vi">@foxmail</span><span class="o">.</span><span class="n">com</span><span class="s2">&quot; }</span>
</span><span class='line'><span class="s2">  s.source           = { :git =&gt; &quot;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">coding</span><span class="o">.</span><span class="n">net</span><span class="o">/</span><span class="n">wtlucky</span><span class="o">/</span><span class="n">podTestLibrary</span><span class="o">.</span><span class="n">git</span><span class="s2">&quot;, :tag =&gt; &quot;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="s2">&quot; }</span>
</span><span class='line'><span class="s2">  # s.social_media_url = &#39;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.platform     = :ios, &#39;7.0&#39;</span>
</span><span class='line'><span class="s2">  s.requires_arc = true&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #s.source_files = &#39;Pod/Classes/&lt;strong&gt;/&lt;em&gt;&#39;</span>
</span><span class='line'><span class="s2">  #s.resource_bundles = {</span>
</span><span class='line'><span class="s2">  #  &#39;PodTestLibrary&#39; =&gt; [&#39;Pod/Assets/&lt;/em&gt;.png&#39;]</span>
</span><span class='line'><span class="s2">  #}</span>
</span><span class='line'><span class="s2">  #s.public_header_files = &#39;Pod/Classes/&lt;/strong&gt;/*.h&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.subspec &#39;NetWorkEngine&#39; do |networkEngine|&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;  networkEngine.source_files = &#39;Pod/Classes/NetworkEngine/**/*&#39;</span>
</span><span class='line'><span class="s2">  networkEngine.public_header_files = &#39;Pod/Classes/NetworkEngine/**/*.h&#39;</span>
</span><span class='line'><span class="s2">  networkEngine.dependency &#39;AFNetworking&#39;, &#39;~&amp;gt; 2.3&#39;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.subspec &#39;DataModel&#39; do |dataModel|&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;  dataModel.source_files = &#39;Pod/Classes/DataModel/**/*&#39;</span>
</span><span class='line'><span class="s2">  dataModel.public_header_files = &#39;Pod/Classes/DataModel/**/*.h&#39;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.subspec &#39;CommonTools&#39; do |commonTools|&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;  commonTools.source_files = &#39;Pod/Classes/CommonTools/**/*&#39;</span>
</span><span class='line'><span class="s2">  commonTools.public_header_files = &#39;Pod/Classes/CommonTools/**/*.h&#39;</span>
</span><span class='line'><span class="s2">  commonTools.dependency &#39;OpenUDID&#39;, &#39;~&amp;gt; 1.0.0&#39;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.subspec &#39;UIKitAddition&#39; do |ui|&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;  ui.source_files = &#39;Pod/Classes/UIKitAddition/**/*&#39;</span>
</span><span class='line'><span class="s2">  ui.public_header_files = &#39;Pod/Classes/UIKitAddition/**/*.h&#39;</span>
</span><span class='line'><span class="s2">  ui.resource = &quot;</span><span class="no">Pod</span><span class="o">/</span><span class="no">Assets</span><span class="o">/</span><span class="no">MLSUIKitResource</span><span class="o">.</span><span class="n">bundle</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  ui.dependency &#39;PodTestLibrary/CommonTools&#39;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  s.frameworks = &#39;UIKit&#39;</span>
</span><span class='line'><span class="s2">  #s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 2.3&#39;</span>
</span><span class='line'><span class="s2">  #s.dependency &#39;OpenUDID&#39;, &#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因为我们创建了<code>subspec</code>所以项目整体的依赖<code>dependency</code>，源文件<code>source_files</code>，头文件<code>public_header_files</code>，资源文件<code>resource</code>等都移动到了各自的<code>subspec</code>中，每个<code>subspec</code>之间也可以有相互的依赖关系，比如<code>UIKitAddition</code>就依赖于<code>CommonTools</code>。</p>

<p>编辑完成之后，在测试项目里<code>pod update</code>一下，几个子项目都被加进项目工程了，写代码验证无误之后，就可以将这个工程<code>push</code>到远端仓库，并打上新的<code>tag</code>-><code>1.0.0</code>。</p>

<p>最后再次使用<code>pod lib lint</code>验证编辑好的<code>podsepc</code>文件，没有自身的<code>WARNING</code>或者<code>ERROR</code>之后，就可以再次提交到<code>Spec Repo</code>中了，命令跟之前是一样的
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo push WTSpecs PodTestLibrary.podspec
</span></code></pre></td></tr></table></div></figure></notextile></div>
之后再次到<code>~/.cocoapods/repos/WTSpecs</code>目录下查看
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── PodTestLibrary
</span><span class='line'>│   ├── 0.1.0
</span><span class='line'>│   │   └── PodTestLibrary.podspec
</span><span class='line'>│   └── 1.0.0
</span><span class='line'>│       └── PodTestLibrary.podspec
</span><span class='line'>└── README.md&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3 directories, 4 files
</span></code></pre></td></tr></table></div></figure></notextile></div>
已经有两个版本了，使用<code>pod search</code>查找得到的结果为
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod search PodTestLibrary&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-&gt; PodTestLibrary <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>   Just Testing.
</span><span class='line'>   pod <span class="s1">&#39;PodTestLibrary&#39;</span>, <span class="s1">&#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'>   - Homepage: https://coding.net/u/wtlucky/p/podTestLibrary
</span><span class='line'>   - Source:   https://coding.net/wtlucky/podTestLibrary.git
</span><span class='line'>   - Versions: 1.0.0, 0.1.0 <span class="o">[</span>WTSpecs repo<span class="o">]</span>
</span><span class='line'>   - Sub specs:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; - PodTestLibrary/NetWorkEngine <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'> - PodTestLibrary/DataModel <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'> - PodTestLibrary/CommonTools <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'> - PodTestLibrary/UIKitAddition <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>完成这些之后，在实际项目中我们就可以选择使用整个组件库或者是组件库的某一个部分了，对应的<code>Podfile</code>中添加的内容为
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;pod &#39;PodTestLibrary/</span><span class="no">NetWorkEngine</span><span class="s1">&#39;, &#39;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="s1">&#39;  #使用某一个部分</span>
</span><span class='line'><span class="s1">pod &#39;</span><span class="no">PodTestLibrary</span><span class="o">/</span><span class="no">UIKitAddition</span><span class="s1">&#39;, &#39;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="s1">&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;pod &#39;</span><span class="no">PodTestLibrary</span><span class="s1">&#39;, &#39;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>   <span class="c1">#使用整个库</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最后介绍一下如何删除一个私有<code>Spec Repo</code>，只需要执行一条命令即可
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo remove WTSpecs
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样这个<code>Spec Repo</code>就在本地删除了，我们还可以通过
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod repo add WTSpecs git@coding.net:wtlucky/WTSpecs.git
</span></code></pre></td></tr></table></div></figure></notextile></div>
再把它给加回来。</p>

<p>如果我们要删除私有<code>Spec Repo</code>下的某一个<code>podspec</code>怎么操作呢，此时无需借助<code>Cocoapods</code>，只需要<code>cd</code>到<code>~/.cocoapods/repos/WTSpecs</code>目录下，删掉库目录
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>rm -Rf PodTestLibrary
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后在将<code>Git</code>的变动<code>push</code>到远端仓库即可
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git add --all .
</span><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git ci -m <span class="s2">&quot;remove unuseful pods&quot;</span>
</span><span class='line'>wtlucky@wtluckydeMacBook-Pro:~/.cocoapods/repos/WTSpecs<span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>参考资料</h2>

<blockquote><p><a href="http://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a></p>

<p><a href="http://blog.grio.com/2014/11/creating-a-private-cocoapod.html">Creating a Private CocoaPod</a></p>

<p><a href="http://www.objectpartners.com/2014/06/25/developing-private-in-house-libraries-with-cocoapods/">Developing Private In-House Libraries with CocoaPods</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个特殊的iPhone6 Plus适配问题]]></title>
    <link href="http://blog.wtlucky.com/blog/2015/01/29/adapt-view-for-iphone6-plus/"/>
    <updated>2015-01-29T21:13:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2015/01/29/adapt-view-for-iphone6-plus</id>
    <content type="html"><![CDATA[<p>最近项目在搞适配，目前的适配原则是不改变既有的设计图的设计样式，使用<code>@3x</code>的图片去进行完美适配。即不涉及到某一个模块在<code>iPhone5</code>及以下的设备上是一个展示样式，在<code>iPhone6</code>或着<code>iPhone6 Plus</code>上是另外的一个展示样式。单纯是这样的需求通过<code>Auto Resizing</code>和<code>AutoLayout</code>就完全可以应付的了。以前硬编码写的view的frame通过乘上一个屏幕放大的比例系数也可以搞定。</p>

<p>可是目前设计同学提出在一个使用<code>collection view</code>的页面中，之前是通过各种设备使用同一个大小的<code>cell</code>，不同的屏幕上拉大的是<code>cell</code>之间的间距来进行适配。现如今要改成只有在<code>6 Plus</code>上要将<code>cell</code>上半部分等比例放大，<code>cell</code>中下半部分的文字的字号也放大。目前的需求就是这个样子，其实我觉得这样适配就不是苹果的设计规范，按道理说屏幕大了看的内容多才对，这样搞个等比例放大，跟没有适配在兼容模式下运行的效果似地。不过需求来了还是得搞。</p>

<!-- More -->


<p>这个<code>cell</code>本来就是使用<code>AutoLayout</code>做的，但是之前是定高定宽的，图片的宽度被限制死了，即使是在<code>collocation view</code>的代理方法中将<code>cell</code>设大，<code>cell</code>的图片也不会变大。而且还需要把字体一并放大，以及图片左上和右下的两个图片的位置是要成比例设置的，这样之前设置的<code>heading space</code> 和 <code>trailing space</code>是固定值，也不能达到要求。先来看一下这个<code>cell</code>，因为项目的保密性我没有展示全部的内容，只是列举了一部分，但足以说明问题。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2015/01/QQ20150129-1.jpg"></p>

<p>因为使用的是<code>xcode6</code>，苹果提供了<code>Size Classes</code>这样强大的一个功能，为的是制作<code>adaptive UI</code>。就是只制作一套UI，但是可以适配多个屏幕尺寸以及选装方向，之前没有仔细研究过这个新特性，只是觉得他应该能应付当前的需求，因为使用它可以为每一种<code>size</code>设置一套<code>constraint</code>和字体大小。很好很强大！</p>

<p>但是当开始使用时发现，没有一个<code>size</code>是能够单独区分出<code>6 Plus</code>的<code>portrait</code>模式的，到时能区分出<code>landscape</code>模式。<code>6 Plus</code>的<code>portrait</code>模式使用的是<code>Regular height</code>和<code>Compact width</code>，其他的设备的<code>portrait</code>模式使用的也是<code>Regular height</code>和<code>Compact width</code>。但是<code>Any height</code>和<code>Compact width</code>这个<code>size</code>对应的是<code>6 Plus</code>以外其他设备的<code>portrait</code>和<code>landscape</code>模式。如图所示，</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2015/01/QQ20150129-3.jpg"></p>

<p>这里正好不包括<code>6 Plus</code>，分别设置了这两种<code>size</code>发现不是预期的效果，所有的手机都使用了<code>Regular height</code>和<code>Compact width</code>的这个<code>size</code>。后来有看见了这个优先级的表格，</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2015/01/QQ20150129-2.jpg"></p>

<p>一旦设置了这个<code>size</code>那么就会优先加载这个<code>size</code>，所以这条路目前是行不通的，我觉得一定有其他的方法来通过<code>Size Classes</code>解决，或者通过代码修改优先级，或者使用某种方法标识<code>6 Plus</code>。由于我时间比较紧急，所以就没有继续使用这种方式，有知道的大神求告知啊，感激不尽！</p>

<p><code>Size Classes</code>行不通，又想了其他两种方案，一个是为<code>6 Plus</code>单独制作一个xib，让collection view在<code>6 Plus</code>上加载这个xib上的<code>cell</code>；另外一个是修改现有的<code>cell</code>上的<code>constraints</code>把固定图片的大小<code>constraint</code>干掉搞成自适应的，自适应不了的<code>constraint</code>通过<code>IBOutlet</code>在代码中进行修改。权衡了一下这两个方案，第一个目前的工作量比较小，但是后期维护很恶心，而且这种做法实在是太low。而第二种虽然开始开上去很复杂，工作量很大，但是搞定之后，维护修改起来也容易很多，毕竟只有一个UI。</p>

<p>所以选择第二种开工，自适应很好搞，把最大的那个圆圈与父view的<code>heading</code>和<code>trailing</code>设为<code>0</code>即可，难的是等比例，虽然用<code>AutoLayout</code>有几个月了但是用得都是<code>heading</code>、<code>trailing</code>、<code>vertical</code>、<code>horizontal</code>、<code>top</code>、<code>bottom</code> 还有<code>width</code>和<code>height</code>这几个<code>constraint</code>，他们就能解决我之前遇到的所有布局问题，连<code>alignment</code>的那几个<code>constraint</code>我都很少使用。但是这次需要用到<code>Aspect ratio</code>了，之前一直不知道这咋用，感谢这次需求让我知道了如何用他，最大的那个圆圈是正方形设置了左右间距就确定了宽度，而高度的确定就用<code>Aspect ratio</code>设置为<code>1:1</code>即可，同样圆圈左上和右下的图也是需要等比例放大的，他们的比例也是通过<code>Aspect ratio</code>来设置，这里的比例按照设计图写一下即可。这里发现<code>xcode</code>一个很奇怪的问题，就是按住<code>ctrl</code>从一个view拖向另外一个view选择<code>Aspect ratio</code>的时候，<code>xcode</code>为你生成的是一个view的<code>height</code>与另一个view的<code>width</code>的比，这个我一直不是很理解，虽然如果你在设置<code>Aspect ratio</code>之前把他们的<code>frame</code>设为正确的话，生成的比例是正确的，但是这样真的很奇怪，可读性特别差，为什么要一个高比上另外一个的宽呢？我承认我数学学的不好，这里可能有其他的深刻含义，但是我觉得好奇怪，如果有人知道欢迎留言评论！所以这里我又手动的把一个view的<code>height</code>改为<code>width</code>，即宽比上宽，按照设计图修改一下比例。还有一个问题是圆圈的左上有右下的view的位置是要相应改变的，也是按照比例，设置固定的值肯定是不行的，因为值也是会变得，这里再次感谢这个需求，让我又一次加深的<code>AutoLayout</code>的理解，<code>AutoLayout</code>中的约束其实是一个二元一次方程，如图所示</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2015/01/QQ20150129-4.jpg"></p>

<p><code>First item = Second item * Multiplier + Constant</code>，
一个值是可以通过另外一个值通过这个方程式计算出来的，而我们所加的约束就是设置了<code>Multiplier</code>和<code>Constant</code>，再加上优先级，两者的属性（上下左右宽高等）以及两者的关系（大于小于等于），这些共同组成了一个<code>constraint</code>。 xcode默认创建的<code>constraint</code>的<code>Multiplier</code>为<code>1</code>，我之前使用的所有<code>constraint</code>也都是使用的是<code>1</code>，从没有改变过他，从方程式来看这里是可以按比例设置的。不得不说<code>AutoLayout</code>真的很强大，自己用到的仅仅是冰山一角。</p>

<p>那圆圈右下角的view举例子，首先设置他的x轴距离，据父view一个是<code>heading</code>一个是<code>trailing</code>，因为父view的<code>heading</code>是<code>0</code>，无论<code>Multiplier</code>设置什么相乘都是零，所以只能用<code>trailing</code>，因为我们事先已经按照设计图将一个尺寸的界面拼出来了，当设置了<code>trailing</code>之后，<code>xcode</code>生成了一个<code>Multiplier</code>为<code>1</code>，<code>Constant</code>为一个固定值的<code>constraint</code>，这样不对，不能够按比例移动x轴位置，所以我们把<code>Constant</code>设为<code>0</code>，由公式算出<code>Multiplier</code>为<code>First item / Second item</code>并进行设置。确定了x方向的位置还需要y方向的位置，y这里又出现了另外一个坑，y方向父view的<code>top</code>为<code>0</code>不能这是比例，<code>bottom</code>由于有<code>Label</code>所以<code>bottom</code>的值是不确定的，所以就不能与父view做约束了，只能选择与圆圈做约束，这里使用的是<code>align bottom</code>。同理因为是按比例放大，这个<code>constraint</code>也不能使用定值，所以<code>Constant</code>设为<code>0</code>，公式算出<code>Multiplier</code>并设置。同样圆圈左上的view也这样设置即可。如此一来<code>cell</code>上半部分等比例放大的问题就搞定了。</p>

<p><code>cell</code>下半部分<code>Label</code>之间的间距这个是不能自适应的，<code>6 Plus</code>和其他设备是两个不同的值，这样就只能把他们的<code>constraint</code>拿到代码中去进行修改，label上字体也是只能在代码中<code>cell</code>第一次加载时判断为<code>6 Plus</code>就将他们的字体放大。将这一部分逻辑放在了<code>aweakFromNib</code>中</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">fequal</span><span class="p">(</span><span class="n">ScreenWidth</span><span class="p">,</span> <span class="mf">414.0f</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mf">16.0f</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">memberNumLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mf">15.0f</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">infoLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mf">13.0f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">icoTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">8.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">nameTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">33.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">memberCountTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">infoTopConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mf">10.0f</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里要说一下，判断<code>6 Plus</code>不能通过设备号去判断,<code>iPhone7,1</code>和<code>iPhone7,2</code>虽然是<code>iPhone6</code>和<code>iPhone6 Plus</code>没错，但是我们是在渲染界面，<code>iPhone6</code>和<code>iPhone6 Plus</code>是有一个放大模式的，在放大模式下<code>iPhone6 Plus</code>的屏幕尺寸是<code>iPhone6</code>的，<code>iPhone6</code>的屏幕尺寸是<code>iPhone5</code>的，所以如果通过设备号去判读那么渲染出来就是错误的，正确的方式是通过屏幕的尺寸来判断即<code>[UIScreen mainScreen].bounds.size</code>。</p>

<hr />

<p>写的很乱，因为是当天搞的，当天就记录下来，怕以后忘了，文笔不好，就凑合看吧，最后总结一下：</p>

<ol>
<li><code>Size Classes</code>还有待研究，如何区分出<code>iPhone6 Plus</code></li>
<li>学会了使用<code>Aspect ratio</code>，用于标记一个view的宽高比或者两个view的宽高比</li>
<li>在<code>AutoLayout</code>中使用<code>Multiplier</code>进行数值成比例改变的需求</li>
<li>在界面布局是不要使用设备号进行判别，要使用屏幕尺寸进行判断</li>
</ol>


<h2>参考资料</h2>

<blockquote><p><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LayoutandAppearance.html">Adaptivity and Layout</a></p>

<p><a href="https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/_index.html#//apple_ref/doc/uid/TP40014436">Size Classes Design Help</a></p>

<p><a href="http://mathewsanders.com/designing-adaptive-layouts-for-iphone-6-plus">ADAPTIVE LAYOUTS FOR iPHONE 6</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Xib Views - 使用XIB实现嵌套自定义视图]]></title>
    <link href="http://blog.wtlucky.com/blog/2014/08/10/nested-xib-views/"/>
    <updated>2014-08-10T15:18:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2014/08/10/nested-xib-views</id>
    <content type="html"><![CDATA[<p>在进行<code>iOS</code>开发的过程中，对于一些复杂的界面，我们可以通过<code>Interface Builder</code>这个<code>Xcode</code>集成的可视化界面编辑工具在完成，这回节省大部分时间以及代码量。它的使用方法这里不做介绍了，这次我要介绍是使用它来实现一个嵌套的自定义视图。解释一下就是，我们使用<code>IB</code>自定义了一个<code>View</code>，然后又在其他的<code>xib</code>文件中使用了这个<code>View</code>，那么这就是所谓的嵌套自定义视图。之所以要介绍它，是因为我自己在使用它的时候遇到了一些问题，一方面写下来做个记录供自己查看，另一方面我相信大家在使用的时候应该也会遇到这样的问题，方便大家。<!-- More --></p>

<p>下面使用的示例代码我已经放到<code>Github</code>上了，<a href="https://github.com/wtlucky/nestedXibLoad">项目地址</a>，有需要的朋友可以去查看，<code>Demo</code>非常简单，主要是介绍这个知识点。</p>

<h2>Question</h2>

<p>首先我们创建一个<code>SingleView</code>的工程，项目使用<code>StoryBoard</code>，（使用<code>Xib</code>也无所谓，因为有些老的项目可能还没有使用到<code>StoryBoard</code>），然后创建一个<code>CustomView</code>作为我们的自定义视图。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-1.jpg"></p>

<p>有时对于复杂的界面我们可能会拆分出来对它进行单独处理，又有可能它的界面布局很复杂，这时我们就会用<code>Interface Builder</code>对它的布局进行处理。这里的<code>CustomView</code>就是这样一个视图，所以我们为它创建一个<code>xib</code>文件，我们通常的作法就是把<code>xib</code>中的<code>View</code>的<code>custom class</code>更改为我们的<code>CustomView</code>。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-2.jpg"></p>

<p>接下来对我们的界面进行布局，并连接输出口，编写响应逻辑，这里我放了一个<code>ImageView</code>和一个<code>Label</code>在这里，并把<code>View</code>的背景色设置为浅灰色。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-3.jpg"></p>

<p>自定义的<code>View</code>制作完成，回到我们<code>ViewController</code>的<code>xib</code>文件，拖入两个<code>View</code>并把他们的<code>custom class</code>更改为<code>CustomView</code>。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-11.jpg"></p>

<p>这时，我们算是工作做完了，运行程序，结果悲剧了，怎么不是我们想要的结果，为什么只生成了两个空白的视图，我们视图上的图片和文字哪里去了？</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-5.jpg"></p>

<p>在<code>CustomView</code>中的<code>awakeFromeNib</code>方法中增加断点调试发现，在<code>CustomView</code>初始化完成后，<code>ImageView</code>和<code>Label</code>并没有被初始化，他们仍然是<code>nil</code>。这就是在嵌套使用<code>xib</code>自定义视图时非常容易出现的问题，我们觉得被嵌套的视图能够正常显示出来，但是实际上它并没有被按照我们在<code>xib</code>上指定的方式被初始化。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-6.jpg"></p>

<h2>Solution</h2>

<p>那么如何解决这种问题，以及这种问题又是如何出现的呢？其实这主要是由于我们对<code>xib</code>文件的加载原理不熟悉所导致的，我们以为定义一个<code>View</code>，创建一个<code>xib</code>文件并布局好它的子视图，让后将它使用在另外一个<code>xib</code>文件中，把<code>custom class</code>改成它，然后<code>xib</code>的加载系统会自动为我们做好其余的一切。其实并不是这样的。</p>

<p>这样做<code>xib</code>加载系统只会为我们创建一个<code>CustomView</code>的对象，但这并不包括<code>CustomView</code>所对应的<code>xib</code>文件中的部分，所以只创建了一个空白的<code>View</code>。</p>

<p>解决他们有两种方式，不过最终的思路都是通过代码强制使<code>CustomView</code>的<code>xib</code>部分被加载。第一种是通过代码创建<code>CustomView</code>的对象，然后<code>addSubview</code>到<code>viewController</code>的<code>view</code>上。第二种是在<code>CustomView</code>的实现文件里，通过重载一些方法，来完成加载<code>xib</code>文件。</p>

<p>这两种方法各有利弊，第一种使用起来方便也好理解，但是当嵌套的层级比较多的时候或者一个<code>View</code>中有多个这样的<code>CustomView</code>时，这种方式就会显得过于麻烦。而第二种虽然理解起来有些难度，但是当你处理好之后，直接在需要的<code>xib</code>文件中拖入<code>view</code>，改个<code>custom class</code>，就能直接生成需要的对象了，并且也能够在<code>xib</code>中对他们进行直接布局，不再需要用代码去布局了。</p>

<h3>NO 1.</h3>

<p>先来介绍第一种方法，很简单，就是找到<code>xib</code>文件，生成对象，设置属性，<code>addsubview</code>到视图上。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-7.jpg"></p>

<h3>NO 2.</h3>

<p>第二种方法是通过重载<code>initWithCoder</code>方法来实现，因为通过<code>xib</code>来创建一个对象会调用到这个方法，所以我们需要在这个方法里做一些处理，把这个<code>CustomView</code>的<code>xib</code>中的内容加载进来，这时同样是需要通过代码来来加载，首先附上代码</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithCoder:</span><span class="n">aDecoder</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIView</span> <span class="o">*</span><span class="n">containerView</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;CustomView&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">instantiateWithOwner:</span><span class="n">self</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">newFrame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">containerView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>此外，还要这里的输出口以及设置<code>custom class</code>的位置跟第一种方式有所不同，这里需要取消掉<code>xib</code>中<code>view</code>的<code>custom class</code>，再将跟它连接的图片与文字的输出口取消掉，在这里这个<code>view</code>只是被当做一个容器来处理，它跟<code>Customview</code>没有直接关系，它将来会被<code>addSubview</code>到<code>CustomView</code>上，除此之外还要把<code>xib</code>的<code>File's ower</code>的<code>custom class</code>改成<code>CustomView</code>，表示这个<code>xib</code>文件的持有者是<code>CustomView</code>。再把它与图片和文字通过输出口连接起来。</p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-8.jpg"></p>

<p>这个时候在运行程序就看到了我们想要的结果了。<sup>_^</sup></p>

<p><img src="http://picturemapstore.bcs.duapp.com/2014/08/QQ20140810-10.jpg"></p>

<p>其实想要实现第二种解决方案所要的效果，还有一种方式，它是通过重载<code>awakeAfterUsingCoder:</code>方法来实现的，这个方法的返回值会替换掉真正的加载对象，所以在具体的加载<code>CustomView</code>的方式又与第一种相同，所以<code>xib</code>的输出口连接与<code>custom class</code>的设置也与第一种解决方案相同。不过这种方式是更复杂也更难于理解的，不推荐使用，因为上一个方法就能很好的解决这个问题了，这里只是贴出这个方法的代码，有想仔细研究的请参看文章底部的参考文章。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">awakeAfterUsingCoder:</span><span class="p">(</span><span class="n">NSCoder</span><span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">BOOL</span> <span class="n">isJustAPlaceholder</span> <span class="o">=</span> <span class="p">([[</span><span class="n">self</span> <span class="n">subviews</span><span class="p">]</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isJustAPlaceholder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CustomView</span><span class="o">*</span> <span class="n">theRealThing</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">class</span><span class="p">]</span> <span class="n">getClassObjectFromNib</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">theRealThing</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// make compatible with Auto Layout</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">theRealThing</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// convince ARC that we&#39;re legit, unnecessary since at least Xcode 4.5</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">((</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRetain</span><span class="p">((</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">theRealThing</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">theRealThing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>参考资料</h2>

<blockquote><p><a href="https://blog.compeople.eu/apps/?p=142">Embedding custom-view Nibs in another Nib: Towards the holy grail</a></p>

<p><a href="http://blog.yangmeyer.de/blog/2012/07/09/an-update-on-nested-nib-loading">An Update on Nested Nib Loading</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Hexadecimal conversion]]></title>
    <link href="http://blog.wtlucky.com/blog/2014/07/25/swift-hexadecimal-conversion/"/>
    <updated>2014-07-25T15:11:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2014/07/25/swift-hexadecimal-conversion</id>
    <content type="html"><![CDATA[<p>自己的<code>Blog</code>好久没有更新了，一个是因为这半年里要忙着毕业好多事情，再一个就是工作上也很忙，基本就没有时间来为我的<code>Blog</code>增添新的血液了。<code>APPLE</code>在<code>WWDC 2014</code>上公布了一门新的编程语言<a href="https://developer.apple.com/swift/">Swift</a>，最近可以说是相当火热，而且在语言热度排名上也是突飞猛进，这是一个集合了N多语言优秀特性于一身的全新语言，它将成为开发<code>iOS</code>和<code>MAC</code>的新的选择。并且据说他将会取代<code>Objective-C</code>，但是我觉得并不是这样，不过这也仅仅是一家之谈，至于会不会这样，我们走着瞧。<!-- More --></p>

<p>既然苹果放出了这样一个利器，身为<code>iOS开发者</code>的我也不能落下，<code>APPLE</code>为我们提供了两个文档<a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/index.html">The Swift Programming Language</a>和<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html">Using Swift with Cocoa and Objective-C</a>。他们一个是纯语言角度的介绍<code>Swift</code>，包括各种细节语法，另一个则是介绍怎么它怎么与<code>Cocoa</code>交互，如何使用它开发<code>iOS</code>和<code>MAC</code>应用，以及如何与现有的程序兼容。学习这样一门全新的技术我还是建议读第一手资料的，虽然现在网络上有好多中文版的资料了吧，但是苹果的文档写的很是通俗易懂，读起来也没有什么困难。而起自己之前有过脚本语言的经验，所以看起来也是很快。</p>

<p>读完两个文档，就做一些实战的内容，先从小程序开始，之前自己写过一个<code>进制转换器</code>，没啥功能，就是提供一个十进制和十六进制互相转换的功能，主要还是为了方便自己在写一些颜色值的时候使用。之前的版本是用<code>Objective-C</code>写的，那么这次就用<code>Swift</code>重写一遍。</p>

<p>这个程序最主要的部分也就是两个进制相互转换的算法了，用<code>Objective-C</code>实现起来很简单，通过一下字符<code>char</code>的运算就能搞定。代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Hexdecimal To Decimal  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">decimalConvertedFromHexdecimal:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">hexdecimal</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">hexdecimal</span> <span class="nl">characterAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;f&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithTitle:</span><span class="s">@&quot;错误&quot;</span>
</span><span class='line'>  <span class="nl">message:</span><span class="s">@&quot;你提供了非法字符&quot;</span> <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>  <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;知道了&quot;</span>
</span><span class='line'>  <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span> <span class="n">becomeFirstResponder</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">pow</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Decimal To Hexdecimal  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">hexdecimalConvertedFromDecimal:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">decimal</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="n">decimal</span> <span class="n">intValue</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">0</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">while</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">-</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">character</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">result</span> <span class="nl">insertString:</span><span class="n">character</span> <span class="nl">atIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">num</span> <span class="o">/=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但是当我使用<code>Swift</code>重写的时候，我进入到了一个很深的坑里，发现这项任务是如此的难做，我定义了这样两个方法，注意方法的参数和返回值：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Swift Code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="nl">hexdecimal:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="nl">decimal:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我使用的是Swift提供的<code>String</code>类型，它是由一系列的<code>Character</code>类型的字符组成的，但是这种<code>Character</code>并不是<code>char</code>，他们在处理进制转换这个问题上让我无从下手，也有可能是我还不够熟悉，不知道正确的用法，如果有人知道欢迎告诉我。下面来说一说我遇到的问题，首先在<code>Swift</code>中是没有<code>‘A’</code>这种字符表示方法的，更不用说用它去进行运算了，其次<code>Character</code>不能进行大小比较，只能进行想等或者不等的比较，这样一来在判断一个字符所在的区间上就遇到了很大的问题。</p>

<p><code>Swift</code>的<code>String</code>提供了<code>uft8</code>和<code>uft16</code>方法，返回值为<code>UTF8View</code>或者<code>UFT16View</code>，这是一个<code>Array</code>，使用<code>for-in</code>遍历他们可以输出他们的数字值，但是这个值也仅仅是能进行输出使用，他们不是<code>Int</code>也不能进行加减运算。不能进行运算在转换上就无能为力。单单从这里看来，<code>Swift</code>确实蛋疼，连这么一个小小的问题都不能搞定。</p>

<p>不过还好，<code>Swift</code>对<code>Cocoa</code>做了兼容使得<code>String</code>与<code>NSString</code>可以无缝转化，在使用了<code>NSString</code>后，问题的处理就变得简单多了，在<code>Swift</code>中<code>NSString</code>使用一系列的<code>unichar</code>组成的，查看声明可以看到他其实就是<code>UInt</code>，那么他就可以进行运算，所以把<code>String</code>改成<code>NSString</code>完成这两个方法。即使这样，<code>Swift</code>不支持<code>‘A’</code>这种字符的特性，也使得我们必须自己把字符转化为数值来运算，使得程序的可读性很差，还就是<code>Swift</code>的内置类型不支持隐式转换，所以在类型不一致的地方都需要强制转换一下。</p>

<p>这两个方法的实现在文末的代码中有，这个代码虽然完成了功能，但是还有很多需要改进和优化的地方，其次在代码风格上也需要改一下，<a href="https://github.com/raywenderlich/swift-style-guide">Raywenderlich</a>的<code>Swift</code>的代码风格就很不错，非常值得套用。</p>

<p>最后说一下，在<code>iOS8</code>中<code>UIAlertView</code>和<code>UIActionSheet</code>被废除了，而引入的是<code>UIAlertController</code>，通过<code>preferredStyle</code>来确定类型，通过<code>UIAlertAction</code>来增加事件，然后通过<code>presentViewController</code>来显示出来，在使用上做到了统一，还是蛮方便的。</p>

<p>下面附上完全的代码，
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (HexConverterViewController.m)</span> <a href='/downloads/code/swift/HexConverterViewController.m'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ViewController.swift</span>
</span><span class='line'><span class="c1">//  HexConverter_swift</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by taowang on 7/24/14.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014 Meilishuo. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">ViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">beforeConvertTextField:</span> <span class="n">UITextField</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">afterConvertTextField:</span> <span class="n">UITextField</span>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="nl">segmentControl:</span> <span class="n">UISegmentedControl</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nl">action:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;setTextFieldKeyboardType&quot;</span><span class="p">),</span> <span class="nl">forControlEvents:</span> <span class="n">UIControlEvents</span><span class="p">.</span><span class="n">ValueChanged</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="nl">hexdecimal:</span> <span class="n">NSString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSString</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="nl">sum:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">var</span> <span class="nl">i:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">c:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="n">hexdecimal</span><span class="p">.</span><span class="n">characterAtIndex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="nl">num:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">70</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">55</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">97</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">102</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">87</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">48</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">57</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">48</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;错误&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;你提供了非法字符&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>                <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;知道了&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Cancel</span><span class="p">,</span> <span class="nl">handler:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">CDouble</span><span class="p">(</span><span class="n">hexdecimal</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">Int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">NSString</span><span class="p">(</span><span class="nl">format:</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="nl">decimal:</span> <span class="n">NSString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSString</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="nl">num:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">decimal</span><span class="p">.</span><span class="n">integerValue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">result:</span> <span class="n">NSMutableString</span> <span class="o">=</span> <span class="n">NSMutableString</span><span class="p">(</span><span class="nl">capacity:</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">c:</span> <span class="n">unichar</span> <span class="o">=</span> <span class="mi">48</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="mi">97</span> <span class="o">+</span> <span class="n">unichar</span><span class="p">(</span><span class="n">tmp</span> <span class="o">-</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">=</span> <span class="mi">48</span> <span class="o">+</span> <span class="n">unichar</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">let</span> <span class="nl">character:</span> <span class="n">NSString</span> <span class="o">=</span> <span class="n">NSString</span><span class="p">(</span><span class="nl">format:</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">insertString</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="nl">atIndex:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">/=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">setTextFieldKeyboardType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">selectedSegmentIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">ASCIICapable</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">NumberPad</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">endEditing</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">endEditing</span><span class="p">(</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="n">convertButtonPressed</span><span class="p">(</span><span class="nl">sender:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s">&quot;&quot;</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;提示&quot;</span><span class="p">,</span> <span class="nl">message:</span> <span class="s">&quot;你还没有填写被转换数字&quot;</span><span class="p">,</span> <span class="nl">preferredStyle:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>            <span class="n">alert</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="n">UIAlertAction</span><span class="p">(</span><span class="nl">title:</span> <span class="s">&quot;知道了&quot;</span><span class="p">,</span> <span class="nl">style:</span> <span class="p">.</span><span class="n">Cancel</span><span class="p">,</span> <span class="nl">handler:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="nl">animated:</span> <span class="n">true</span><span class="p">,</span> <span class="nl">completion:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">segmentControl</span><span class="p">.</span><span class="n">selectedSegmentIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">afterConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">decimalConvertedFromHexdecimal</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">afterConvertTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">hexdecimalConvertedFromDecimal</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">beforeConvertTextField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wax Lua—使用lua编写原生ios程序的框架实现原理]]></title>
    <link href="http://blog.wtlucky.com/blog/2013/12/28/wax-lua/"/>
    <updated>2013-12-28T20:13:00+08:00</updated>
    <id>http://blog.wtlucky.com/blog/2013/12/28/wax-lua</id>
    <content type="html"><![CDATA[<h3>Wax Lua是什么？</h3>

<p><code>Lua</code>我就不介绍了，我们都在使用的脚本语言，游戏开发的神器。
而<code>Wax</code>就是使用<code>Lua</code>脚本语言来编写<code>ios原生应用</code>的一个框架，它把Lua脚本语言和原生<code>Objective-C</code>应用编程接口(API)结合起来。这意味着，你可以从Lua里面，使用任何和全部的<code>Objective-C</code>类及框架。</p>

<h3>为什么要使用Wax Lua？</h3>

<p>苹果在2010年9月就修改条款允许开发者使用脚本语言，不再是只限定开发者只能使用<code>Objective-C</code>和<code>javascript</code>两种语言，这也就导致了<code>Wax Lua</code>的出现。</p>

<pre><code>Wax Lua的优势：
1.  开源、免费，遵循MIT协议。项目地址：[Wax Lua](https://github.com/probablycorey/wax)
2.  可以使用原生API，可以访问所有ios的框架。
3.  Lua类型和OC类型自动转化。
4.  自动内存管理。
5.  便捷的Lua模块，使得HTTP请求和JSON解析容易且快速。
6.  简洁的代码，不再有头文件，数组和字典等语句。
7.  Lua支持闭包，相当强大的功能。
</code></pre>

<!-- More -->


<p>当年风靡一时的《Angry Birds》就是使用<code>Wax Lua</code>开发的，不过一个不幸的消息就是<code>Wax Lua</code>框架在2011年，即两年前原作者就不在对它进行维护了，所以不能确定在如今<code>XCode5</code>，<code>iOS7</code>时代它是否依然可以用。我觉得作者不再维护它是有原因的，现在来看他的优势已不再有这么多了，iOS4有了block，就有了Lua的闭包的功能，iOS5有了ARC，也可以自动管理内存，iOS6简化了OC代码，使代码脚本化，再也不用长长的数组与字典语句了，iOS5自带的NSJSONSerialization和强大<a href="https://github.com/AFNetworking/AFNetworking/">AFNetworking</a>也使HTTP请求和JSON解析相当便捷。如此看来<code>Wax Lua</code>的优势也所剩无几了。</p>

<h3>Wax Lua 使用方法</h3>

<p>说一下<code>Wax</code>的特点，它支持你在脚本里使用任何<code>OC</code>的类，同样也支持你创建一个类。</p>

<p>使用一个类时你会这样使用：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">NSString</span> <span class="c1">-- Returns the NSString class</span>
</span><span class='line'><span class="n">UIView</span> <span class="c1">-- Returns the UIView class</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样调用其实一个语法糖，实际上他调用的是wax.class["UIView "]，但是我们在使用的时候不需要知道这些，因为在这个框架里已经通过设置元表的方法实现了这一点。</p>

<p>当定义一个类的时候会是这样：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">waxClass</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">MyClass&quot;</span><span class="p">,</span> <span class="n">NSObject</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
遵循协议的类：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">waxClass</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">MyClass&quot;</span><span class="p">,</span><span class="n">NSObject</span><span class="p">,</span><span class="n">protocols</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;</span><span class="s">UITableViewDelegate&quot;</span><span class="p">,</span><span class="s2">&quot;</span><span class="s">UITableViewDataSource&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在你定义这个类的脚本文件里缩写的其他function都将作为这个类的实例方法。且这个方法的第一个参数必须是<code>self</code>，这就是Wax模仿Objective-C的面向对象的关键所在。
因此在Wax中调用方法要使用冒号，类似这样：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIApplication</span><span class="p">:</span><span class="n">sharedApplication</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其实他就等同于这样：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">(</span><span class="n">UIApplication</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在调用含有多个参数的方法时候，使用<code>_</code>来代替OC中的:,例如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">UIAlertView</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;title&quot;</span> <span class="nl">message:</span><span class="s">@&quot;message&quot;</span> <span class="nl">delegate:</span><span class="nb">nil</span><span class="p">];</span>  <span class="c1">//OC方式</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">UIAlertView</span><span class="p">:</span><span class="n">initWithTitle_message_delegate</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">title&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">message&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>    <span class="c1">--Wax 方式</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用<code>Wax</code>创建对象不需要你<code>alloc</code>，因为他会帮你实现内存管理，它是怎么实现的稍后再说。</p>

<p><code>Wax</code>不支持属性Property，因此你不能使用OC中的点语法，<code>Wax</code>要求Lua与OC的通信必须通过方法来完成，就是如果你要访问一个Property的话就只能使用它的<code>setter</code>和<code>getter</code>方法。
如果你在脚本中使用了点语法，那么你将为这个对象创建一个实例变量，但这只是在Lua层面的，在OC层面它并不知道你创建了这样一个实例变量。</p>

<p><code>Wax</code>会强制的把OC的对象转换成Lua的对象，同时他也支持反向转化，比如一个方法需要<code>NSString</code>类型的参数，你可以直接传递Lua的字符串进去。
有时你不想让OC对象被强制转化成Lua的，它也提供了相应变回OC对象的方法。</p>

<p><code>Wax</code>对枚举和结构的支持并不是很好，就是它需要把你需要用到的枚举和结构都按照他定义好的格式添加到<code>APP_ROOT/wax/stdlib/enums.lua和APP_ROOT/wax/wax-scripts/structs.lua</code>中，只有这样你才能正常的使用它们。</p>

<p><code>Wax</code>对协议的支持也不是很好，有的协议在<code>Wax</code>中可以正常使用，有的则不可以，你在源文件中会看到ProtocolLoader.h这样一个文件，他需要把不支持的协议预先加载到runtime中，作者自己也不知道这是为什么，也许是一个他不知道的runtime method。</p>

<p><code>Wax</code>也是不支持分类的，不过这个使用的比较少，不支持也没有什么。</p>

<h3>Wax Lua 实现原理</h3>

<p>我们知道OC是一门动态语言，他的<code>runtime</code>很强大，强大到你可以在运行时动态的创建一个类，而<code>Wax</code>真是借助于OC的<code>runtime</code>实现了它一系列的功能。
目前我们在使用的<code>CCLuaObjcBridge</code>，这个类也是实现了Lua调用OC的方法，他借助的也是<code>runtime</code>，但是跟<code>Wax</code>比起来，他就简单了很多，从他的限制就能看出来，它只支持类的静态方法，方法只能有一个参数，不能创建对象，不能调用实例方法。它的实现是这样的：通过类名找到类对象，通过预先定义好的只能包含一个参数或没有参数的方法名生成<code>selector</code>，再根据类对象和<code>selector</code>生成<code>NSMethodSignature</code>，进而由NSMethodSignature生成NSInvocation，进行方法调用，再加上参数和返回值的Lua与OC的类型转换，就完成了一次OC方法的调用。</p>

<p>下面再说一下<code>Wax</code>。<code>Wax</code>的源码中有这样一个文件<code>wax_helpers.h/wax_helpers.m</code>，它提供了一系列的工具方法包括lua与OC的类型之间相互转化，lua中使用_的方法名转化为OC中:的selector，根据lua传递过来的方法名找到对应的<code>selector</code>等方法，有兴趣的同学可以去看看代码。</p>

<p><code>Wax</code>主要是维护了这样的一个结构，基本上所有与对象有关的操作都是在这个基础上完成的：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_wax_instance_userdata</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="n">BOOL</span> <span class="n">isClass</span><span class="p">;</span>
</span><span class='line'><span class="n">Class</span> <span class="n">isSuper</span><span class="p">;</span> <span class="c1">// isSuper not only stores whether the class is a super, but it also contains the value of the next superClass.</span>
</span><span class='line'><span class="n">BOOL</span> <span class="n">actAsSuper</span><span class="p">;</span> <span class="c1">// It only acts like a super once, when it is called for the first time.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">wax_instance_userdata</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
第一个<code>instance</code>就是OC对象的一个指针，<code>isClass</code>标识这是不是一个类对象，<code>isSuper</code>用来标识他的父对象，类似以OC中的<code>isa</code>指针，这么做是为了在方法调用时子类如果找不到的话就会由此去父类查找，<code>actAsSuper</code>用来标识这个对象是不是被当做父类来使用，<code>Wax</code>中一个对象智能被当做父类一次。</p>

<p><code>Wax</code>中还维护了两个表，一个<code>UserDataTable</code>一个<code>StrongUserDataTable</code>。这两个表中都存储的是<code>Wax_instance_userdata-&gt;instance</code>为<code>key</code>，<code>Wax_instance_userdata</code>为值的键值对。 <code>UserDataTable</code>是一个值为wake的弱表，他用来存储所有创建的对象，是一个弱引用，他其中就存储了通过lua创建的OC对象，因为是弱表，所以当不在使用时会调用<code>__gc</code>这个元方法，进而将该OC对象销毁。<code>StrongUserDataTable</code>是一个强引用表他保存的是所有通过<code>Wax</code>创建的对象，他不是一个弱表所以需要手动管理内存。也就是说使用<code>Wax</code>创建的对象除了会在<code>UserDataTable</code>中保存一份以外还会在<code>StrongUserDataTable</code>保存一份。</p>

<p>说到这里就在说一下<code>Wax</code>的内存管理，<code>Wax</code>的内存管理也是基于引用计数的，而且他没有使用<code>AutoReleasePool</code>。所有引用计数的操作都在框架里为你实现好了，所以在lua里你不能调用<code>alloc</code>方法，而要直接使用<code>init</code>方法，因为他会判断你的方法是不是<code>init</code>初始化方法，如果是的话<code>Wax</code>会帮你调用<code>alloc</code>方法。对象的<code>release</code>有两种一种是<code>UserDataTable</code>中的对象会在<code>__gc</code>元方法中<code>release</code>，另外一种就是在<code>Wax</code>运行的时候有一个定时器timer，不停地轮询<code>StrongUserDataTable</code>中的对象的引用计数如果小于2，那么就会<code>release</code>。</p>

<p><code>Wax</code>创建类和对象以及方法调用都是通过元方法来实现的。
先来说创建类，就是通过定义的类名以及父类，在运行时通过字符串以及运行时的API创建一个类，通过<code>class_addMethod（）</code>函数给创建的这个类注册方法，而这个方法的实现就是一个IMP（函数指针），Wax中IMP是这样的一类方法，方法包括lua中用户自己写的function，在OC的层面又对这个function的参数和返回值进行了OC与lua的互转，这两部分组合起来构成一个方法。也就是当调用一个用lua写的方法的时候会首先把参数转化为lua类型然后由<code>lua_pcall（）</code>调用lua中的方法，完成后再把返回值转换成OC类型的。</p>

<p>最后说一下<code>Wax</code>的方法调用，无论是OC自己的方法还是用户自己写的方法最终都是去调用这个IMP（函数指针），所以在这之前无论是调用OC原生的方法和用户自己定义的方法，处理的方式都是一样的。在元方法<code>__index</code>里将方法的调用作为一个closure push到lua中，在元方法<code>__newindex</code>中进行方法的override。在closure中的方法调用就和<code>CCLuaObjcBridge</code>一样了，都是先获取到<code>selector</code>，生成<code>NSMethodSignature</code>，然后生成<code>NSInvocation</code>，然后调用。与<code>CCLuaObjcBridge</code>不同的地方就是由于这个对象是<code>wax_instance_userdata</code>中的<code>instance</code>，而不是由类名生成的类对象，所以他可以调用实例方法。</p>

<p>以上仅是个人一些理解，自身对Lua的C API和OC的runtime的API不是很熟悉，<code>Wax</code>中使用了大量的这些API，所以有不对的地方还请指出来。</p>
]]></content>
  </entry>
  
</feed>
